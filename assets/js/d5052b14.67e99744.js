"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[78140],{31347:(e,t,n)=>{n.d(t,{A:()=>l});n(96540);var a=n(18215);const o={tabItem:"tabItem_Ymn6"};var r=n(74848);function l(e){let{children:t,hidden:n,className:l}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(o.tabItem,l),hidden:n,children:t})}},3384:(e,t,n)=>{n.d(t,{A:()=>M});var a=n(96540),o=n(18215),r=n(55236),l=n(56347),i=n(88385),s=n(5793),d=n(47422),c=n(81038);function m(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return m(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,d.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const o=(0,l.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s.aZ)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=u(e),[l,s]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[d,m]=p({queryString:n,groupId:o}),[g,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,c.Dv)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),x=(()=>{const e=d??g;return h({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{x&&s(x)}),[x]);return{selectedValue:l,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),f(e)}),[m,f,r]),tabValues:r}}var f=n(195);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(74848);function y(e){let{className:t,block:n,selectedValue:a,selectValue:l,tabValues:i}=e;const s=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.a_)(),c=e=>{const t=e.currentTarget,n=s.indexOf(t),o=i[n].value;o!==a&&(d(t),l(o))},m=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=s.indexOf(e.currentTarget)+1;t=s[n]??s[0];break}case"ArrowLeft":{const n=s.indexOf(e.currentTarget)-1;t=s[n]??s[s.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>s.push(e),onKeyDown:m,onClick:c,...r,className:(0,o.A)("tabs__item",x.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function b(e){const t=g(e);return(0,v.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,v.jsx)(y,{...e,...t}),(0,v.jsx)(j,{...e,...t})]})}function M(e){const t=(0,f.A)();return(0,v.jsx)(b,{...e,children:m(e.children)},String(t))}},31502:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var a=n(74848),o=n(28453),r=n(78924),l=n(3384),i=n(31347);const s={title:"Modal Dialogues",tags:["Javascript","Modal","Dialogue"]},d=void 0,c={id:"guides/javascript/modal/index",title:"Modal Dialogues",description:"The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle.",source:"@site/docs/guides/javascript/modal/index.md",sourceDirName:"guides/javascript/modal",slug:"/guides/javascript/modal/",permalink:"/moodledevdocs/docs/4.4/guides/javascript/modal/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/guides/javascript/modal/index.md",tags:[{label:"Javascript",permalink:"/moodledevdocs/docs/4.4/tags/javascript"},{label:"Modal",permalink:"/moodledevdocs/docs/4.4/tags/modal"},{label:"Dialogue",permalink:"/moodledevdocs/docs/4.4/tags/dialogue"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Modal Dialogues",tags:["Javascript","Modal","Dialogue"]},sidebar:"docs",previous:{title:"jQuery",permalink:"/moodledevdocs/docs/4.4/guides/javascript/jquery/"},next:{title:"Modules",permalink:"/moodledevdocs/docs/4.4/guides/javascript/modules"}},m={},u=[{value:"Creating a basic modal",id:"creating-a-basic-modal",level:2},{value:"Modal Factory",id:"modal-factory",level:3},{value:"Using the &#39;trigger&#39;",id:"using-the-trigger",level:4},{value:"Instantiating modal types",id:"instantiating-modal-types",level:2},{value:"Creating a custom modal type",id:"creating-a-custom-modal-type",level:2},{value:"Overriding default configuration",id:"overriding-default-configuration",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components},{DeprecatedSince:n,Since:d}=t;return n||g("DeprecatedSince",!0),d||g("Since",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.A,{frontMatter:s,metadata:c}),"\n",(0,a.jsx)(d,{version:"3.2"}),"\n",(0,a.jsx)(t.p,{children:"The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle."}),"\n",(0,a.jsx)(t.p,{children:"The module attempts to ensure that all accessibility requirements are met, including applying the correct aria roles, focus control, aria hiding background elements, and locking keyboard navigation."}),"\n",(0,a.jsx)(t.p,{children:"Modals will fire events for common actions that occur within the modal for other code to listen to and react accordingly."}),"\n",(0,a.jsx)(t.p,{children:"Moodle ships with several standard modal types for you to re-use including a simple cancel modal, and a save/cancel modal."}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-basic-modal",children:"Creating a basic modal"}),"\n",(0,a.jsx)(d,{version:"4.3",issueNumber:"MDL-78324"}),"\n",(0,a.jsxs)(t.p,{children:["Modals can be created by calling the static ",(0,a.jsx)(t.code,{children:"create"})," method on the modal type you wish to create, for example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Creating a stadard modal"',children:"import Modal from 'core/modal';\n\nexport const init = async () => {\n    const modal = await Modal.create({\n        title: 'Test title',\n        body: '<p>Example body content</p>',\n        footer: 'An example footer content',\n        show: true,\n        removeOnClose: true,\n    });\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Other standard options are described in the JS Documentation for ",(0,a.jsx)(t.a,{href:"https://jsdoc.moodledev.io/master/module-core_modal.html#~MoodleConfig",children:"the MoodleConfig type"}),"."]}),"\n",(0,a.jsx)(t.admonition,{title:"Support for earlier versions",type:"note",children:(0,a.jsx)(t.p,{children:"If you are supporting an earlier version of Moodle, then you must use the Modal Factory and register your modal."})}),"\n",(0,a.jsx)(t.h3,{id:"modal-factory",children:"Modal Factory"}),"\n",(0,a.jsx)(n,{version:"4.3",issueNumber:"MDL-78324"}),"\n",(0,a.jsxs)(t.p,{children:["The Modal Factory can be used to instantiate a new Modal. The factory provides a ",(0,a.jsx)(t.code,{children:"create"})," function, accepting some configuration which is used to create the modal instance, and an optional ",(0,a.jsx)(t.em,{children:"trigger element"}),". The ",(0,a.jsx)(t.code,{children:"create"})," function returns a Promise that is resolved with the created modal."]}),"\n",(0,a.jsx)(t.p,{children:"The configuration is provided as an object with key/value pairs. The options are:"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"key"})}),(0,a.jsx)(t.th,{children:(0,a.jsx)(t.strong,{children:"description"})})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"title"}),(0,a.jsx)(t.td,{children:"the title to display in the modal header - note: this will render HTML"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"body"}),(0,a.jsx)(t.td,{children:"the main content to be rendered in the modal body"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"footer"}),(0,a.jsx)(t.td,{children:"the content to be rendered in the modal footer"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"type"}),(0,a.jsx)(t.td,{children:"one of the modal types registered with the factory"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"large"}),(0,a.jsx)(t.td,{children:"a boolean to indicate if the modal should be wider than the default size"})]})]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Basic instantiation of a modal"',children:"import ModalFactory from 'core/modal_factory';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: '<p>Example body content</p>',\n        footer: 'An example footer content',\n    });\n    modal.show();\n\n    // ...\n};\n"})}),"\n",(0,a.jsx)(t.p,{children:"Where text, language strings, or HTML is accepted, a Promise can also be provided."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Using a template to render the body"',children:"import ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: Templates.render('mod_example/example_modal_content', {id: 42}),\n        footer: 'An example footer content',\n    });\n    modal.show();\n\n    // ...\n};\n"})}),"\n",(0,a.jsx)(t.h4,{id:"using-the-trigger",children:"Using the 'trigger'"}),"\n",(0,a.jsx)(n,{version:"4.3",issueNumber:"MDL-78324"}),"\n",(0,a.jsxs)(t.p,{children:["Moodle Modals created using the Modal Factory support an optional ",(0,a.jsx)(t.em,{children:"trigger"})," element. Whilst this is available, it is no longer recommended and support for it will likely be removed in Moodle 4.3."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Providing a trigger"',children:"import ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport $ from 'jquery';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: Templates.render('mod_example/example_modal_content', {id: 42}),\n        footer: 'An example footer content',\n    }, $('a.item-delete'));\n\n    // ...\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"instantiating-modal-types",children:"Instantiating modal types"}),"\n",(0,a.jsx)(t.p,{children:"A number of commonly used modals are available as standard, these include:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"a Delete / Cancel modal"}),"\n",(0,a.jsx)(t.li,{children:"a Save / Cancel modal"}),"\n",(0,a.jsx)(t.li,{children:"a Cancel modal"}),"\n"]}),"\n","\n",(0,a.jsxs)(l.A,{groupId:"43Split",children:[(0,a.jsxs)(i.A,{value:"after43",label:"Moodle 4.3",children:[(0,a.jsx)(d,{version:"4.3",issueNumber:"MDL-78324"}),(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"If you are developing code for use in Moodle 4.2, or earlier, then you must continue to follow the 4.2 guidelines."})}),(0,a.jsxs)(t.p,{children:["To use these modals you can call the ",(0,a.jsx)(t.code,{children:"create"})," method on the relevant Modal Class."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Creating a save/cancel modal"',children:"import ModalSaveCancel from 'core/modal_save_cancel';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalSaveCancel.create({\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    // ...\n};\n"})}),(0,a.jsx)(t.p,{children:"Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Listening to a Save event"',children:"import ModalSaveCancel from 'core/modal_save_cancel';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalSaveCancel.create({\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    modal.getRoot().on(ModalEvents.save, (e) => {\n        // ...\n    })\n\n    // ...\n};\n"})})]}),(0,a.jsxs)(i.A,{value:"pre43",label:"Moodle 4.2 and earlier",children:[(0,a.jsxs)(t.p,{children:["To use these modals you can provide the ",(0,a.jsx)(t.code,{children:"type"})," argument to the ",(0,a.jsx)(t.code,{children:"ModalFactory.create"})," method. This argument takes a string value and values can be found for these modals in ",(0,a.jsx)(t.code,{children:"ModalFactory.TYPES"}),"."]}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Creating a save/cancel modal"',children:"import ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    // ...\n};\n"})}),(0,a.jsx)(t.p,{children:"Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below."}),(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Listening to a Save event"',children:"import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    modal.getRoot().on(ModalEvents.save, (e) => {\n        // ...\n    })\n\n    // ...\n};\n"})})]})]}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-custom-modal-type",children:"Creating a custom modal type"}),"\n",(0,a.jsx)(t.p,{children:"In some situations it is desirable to write a brand new modal."}),"\n",(0,a.jsx)(t.p,{children:"There are two parts to this:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["a new Modal class which extends the ",(0,a.jsx)(t.code,{children:"core/modal"})," class; and"]}),"\n",(0,a.jsx)(t.li,{children:"a template"}),"\n"]}),"\n",(0,a.jsxs)(t.admonition,{title:"Custom modals in Moodle 4.2 and earlier",type:"important",children:[(0,a.jsxs)(t.p,{children:["Since Moodle 4.3, creating the Modal class is as simple as extending the ",(0,a.jsx)(t.code,{children:"core/modal"})," class, and providing a ",(0,a.jsx)(t.code,{children:"TYPE"})," property, and ",(0,a.jsx)(t.code,{children:"TEMPLATE"})," property."]}),(0,a.jsxs)(t.p,{children:["For older versions of Moodle, refer to the ",(0,a.jsx)(t.a,{href:"/moodledevdocs/docs/4.2/guides/javascript/modal/#creating-a-custom-modal-type",children:"Moodle 4.2 documentation"}),"."]})]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="mod/example/amd/src/my_modal.js"',children:'import Modal from \'core/modal\';\n\nexport default MyModal extends Modal {\n    static TYPE = "mod_example/my_modal";\n    static TEMPLATE = "mod_example/my_modal";\n}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The template should extend the ",(0,a.jsx)(t.code,{children:"core/modal"})," core template and can override any of the title, body, or footer regions, for example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-mustache",metastring:'title="mod/example/templates/my_modal.mustache"',children:'{{< core/modal }}\n    {{$title}}{{#str}} login {{/str}}{{/title}}\n    {{$body}}\n        <div class="container">\n            <form>\n                <div class="form-group row">\n                    <label for="inputEmail" class="col-sm-2 col-form-label">{{#str}} email {{/str}}</label>\n                    <div class="col-sm-10">\n                        <input type="email" class="form-control" id="inputEmail" placeholder="{{#str}} email {{/str}}">\n                    </div>\n                </div>\n                <div class="form-group row">\n                    <label for="inputPassword" class="col-sm-2 col-form-label">{{#str}} password {{/str}}</label>\n                    <div class="col-sm-10">\n                        <input type="password" class="form-control" id="inputPassword" placeholder="{{#str}} password {{/str}}">\n                    </div>\n                </div>\n            </form>\n        </div>\n    {{/body}}\n    {{$footer}}\n        <button type="button" class="btn btn-primary" data-action="login">{{#str}} login {{/str}}</button>\n        <button type="button" class="btn btn-secondary" data-action="cancel">{{#str}} cancel {{/str}}</button>\n    {{/footer}}\n{{/ core/modal }}\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Once defined, the new modal can be instantiated using the standard ",(0,a.jsx)(t.code,{children:"create"})," method, for example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Instantiating a custom modal"',children:"import MyModal from 'mod_example/my_modal';\n\nexport default const init = async() => {\n    // ...\n    const modal = await MyModal.create({});\n\n    modal.show();\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"overriding-default-configuration",children:"Overriding default configuration"}),"\n",(0,a.jsxs)(t.p,{children:["When creating your own modal type, you may wish to override the standard configuration. This can be achieved by overriding the ",(0,a.jsx)(t.code,{children:"configure"})," class and providing your own options, for example:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="Overriding standard options"',children:'import Modal from \'core/modal\';\n\nexport default MyModal extends Modal {\n    static TYPE = "mod_example/my_modal";\n    static TEMPLATE = "mod_example/my_modal";\n\n    configure(modalConfig) {\n        // Show this modal on instantiation.\n        modalConfig.show = true;\n\n        // Remove from the DOM on close.\n        modalConfig.removeOnClose = true;\n\n        super.configure(modalConfig);\n\n        // Accept our own custom arguments too.\n        if (modalConfig.someValue) {\n            this.setSomeValue(someValue);\n        }\n    }\n\n    setSomeValue(value) {\n        this.someValue = value;\n    }\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}function g(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);