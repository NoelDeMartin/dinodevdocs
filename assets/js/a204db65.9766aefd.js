"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[4491],{82962:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>m});var a=t(74848),o=t(28453),s=t(78924);const i={title:"Repeat elements",tags:["core_form","core","Forms API","Advanced"]},r=void 0,d={id:"apis/subsystems/form/advanced/repeat-elements",title:"Repeat elements",description:"The Form API includes the ability to repeat a group of form elements. This is useful where you need to have an unknown quantity of item data, for example possible answers in a quiz question.",source:"@site/docs/apis/subsystems/form/advanced/repeat-elements.md",sourceDirName:"apis/subsystems/form/advanced",slug:"/apis/subsystems/form/advanced/repeat-elements",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/advanced/repeat-elements",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/subsystems/form/advanced/repeat-elements.md",tags:[{label:"core_form",permalink:"/moodledevdocs/docs/4.4/tags/core-form"},{label:"core",permalink:"/moodledevdocs/docs/4.4/tags/core"},{label:"Forms API",permalink:"/moodledevdocs/docs/4.4/tags/forms-api"},{label:"Advanced",permalink:"/moodledevdocs/docs/4.4/tags/advanced"}],version:"current",lastUpdatedBy:"arbisoft-wkhalid",lastUpdatedAt:16848072e5,frontMatter:{title:"Repeat elements",tags:["core_form","core","Forms API","Advanced"]},sidebar:"docs",previous:{title:"No submit button",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/advanced/no-submit-button"},next:{title:"Choice Dropdown",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/fields/choicedropdown"}},l={},m=[{value:"Overview",id:"overview",level:2},{value:"Configuration",id:"configuration",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.A,{frontMatter:i,metadata:d}),"\n",(0,a.jsx)(n.p,{children:"The Form API includes the ability to repeat a group of form elements. This is useful where you need to have an unknown quantity of item data, for example possible answers in a quiz question."}),"\n",(0,a.jsxs)(n.p,{children:["This is achieved by adding a button to the form to handle the creation of the additional buttons using a page reload, and a zero-indexed array added to the ",(0,a.jsx)(n.code,{children:"elementname"})," data returned by ",(0,a.jsx)(n.code,{children:"get_data()"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(n.p,{children:"Most of the necessary information is in the phpdoc comment for the repeat_elements() method:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"/**\n * Method to add a repeating group of elements to a form.\n *\n * @param array $elementobjs Array of elements or groups of elements that are to be repeated\n * @param int $repeats no of times to repeat elements initially\n * @param array $options a nested array. The first array key is the element name.\n *    the second array key is the type of option to set, and depend on that option,\n *    the value takes different forms.\n *         'default'    - default value to set. Can include '{no}' which is replaced by the repeat number.\n *         'type'       - PARAM_* type.\n *         'helpbutton' - array containing the helpbutton params.\n *         'disabledif' - array containing the disabledIf() arguments after the element name.\n *         'rule'       - array containing the addRule arguments after the element name.\n *         'expanded'   - whether this section of the form should be expanded by default. (Name be a header element.)\n *         'advanced'   - whether this element is hidden by 'Show more ...'.\n * @param string $repeathiddenname name for hidden element storing no of repeats in this form\n * @param string $addfieldsname name for button to add more fields\n * @param int $addfieldsno how many fields to add at a time\n * @param string $addstring name of button, {no} is replaced by no of blanks that will be added.\n * @param bool $addbuttoninside if true, don't call closeHeaderBefore($addfieldsname). Default false.\n * @param string $deletebuttonname if specified, treats the no-submit button with this name as a \"delete element\" button in each of the elements.\n * @return int no of repeats of element in this page\n */\n"})}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The list of elements you wish to repeat is set in the ",(0,a.jsx)(n.code,{children:"$elementobjs"})," array, with any options passed into the ",(0,a.jsx)(n.code,{children:"$options"})," array.\nA ",(0,a.jsx)(n.code,{children:"{no}"})," placeholder can be placed into strings, such as the element label or default values, to represent the item number."]}),"\n"]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["While the elements are zero-indexed, the ",(0,a.jsx)(n.code,{children:"{no}"})," label is one-indexed."]})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The number of repeats to show initially can be configured using the ",(0,a.jsx)(n.code,{children:"$repeats"})," parameter."]}),"\n",(0,a.jsxs)(n.li,{children:["The number of elements to add when adding more options is configured using the ",(0,a.jsx)(n.code,{children:"$addfieldsno"})," parameter."]}),"\n",(0,a.jsxs)(n.li,{children:["The label used for the 'Add more' button can be set using the ",(0,a.jsx)(n.code,{children:"$addstring"})," parameter. A ",(0,a.jsx)(n.code,{children:"{no}"})," placeholder can be used in the string to indicate how many repeats will be added."]}),"\n",(0,a.jsxs)(n.li,{children:["The number of element repeats currently shown is stored in a hidden element, whose name can be specified using the ",(0,a.jsx)(n.code,{children:"$repeathiddenname"})," parameter."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["The following example shows how ",(0,a.jsx)(n.code,{children:"repeat_elements()"})," can be used within a form definition with a delete button for each repeated field :"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",metastring:'title="definition() function"',children:"$repeatarray = [\n    $mform->createElement('text', 'option', get_string('optionno', 'choice')),\n    $mform->createElement('text', 'limit', get_string('limitno', 'choice')),\n    $mform->createElement('hidden', 'optionid', 0),\n    $mform->createElement('submit', 'delete', get_string('deletestr', 'choice'), [], false),\n];\n\n\nif ($this->_instance){\n    $repeatno = $DB->count_records('choice_options', ['choiceid' => $this->_instance]);\n    $repeatno += 2;\n} else {\n    $repeatno = 5;\n}\n\n$repeateloptions = [\n    'limit' => [\n        'default' => 0,\n        'disabledif' => array('limitanswers', 'eq', 0),\n        'rule' => 'numeric',\n        'type' => PARAM_INT,\n    ],\n    'option' => [\n        'helpbutton' => [\n            'choiceoptions',\n            'choce',\n        ]\n    ]\n];\n\n$mform->setType('option', PARAM_CLEANHTML);\n$mform->setType('optionid', PARAM_INT);\n\n$this->repeat_elements(\n    $repeatarray,\n    $repeatno,\n    $repeateloptions,\n    'option_repeats',\n    'option_add_fields',\n    3,\n    null,\n    true,\n    'delete',\n);\n"})}),"\n",(0,a.jsx)(n.p,{children:"For other examples, have a look at the question type editing forms. They make extensive use of repeat_elements()."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);