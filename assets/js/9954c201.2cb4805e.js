"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[38772],{94429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var i=t(74848),a=t(28453),r=t(78924);const c={title:"Deprecation API",tags:["deprecation"]},d=void 0,s={id:"apis/core/deprecation/index",title:"Deprecation API",description:"When deprecating a code feature, it is often desirable to include a reasonable amount of information, and to provide a consistent deprecation message.",source:"@site/docs/apis/core/deprecation/index.md",sourceDirName:"apis/core/deprecation",slug:"/apis/core/deprecation/",permalink:"/moodledevdocs/docs/4.4/apis/core/deprecation/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/core/deprecation/index.md",tags:[{label:"deprecation",permalink:"/moodledevdocs/docs/4.4/tags/deprecation"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Deprecation API",tags:["deprecation"]},sidebar:"docs",previous:{title:"Custom fields API",permalink:"/moodledevdocs/docs/4.4/apis/core/customfields/"},next:{title:"Dependency Injection",permalink:"/moodledevdocs/docs/4.4/apis/core/di/"}},o={},l=[{value:"The <code>deprecated</code> attribute",id:"the-deprecated-attribute",level:2},{value:"Inspecting the attribute",id:"inspecting-the-attribute",level:2}];function p(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Since:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Since",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.A,{frontMatter:c,metadata:s}),"\n",(0,i.jsx)(t,{version:"4.4",issueNumbers:"MDL-80005"}),"\n",(0,i.jsx)(n.p,{children:"When deprecating a code feature, it is often desirable to include a reasonable amount of information, and to provide a consistent deprecation message."}),"\n",(0,i.jsx)(n.p,{children:"In some cases it is also desirable to check if a called class, or method, has been marked as deprecated."}),"\n",(0,i.jsxs)(n.p,{children:["One way to simplify this is through use of the ",(0,i.jsx)(n.code,{children:"\\core\\attribute\\deprecated"})," PHP attribute, which can be used in conjunction with the ",(0,i.jsx)(n.code,{children:"\\core\\deprecation"})," class."]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Please note that the attribute does ",(0,i.jsx)(n.em,{children:"not"})," replace the ",(0,i.jsx)(n.code,{children:"@deprecated"})," phpdoc annotation. They serve slightly different purposes."]})}),"\n",(0,i.jsx)(n.p,{children:"The attribute can be used to specify information including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"the replacement for that feature"}),"\n",(0,i.jsx)(n.li,{children:"the version that the feature was deprecated in"}),"\n",(0,i.jsx)(n.li,{children:"the relevant MDL"}),"\n",(0,i.jsx)(n.li,{children:"the reason for deprecation"}),"\n",(0,i.jsx)(n.li,{children:"whether the deprecation is final"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"the-deprecated-attribute",children:["The ",(0,i.jsx)(n.code,{children:"deprecated"})," attribute"]}),"\n",(0,i.jsx)(n.p,{children:"The attribute is a Moodle PHP Attribute and can be applied to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"classes, traits, interfaces, and enums"}),"\n",(0,i.jsx)(n.li,{children:"enum cases"}),"\n",(0,i.jsx)(n.li,{children:"global functions"}),"\n",(0,i.jsx)(n.li,{children:"class constants, properties, and methods"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Example attribute usage"',children:"// On a global function:\n#[\\core\\attribute\\deprecated('random_bytes', since: '4.3')]\nfunction random_bytes_emulate($length) {\n    // Replaced by random_bytes since Moodle 4.3.\n}\n\n// On a class:\n#[\\core\\attribute\\deprecated(replacement: null, since: '4.4', reason: 'This functionality has been removed.')]\nclass example {\n    #[\\core\\attribute\\deprecated(\n        replacement: '\\core\\example::do_something',\n        since: '4.3',\n        reason: 'No longer required',\n        mdl: 'MDL-12345',\n    )]\n    public function do_something(): void {}\n}\n\n// On an enum case:\nenum example {\n    #[\\core\\attribute\\deprecated('example::OPTION', since: '4.4', final: true)]\n    case OPTION;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"inspecting-the-attribute",children:"Inspecting the attribute"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"\\core\\deprecation"})," class contains helper methods to inspect for use of the deprecated attribute and allows usage including:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"checking if a feature is deprecated"}),"\n",(0,i.jsx)(n.li,{children:"emitting a deprecation notice if a feature is deprecated"}),"\n",(0,i.jsx)(n.li,{children:"fetching an instance of the attribute to query further"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Examples of usage"',children:"// A method which has been initially deprecated, and replaced by 'random_bytes'. It should show debugging.\n/** @deprecated since 4.3 */\n#[\\core\\attribute\\deprecated('random_bytes', since: '4.3')]\nfunction random_bytes_emulate($length) {\n    \\core\\deprecation::emit_deprecation_if_present(__FUNCTION__);\n    return random_bytes($length);\n}\n\n// A method which has been finally deprecated and should throw an exception.\n/** @deprecated since 2.7 */\n#[\\core\\attribute\\deprecated(replacement: 'Events API', since: '2.3', final: true)]\nfunction add_to_log() {\n    \\core\\deprecation::emit_deprecation_if_present(__FUNCTION__);\n}\n\n// Checking when an enum case is deprecated:\n\\core\\deprecation::is_deprecated(\\core\\param::RAW); // Returns false.\n\\core\\deprecation::is_deprecated(\\core\\param::INTEGER); // Returns true.\n\n// On an collection of items.\nforeach ($values as $value) {\n    \\core\\deprecation::emit_deprecation_if_present($value);\n    $value->do_things();\n}\n\n// Checking if a class is deprecated:\n\\core\\deprecation::is_deprecated(\\core\\task\\manager::class); // Returns false.\n\n// Checking if an instantiated class is deprecated:\n\\core\\deprecation::is_deprecated(new \\moodle_url('/example/'));\n\n// Checking if a class method is deprecated:\n\\core\\deprecation::is_deprecated([\\moodle_url::class, 'out']);\n\\core\\deprecation::is_deprecated([new \\moodle_url('/example/'), 'out']);\n"})}),"\n",(0,i.jsx)(n.p,{children:"This functionality is intended to simplify deprecation of features such as constants, enums, and related items which are called from centralised APIs and difficult to detect as deprecated."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);