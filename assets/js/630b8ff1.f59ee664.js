"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[27061],{48881:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=s(74848),i=s(28453),o=s(78924);const a={title:"Moodle App Coding style",description:"The Moodle App Coding Style guidelines",tags:["Moodle App","Policies","Coding guidelines","Developer processes"]},l=void 0,r={id:"development/policies/codingstyle-moodleapp",title:"Moodle App Coding style",description:"The Moodle App Coding Style guidelines",source:"@site/general/development/policies/codingstyle-moodleapp.md",sourceDirName:"development/policies",slug:"/development/policies/codingstyle-moodleapp",permalink:"/moodledevdocs/general/development/policies/codingstyle-moodleapp",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/general/development/policies/codingstyle-moodleapp.md",tags:[{label:"Moodle App",permalink:"/moodledevdocs/general/tags/moodle-app"},{label:"Policies",permalink:"/moodledevdocs/general/tags/policies"},{label:"Coding guidelines",permalink:"/moodledevdocs/general/tags/coding-guidelines"},{label:"Developer processes",permalink:"/moodledevdocs/general/tags/developer-processes"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Moodle App Coding style",description:"The Moodle App Coding Style guidelines",tags:["Moodle App","Policies","Coding guidelines","Developer processes"]},sidebar:"coding",previous:{title:"SQL coding style",permalink:"/moodledevdocs/general/development/policies/codingstyle/sql"},next:{title:"Component Communication",permalink:"/moodledevdocs/general/development/policies/component-communication/"}},d={},c=[{value:"Goals",id:"goals",level:2},{value:"TypeScript",id:"typescript",level:2},{value:"Disabling ESLint rules",id:"disabling-eslint-rules",level:3},{value:"Using async / await",id:"using-async--await",level:3},{value:"If guards",id:"if-guards",level:3},{value:"Avoid abusing user-defined type guards",id:"avoid-abusing-user-defined-type-guards",level:3},{value:"Spread operator",id:"spread-operator",level:3},{value:"String interpolation",id:"string-interpolation",level:3},{value:"Avoid declaring variables using commas",id:"avoid-declaring-variables-using-commas",level:3},{value:"Avoiding having too many optional arguments",id:"avoiding-having-too-many-optional-arguments",level:3},{value:"Using declaration files",id:"using-declaration-files",level:3},{value:"Using constants",id:"using-constants",level:3},{value:"Angular",id:"angular",level:2},{value:"Avoid calling methods in templates",id:"avoid-calling-methods-in-templates",level:3},{value:"A warning about using getters",id:"a-warning-about-using-getters",level:4},{value:"Maximise the number of attributes per line",id:"maximise-the-number-of-attributes-per-line",level:3},{value:"Avoid default exports",id:"avoid-default-exports",level:3},{value:"Declaring page modules",id:"declaring-page-modules",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{CodeExample:s,InvalidExample:l,ValidExample:d}=n;return s||p("CodeExample",!0),l||p("InvalidExample",!0),d||p("ValidExample",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.A,{frontMatter:a,metadata:r}),"\n",(0,t.jsxs)(n.p,{children:["This document outlines the exceptions to the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/general/development/policies/codingstyle/",children:"Coding style"})," and ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/JavaScript_Coding_Style",children:"JavaScript Coding Style"})," which apply to the Moodle App and also includes rules for other technologies that are used in the app, like Typescript and Angular."]}),"\n",(0,t.jsx)(n.p,{children:"Unless otherwise specified, developers should follow the indications included on those documents."}),"\n",(0,t.jsxs)(n.p,{children:["Most rules are enforced with ",(0,t.jsx)(n.a,{href:"https://github.com/typescript-eslint/typescript-eslint",children:"ESLint"})," and won't be mentioned in this document, make sure to integrate a linter in your development environment."]}),"\n",(0,t.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,t.jsx)(n.p,{children:"Consistent coding style is important in any development project, and particularly when many developers are involved. A standard style helps to ensure that the code is easier to read and understand, which helps overall quality."}),"\n",(0,t.jsx)(n.p,{children:"Abstract goals we strive for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"simplicity"}),"\n",(0,t.jsx)(n.li,{children:"readability"}),"\n",(0,t.jsx)(n.li,{children:"tool friendliness"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Note that much of the existing code may not follow all of these guidelines \u2014 we continue to upgrade this code when we see it."}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsx)(n.h3,{id:"disabling-eslint-rules",children:"Disabling ESLint rules"}),"\n",(0,t.jsxs)(n.p,{children:["In some situations, it may be necessary to ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/user-guide/configuring/rules#disabling-rules",children:"disable ESLint rules using inline comments"}),". Although this is discouraged, it is allowed on certain use-cases."]}),"\n",(0,t.jsx)(n.p,{children:"Most of the time, however, this could be solved by refactoring code. So think twice before disabling a rule."}),"\n",(0,t.jsx)(n.p,{children:"Warnings should be treated with the same severity as errors, even if they are allowed by the linter. The reasoning behind this is that warnings are useful when new rules are introduced that affect existing code, but new code should always conform to the rules or explicitly disable them."}),"\n",(0,t.jsx)(n.h3,{id:"using-async--await",children:"Using async / await"}),"\n",(0,t.jsx)(n.p,{children:"Using async/await is encouraged, but it shouldn't be mixed with .then/.catch/.finally. Using both can make code difficult to understand. As a rule of thumb, there should only be one style in a given function."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"async function greet() {\n    const response = await fetch('/profile.json');\n    const data = await response.json();\n\n    alert(`Hello, ${data.name}!`);\n}\n"})})}),"\n",(0,t.jsx)(s,{type:"warning",title:"Allowed, but discouraged",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function greet() {\n    return fetch('/profile.json')\n        .then(response => response.json())\n        .then(data => {\n            alert(`Hello, ${data.name}!`);\n        });\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"async function greet() {\n    const response = await fetch('/profile.json');\n\n    return response.json().then(data => {\n        alert(`Hello, ${data.name}!`);\n    });\n}\n"})})}),"\n",(0,t.jsxs)(n.p,{children:["Async/await is ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Syntactic_sugar",children:"syntactic sugar"})," for Promises, so it should always be possible to avoid using .then/.catch/.finally."]}),"\n",(0,t.jsx)(n.p,{children:"To prevent making asynchronous operations difficult to spot, using await should be limited to simple statements such as one liners, assignments and if guards with a single condition."}),"\n",(0,t.jsx)(n.h3,{id:"if-guards",children:"If guards"}),"\n",(0,t.jsx)(n.p,{children:"Using if guards is encouraged to reduce indentation levels. They should handle edge cases and leave the main indentation level for normal code."}),"\n",(0,t.jsx)(n.p,{children:"More concretely, when an if block contains a non-conditional ending statement, it should not chain other blocks."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getPrivateInfo() {\n    if (!this.isLoggedIn()) {\n        throw new Error('Please, log in!');\n    }\n\n    return this.privateInfo;\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"getPrivateInfo() {\n    if (!this.isLoggedIn()) {\n        throw new Error('Please, log in!');\n    } else {\n        return this.privateInfo;\n    }\n}\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"avoid-abusing-user-defined-type-guards",children:"Avoid abusing user-defined type guards"}),"\n",(0,t.jsx)(n.p,{children:"User-defined type guards are an advanced TypeScript feature that can be very useful for working in heavily typed applications. However, they can also be confusing for newcomers, so they should only be used when they are really necessary."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function hasSecret(user: User): user is { secret: string } {\n    return 'secret' in user;\n}\n\nfunction getSecret(user: User) {\n    if (!hasSecret(user)) {\n        throw new Error(\"This user doesn't have a secret\");\n    }\n\n    return user.secret;\n}\n"})})}),"\n",(0,t.jsx)(n.p,{children:"An alternative to defining type guards is to use built-in operations to perform type checks. For example, the following code would also take advantage of TypeScript inference:"}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface User {\n    secret: string;\n}\n\ninterface Post {\n    title: string;\n}\n\nfunction getSecret(object: User | Post) {\n    if ('secret' in object) {\n        throw new Error(\"This object doesn't have a secret\");\n    }\n\n    return object.secret;\n}\n"})})}),"\n",(0,t.jsx)(n.p,{children:"In some situations, the only solution is to use type assertions. Although this approach is simpler to understand and more straightforward, it is dangerous because we lose inference checks:"}),"\n",(0,t.jsx)(s,{type:"warning",title:"Allowed, but discouraged",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function hasSecret(user: User): boolean {\n    return 'secret' in user;\n}\n\nfunction getSecret(user: User) {\n    if (!hasSecret(user)) {\n        throw new Error(\"This user doesn't have a secret\");\n    }\n\n    const userWithSecret = user as { secret: string };\n\n    return userWithSecret.secret;\n}\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator",children:"Spread operator"}),"\n",(0,t.jsx)(n.p,{children:"The spread operator is allowed, but it's recommended to include a comment explaining what it is doing to make the code easier to understand. You can also replace it for simpler alternatives."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const numbers = [4, 5, 6];\nconst properties = { surname: 'Doe' };\n\nconsole.log([1, 2, 3].concat(numbers));\nconsole.log(Object.assign({ name: 'Mary' }, properties));\nconsole.log(Math.max.apply(Math, numbers));\n"})})}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const numbers = [4, 5, 6];\nconst properties = { surname: 'Doe' };\n\nconsole.log([1, 2, 3, ...numbers]); // Concatenate numbers.\n// Create a new object including all properties and a new one.\nconsole.log({ name: 'Mary', ...properties });\nconsole.log(Math.max(...numbers)); // Find max number in array.\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"string-interpolation",children:"String interpolation"}),"\n",(0,t.jsx)(n.p,{children:"It is encouraged to use string interpolation using backticks if it makes the code more readable."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function greet(name: string) {\n   alert(`Hello, ${name}!`);\n}\n"})})}),"\n",(0,t.jsx)(s,{type:"warning",title:"Allowed, but discouraged",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function greet(name: string) {\n    alert('Hello, ' + name + '!');\n}\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"avoid-declaring-variables-using-commas",children:"Avoid declaring variables using commas"}),"\n",(0,t.jsx)(n.p,{children:"In order to have cleaner diffs, it is not allowed to declare variables using commas. This also results in a better alignment of variable names, making the code more readable."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const foo = 'foo';\nconst bar = 'bar';\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const foo = 'foo',\n      bar = 'bar';\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"avoiding-having-too-many-optional-arguments",children:"Avoiding having too many optional arguments"}),"\n",(0,t.jsx)(n.p,{children:"In some situations, functions end up having a lot of optional arguments and this results in unreadable code and a cumbersome developer experience (having to pass multiple null or undefined values)."}),"\n",(0,t.jsx)(n.p,{children:"When these situations arise, a good approach to solve it is using an options object instead."}),"\n",(0,t.jsx)(n.p,{children:"As a rule of thumb, when a method has more than two optional arguments that are not required to be used together, use an options object (better naming can be used for each particular scenario)."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface HelloOptions {\n    surname?: string;\n    emphasis?: string;\n    times?: number;\n}\n\nfunction sayHello(name: string, { surname, emphasis, times }: HelloOptions) {\n    surname = surname ?? '';\n    emphasis = emphasis ?? '!';\n    times = times ?? 1;\n\n    const fullname = `${name} ${surname}`.trim();\n\n    for (let i = 0; i < times; i++) {\n        console.log(`Hello ${fullname}${emphasis}`);\n    }\n}\n\nsayHello('World', { times: 3 });\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function sayHello(\n    name: string,\n    surname: string = '',\n    emphasis: string = '!',\n    times: number = 1,\n) {\n    const fullname = `${name} ${surname}`.trim();\n\n    for (let i = 0; i < times; i++) {\n        console.log(`Hello ${fullname}${emphasis}`);\n    }\n}\n\nsayHello('World', undefined, undefined, 3);\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"using-declaration-files",children:"Using declaration files"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html",children:"Declaration files"})," can be very useful in TypeScript and it is encouraged to use them when appropriate. But it's not recommended to abuse them either, here's some situations when it may be a good idea to use them:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Declaring types for external dependencies \u2014 Libraries that don't include their own declarations and are missing from ",(0,t.jsx)(n.a,{href:"https://github.com/DefinitelyTyped/DefinitelyTyped",children:"DefinitelyTyped"})," (the packages you find under ",(0,t.jsx)(n.code,{children:"@types/"})," in npm)."]}),"\n",(0,t.jsxs)(n.li,{children:["Global declarations and extensions \u2014 Any variable you add to the window object can be declared by extending the ",(0,t.jsx)(n.code,{children:"Window"})," interface. The same idea applies for extending external dependencies."]}),"\n",(0,t.jsx)(n.li,{children:"Local declarations \u2014 Sometimes, it may be useful to create a dedicated declaration file when source files are growing too large. But this technique should not be used to substitute proper code organisation."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-constants",children:"Using constants"}),"\n",(0,t.jsxs)(n.p,{children:["In order to optimize ",(0,t.jsx)(n.a,{href:"https://webpack.js.org/guides/code-splitting/",children:"Code Splitting"}),", constants that are exported should be declared in ",(0,t.jsx)(n.a,{href:"/moodledevdocs/general/app/development/development-guide#constants-files",children:"a constants file"}),":"]}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// src/core/features/my-feature/constants.ts\nexport const MY_SERVICE_NAME = '...';\n\n// src/core/features/my-feature/services/my-service.ts\nimport { MY_SERVICE_NAME } from '../constants';\n\nexport class MyService implements NamedService {\n\n    name = MY_SERVICE_NAME;\n\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// src/core/features/my-feature/services/my-service.ts\nexport class MyService implements NamedService {\n\n    public static readonly MY_SERVICE_NAME = '...';\n\n    name = MyService.MY_SERVICE_NAME;\n\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// src/core/features/my-feature/services/my-service.ts\nexport const MY_SERVICE_NAME = '...';\n\nexport class MyService implements NamedService {\n\n    name = MY_SERVICE_NAME;\n\n}\n"})})}),"\n",(0,t.jsxs)(n.p,{children:["In contrast, constants that are private or protected should be declared as static readonly class properties. Also, avoid calling them using ",(0,t.jsx)(n.code,{children:"this.CONSTANT"})," form (given that they are static members):"]}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export class MyService {\n\n    protected static readonly MY_CONSTANT = '...';\n\n    public someMethod(): void {\n        alert(MyService.MY_CONSTANT);\n    }\n\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const MY_CONSTANT = '...';\n\nexport class MyService {\n\n    public someMethod(): void {\n        alert(MY_CONSTANT);\n    }\n\n}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"export class MyService {\n\n    protected static readonly MY_CONSTANT = '...';\n\n    public someMethod(): void {\n        alert(this.MY_CONSTANT);\n    }\n\n}\n"})})}),"\n",(0,t.jsx)(n.h2,{id:"angular",children:"Angular"}),"\n",(0,t.jsx)(n.h3,{id:"avoid-calling-methods-in-templates",children:"Avoid calling methods in templates"}),"\n",(0,t.jsxs)(n.p,{children:["Method calls should be avoided in template rendering, this includes structural directives such as ",(0,t.jsx)(n.code,{children:"ngIf"})," or ",(0,t.jsx)(n.code,{children:"ngFor"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Angular templates can be rendered very often, and calling methods on every render could cause some unintended performance issues. For that reason, it is usually safer to rely on values rather than methods."}),"\n",(0,t.jsx)(n.p,{children:"In some situations, a simple method that only returns a value would be acceptable, but it opens the door to become an issue if the method is refactored to do something more complicated. That's why it is discouraged to use methods altogether."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div *ngIf="isAdmin">\n    \x3c!-- Show admin content --\x3e\n</div>\n'})})}),"\n",(0,t.jsx)(s,{type:"warning",title:"Allowed, but discouraged",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<div *ngIf="site.isAdmin()">\n    \x3c!-- Show admin content --\x3e\n</div>\n'})})}),"\n",(0,t.jsx)(n.p,{children:"Of course, this doesn't mean that you can't use any methods on a template. Not every method used on a template is called in every render."}),"\n",(0,t.jsx)(n.p,{children:"For example, using methods in event handlers is fine:"}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<button (click)="login()">\n    Login\n</button>\n'})})}),"\n",(0,t.jsx)(n.h4,{id:"a-warning-about-using-getters",children:"A warning about using getters"}),"\n",(0,t.jsxs)(n.p,{children:["Other frameworks have patterns to solve this problem, for example Vue has ",(0,t.jsx)(n.a,{href:"https://vuejs.org/guide/essentials/computed.html#computed-properties",children:"Computed Properties"})," and React has the ",(0,t.jsx)(n.a,{href:"https://reactjs.org/docs/hooks-reference.html#usememo",children:"useMemo hook"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"However, Angular doesn't include a built-in pattern for these situations, so these properties should be managed as part of the logic for the component."}),"\n",(0,t.jsx)(n.p,{children:"Be careful when using getters, which may give the wrong impression that a method is not being called:"}),"\n",(0,t.jsx)(s,{type:"warning",title:"Allowed, but discouraged",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:"get isAdmin(): boolean {\n    return this.site.isAdmin();\n}\n"})})}),"\n",(0,t.jsx)(n.p,{children:"Even if this looks like using a property in the template, it is still calling a method in every render."}),"\n",(0,t.jsx)(n.h3,{id:"maximise-the-number-of-attributes-per-line",children:"Maximise the number of attributes per line"}),"\n",(0,t.jsx)(n.p,{children:"There is a maximum line length of 140 characters for templates. Whenever that length is surpassed, the attributes should be distributed in multiple lines trying to reduce the number of total lines, instead of dedicating one line per attribute."}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<ion-item\n    *ngFor="let course of courses" [title]="course.title"\n    [class.selected]="isSelected(course)" class="ion-text-wrap"\n    button detail="true"\n    (click)="selectCourse(course)">\n    <ion-label>\n        {{ course.title }}\n    </ion-label>\n</ion-item>\n'})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-html",children:'<ion-item\n    *ngFor="let course of courses"\n    [title]="course.title"\n    [class.selected]="isSelected(course)"\n    class="ion-text-wrap"\n    button\n    detail="true"\n    (click)="selectCourse(course)">\n    <ion-label>\n        {{ course.title }}\n    </ion-label>\n</ion-item>\n'})})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If you are using VSCode, this should be done automatically on every save with the ",(0,t.jsx)(n.a,{href:"https://github.com/moodlehq/moodleapp/blob/latest/.vscode/settings.json#L8",children:"configuration that ships with the app"}),"."]})}),"\n",(0,t.jsx)(n.h3,{id:"avoid-default-exports",children:"Avoid default exports"}),"\n",(0,t.jsxs)(n.p,{children:["Using default exports should be avoided for Angular applications because they ",(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/45962317/why-isnt-export-default-recommended-in-angular",children:"cause issues with AOT compiler"}),". Technically only components have this problem, but in order to avoid the mental load of thinking about this every time, we disallow it altogether."]}),"\n",(0,t.jsx)(d,{title:"Good",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@Component({\n    selector: 'my-component',\n    templateUrl: 'my-component.html',\n})\nexport class MyComponent {}\n"})})}),"\n",(0,t.jsx)(l,{title:"Bad",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"@Component({\n    selector: 'my-component',\n    templateUrl: 'my-component.html',\n})\nexport default class MyComponent {}\n"})})}),"\n",(0,t.jsx)(n.h3,{id:"declaring-page-modules",children:"Declaring page modules"}),"\n",(0,t.jsxs)(n.p,{children:["When creating a page component, it should be declared in the feature's ",(0,t.jsx)(n.a,{href:"/moodledevdocs/general/app/development/development-guide#routing",children:"lazy modules"}),". Exceptionally, pages that are used by more than one module can create a page module; but this module should only declare components, it shouldn't include any routing functionality."]}),"\n",(0,t.jsxs)(d,{title:"Good",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/pages/index/index.ts\n@Component({\n    selector: 'page-core-feature-index',\n    templateUrl: 'index.html',\n})\nexport class CoreFeatureIndexPageComponent {}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/feature-lazy.module.ts\nconst routes: Routes = [\n    {\n        path: 'feature',\n        component: CoreFeatureIndexPageComponent,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreFeatureIndexPageComponent,\n    ],\n})\nexport class CoreFeatureLazyModule {}\n"})})]}),"\n",(0,t.jsxs)(s,{type:"warning",title:"Allowed only if the page is used in multiple modules",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/pages/index/index.page.ts\n@Component({\n    selector: 'page-core-feature-index',\n    templateUrl: 'index.html',\n})\nexport class CoreFeatureIndexPageComponent {}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/pages/index/index.module.ts\n@NgModule({\n    imports: [\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreFeatureIndexPageComponent,\n    ],\n})\nexport class CoreFeatureIndexPageModule {}\n"})})]}),"\n",(0,t.jsxs)(l,{title:"Bad",children:[(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/pages/index/index.page.ts\n@Component({\n    selector: 'page-core-feature-index',\n    templateUrl: 'index.html',\n})\nexport class CoreFeatureIndexPageComponent {}\n"})}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"// file: core/features/feature/pages/index/index.module.ts\nconst routes: Routes = [\n    {\n        path: '',\n        component: CoreFeatureIndexPageComponent,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreFeatureIndexPageComponent,\n    ],\n})\nexport class CoreFeatureIndexPageModule {}\n"})})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}function p(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);