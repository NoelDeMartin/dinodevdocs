"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[13291],{17246:(i,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>r});var o=n(74848),t=n(28453),a=n(78924);const l={title:"Conditional activities API",tags:[],documentationDraft:!0},d=void 0,s={id:"apis/core/conditionalactivities/index",title:"Conditional activities API",description:"The Conditional Activities API allowsyou to specify whether to hide, or show, an activity when a series of conditions associated with it are met.",source:"@site/versioned_docs/version-4.2/apis/core/conditionalactivities/index.md",sourceDirName:"apis/core/conditionalactivities",slug:"/apis/core/conditionalactivities/",permalink:"/moodledevdocs/docs/4.2/apis/core/conditionalactivities/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.2/apis/core/conditionalactivities/index.md",tags:[],version:"4.2",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:168325581e4,frontMatter:{title:"Conditional activities API",tags:[],documentationDraft:!0},sidebar:"docs",previous:{title:"Calendar API",permalink:"/moodledevdocs/docs/4.2/apis/core/calendar/"},next:{title:"Data manipulation API",permalink:"/moodledevdocs/docs/4.2/apis/core/dml/"}},c={},r=[{value:"Files",id:"files",level:2},{value:"Functions and Examples",id:"functions-and-examples",level:2},{value:"Fetching information related to conditions",id:"fetching-information-related-to-conditions",level:3},{value:"get_full_course_module()",id:"get_full_course_module",level:4},{value:"get_full_information()",id:"get_full_information",level:4},{value:"is_available()",id:"is_available",level:4},{value:"show_availability()",id:"show_availability",level:4},{value:"Adding/Updating conditional clauses to activities",id:"addingupdating-conditional-clauses-to-activities",level:3},{value:"fill_availability_conditions()",id:"fill_availability_conditions",level:4},{value:"add_completion_condition()",id:"add_completion_condition",level:4},{value:"add_grade_condition()",id:"add_grade_condition",level:4},{value:"update_cm_from_form()",id:"update_cm_from_form",level:4},{value:"Deleting conditions attached to activities",id:"deleting-conditions-attached-to-activities",level:3},{value:"See Also",id:"see-also",level:2},{value:"User documentation",id:"user-documentation",level:3}];function m(i){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...i.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.A,{frontMatter:l,metadata:s}),"\n",(0,o.jsx)(e.p,{children:"The Conditional Activities API allowsyou to specify whether to hide, or show, an activity when a series of conditions associated with it are met."}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsxs)(e.p,{children:["This should not be confused with the ",(0,o.jsx)(e.a,{href:"/moodledevdocs/docs/4.2/apis/core/activitycompletion/",children:"completion API"})," which is used to mark if an activity is completed or not. The Conditional Activities API is used to handle the ",(0,o.jsx)(e.em,{children:"availability"})," of an activity, whilst the Completion API helps to track the ",(0,o.jsx)(e.em,{children:"progress"})," of student in an activity."]})}),"\n",(0,o.jsx)(e.h2,{id:"files",children:"Files"}),"\n",(0,o.jsxs)(e.p,{children:["The main file containing all key functions is located at ",(0,o.jsx)(e.code,{children:"lib/conditionlib.php"}),".."]}),"\n",(0,o.jsx)(e.h2,{id:"functions-and-examples",children:"Functions and Examples"}),"\n",(0,o.jsxs)(e.p,{children:["The class ",(0,o.jsx)(e.code,{children:"condition_info"})," defined in ",(0,o.jsx)(e.code,{children:"lib/conditionlib.php"})," is the main conditional API in Moodle. Following are some important methods of the above mentioned class."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"fill_availability_conditions($cm)\nget_full_course_module()\nadd_completion_condition($cmid, $requiredcompletion)\nadd_grade_condition($gradeitemid, $min, $max, $updateinmemory = false)\nwipe_conditions()\nget_full_information($modinfo = null)\nis_available($information, $grabthelot = false, $userid = 0, $modinfo = null)\nshow_availability()\nupdate_cm_from_form($cm, $fromform, $wipefirst=true)\n"})}),"\n",(0,o.jsx)(e.p,{children:"The basic functionality of these methods can be classified as:-"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:"Fetching information related to conditions"}),"\n",(0,o.jsx)(e.li,{children:"Adding/Updating conditional clauses to activities"}),"\n",(0,o.jsx)(e.li,{children:"Deleting conditions attached to activities"}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"fetching-information-related-to-conditions",children:"Fetching information related to conditions"}),"\n",(0,o.jsx)(e.p,{children:"The following functions are normally used to fetch information regarding conditions associated with activities:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"get_full_course_module();\nget_full_information($modinfo=null);\nis_available($information, $grabthelot = false, $userid = 0, $modinfo = null);\nshow_availability();\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get_full_course_module",children:"get_full_course_module()"}),"\n",(0,o.jsx)(e.p,{children:"This method can fetches and returns all necessary information as a course module object which are required to determine the availability conditions."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$cm->id = $id;\n$test = new condition_info($cm, CONDITION_MISSING_EVERYTHING);\n$fullcm = $test->get_full_course_module();\n"})}),"\n",(0,o.jsx)(e.h4,{id:"get_full_information",children:"get_full_information()"}),"\n",(0,o.jsx)(e.p,{children:"This function returns a string which describes the various conditions in place for the activity in the given context.Some possible outputs can be:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:" a) From 13:05 on 14 Oct until 12:10 on 17 Oct (exact, exact)\n b) From 14 Oct until 12:11 on 17 Oct (midnight, exact)\n c) From 13:05 on 14 Oct until 17 Oct (exact, midnight 18 Oct)\n"})}),"\n",(0,o.jsx)(e.p,{children:"Please refer to the inline documentation in the code for detailed explanation of the logic and all possible cases."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$ci = new condition_info($mod);\n$fullinfo = $ci->get_full_information();\n"})}),"\n",(0,o.jsx)(e.h4,{id:"is_available",children:"is_available()"}),"\n",(0,o.jsxs)(e.p,{children:['This function is used to check if a given course module is currently available or not. A thing worth noting is that this doesn\'t take "visibility settings" and ',(0,o.jsx)(e.code,{children:"viewhiddenactivities"})," capability into account. That is these settings should be properly checked after the result of is_available(), before dumping any data to the user."]}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$ci = new condition_info((object) ['id' => $cmid], CONDITION_MISSING_EVERYTHING);\n$bool = $ci->is_available($text, false, 0);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"show_availability",children:"show_availability()"}),"\n",(0,o.jsx)(e.p,{children:"This function is used to check if information regarding availability of the current module should be shown to the user or not."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$ci = new condition_info((object) ['id' => $cmid], CONDITION_MISSING_EVERYTHING);\n$bool = $ci->show_availability();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"addingupdating-conditional-clauses-to-activities",children:"Adding/Updating conditional clauses to activities"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"fill_availability_conditions($cm);\nadd_completion_condition($cmid, $requiredcompletion);\nadd_grade_condition($gradeitemid, $min, $max, $updateinmemory = false);\nupdate_cm_from_form($cm, $fromform, $wipefirst = true)\n"})}),"\n",(0,o.jsx)(e.h4,{id:"fill_availability_conditions",children:"fill_availability_conditions()"}),"\n",(0,o.jsx)(e.p,{children:"This function adds any extra availability conditions to given course module object."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:'$rawmods = get_course_mods($courseid);\nif (empty($rawmods)) {\n    die;\n}\nif ($sections = $DB->get_records("course_sections", ["course" => $courseid], "section ASC")) {\n    foreach ($sections as $section) {\n        if (!empty($section->sequence)) {\n            $sequence = explode(",", $section->sequence);\n                foreach ($sequence as $seq) {\n                    if (empty($rawmods[$seq])) {\n                        continue;\n                    }\n                    if (!empty($CFG->enableavailability)) {\n                         condition_info::fill_availability_conditions($rawmods[$seq]);\n                         // Do something.\n                    }\n                }\n            }\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"add_completion_condition",children:"add_completion_condition()"}),"\n",(0,o.jsx)(e.p,{children:"In Moodle availability condition of a Module or activity can depend on another activity. For example activity B will not be unlocked until activity A is successfully completed. To add such inter-dependent conditions, this function is used."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$test1 = new condition_info((object) ['id' => $cmid], CONDITION_MISSING_EVERYTHING);\n$test1->add_completion_condition(13, 3);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"add_grade_condition",children:"add_grade_condition()"}),"\n",(0,o.jsx)(e.p,{children:"This function is used to add a grade related restriction to an activity based on the grade secured in another activity. In the following example a minimum grade of 0.4 is required on gradeitem 666 to unlock the current activity in context."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$test1 = new condition_info((object) ['id' => $cmid], CONDITION_MISSING_EVERYTHING);\n$test1->add_grade_condition(666, 0.4, null, true);\n"})}),"\n",(0,o.jsx)(e.h4,{id:"update_cm_from_form",children:"update_cm_from_form()"}),"\n",(0,o.jsx)(e.p,{children:"This function is used to update availability conditions from a user submitted form."}),"\n",(0,o.jsx)(e.p,{children:"Example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$fromform = $mform->get_data();\nif (!empty($fromform->update)) {\n    if (!empty($course->groupmodeforce) or !isset($fromform->groupmode)) {\n        $fromform->groupmode = $cm->groupmode; // Keep the original.\n    }\n\n    // update course module first\n    $cm->groupmode        = $fromform->groupmode;\n    $cm->groupingid       = $fromform->groupingid;\n    $cm->groupmembersonly = $fromform->groupmembersonly;\n\n    $completion = new completion_info($course);\n    if ($completion->is_enabled()) {\n        // Update completion settings.\n        $cm->completion                = $fromform->completion;\n        $cm->completiongradeitemnumber = $fromform->completiongradeitemnumber;\n        $cm->completionview            = $fromform->completionview;\n        $cm->completionexpected        = $fromform->completionexpected;\n    }\n    if (!empty($CFG->enableavailability)) {\n        $cm->availablefrom             = $fromform->availablefrom;\n        $cm->availableuntil            = $fromform->availableuntil;\n        $cm->showavailability          = $fromform->showavailability;\n        condition_info::update_cm_from_form($cm,$fromform,true);\n    }\n    // Do something else with the data.\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"deleting-conditions-attached-to-activities",children:"Deleting conditions attached to activities"}),"\n",(0,o.jsx)(e.p,{children:"we have a simple function wipe_conditions() that can erase all conditions associated with the current activity.\nconsider an example:-"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-php",children:"$ci = new condition_info($cm, CONDITION_MISSING_EVERYTHING, false);\n$ci->wipe_conditions();\n"})}),"\n",(0,o.jsx)(e.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://docs.moodle.org/dev/Conditional_activities_Adding_module_support",children:"Conditional activities Adding module support"})}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"https://docs.moodle.org/dev/Conditional_activities",children:"Conditional activities"})," - original specification for this feature."]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"user-documentation",children:"User documentation"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.a,{href:"/moodledevdocs/docs/4.2/apis/plugintypes/availability/",children:"How to make a new availability condition plugin"}),"."]}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://docs.moodle.org/en/Conditional_activities",children:"Conditional Activities"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://docs.moodle.org/en/Conditional_activities_settings",children:"Conditional Activities Settings"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"https://docs.moodle.org/en/Using_Conditional_activities",children:"Using Conditional Activities"})}),"\n"]})]})}function h(i={}){const{wrapper:e}={...(0,t.R)(),...i.components};return e?(0,o.jsx)(e,{...i,children:(0,o.jsx)(m,{...i})}):m(i)}}}]);