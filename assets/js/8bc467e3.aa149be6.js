"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[73669],{22957:(e,n,i)=>{i.d(n,{A:()=>u});i(96540);var s=i(44744),t=i(65285),r=i(1489),o=i(8193),l=i(28453),a=i(74848);const d=function(e,n,i){return void 0===i&&(i="info"),(0,a.jsx)(r.Ay,{item:!0,children:(0,a.jsx)(t.A,{title:n,children:(0,a.jsx)(s.A,{label:e,color:i})})},e)};function c(e){const{example:n,open:i=!1}=e;return n?(0,a.jsx)(r.Ay,{item:!0,xs:12,children:(0,a.jsx)(o.A,{summary:(0,a.jsx)("summary",{children:"View example"}),open:i,children:n})}):null}function u(e){const{filepath:n,summary:i}=e,s=function(e){let{required:n=!1,legacy:i=!1,deprecated:s=!1,refreshedDuringUpgrade:t=!1,refreshedDuringPurge:r=!1}=e;const o=[];return t&&o.push(d("Upgradable","Changes to this file or directory will be re-applied during a Moodle upgrade. If you make any changes to it, you can simply increment the version number and perform a Moodle upgrade.","info")),r&&o.push(d("Refreshed on cache purge","The contents of this file or directory are cached. To see your changes you can simply purge Moodle's caches and refresh the page.","info")),n&&o.push(d("Required","This file must be present","success")),i&&o.push(d("Legacy","Use of this file is being phased out. It is still supported for older installations but will be removed..","warning")),s&&o.push(d("Deprecated","Use of this file is deprecated and not recommended.It may still be provided for older versions of Moodle but is no longer used.","error")),o}(e),t=e.description?(0,a.jsx)(r.Ay,{item:!0,xs:12,children:e.description}):null;return(0,a.jsx)(l.x,{children:(0,a.jsxs)(r.Ay,{container:!0,spacing:2,children:[(0,a.jsx)(r.Ay,{item:!0,xs:6,children:(0,a.jsx)("h4",{children:i})}),(0,a.jsx)(r.Ay,{item:!0,xs:6,children:(0,a.jsx)(r.Ay,{container:!0,spacing:2,justifyContent:"flex-end",children:s})}),(0,a.jsx)(r.Ay,{item:!0,xs:12,children:(0,a.jsxs)("h5",{children:["File path:"," ",n]})}),t,c(e)]})})}},37019:(e,n,i)=>{i.d(n,{rI:()=>u});i(96540);var s=i(47945);const t=JSON.parse('{"plugintypes":{"antivirus":"lib/antivirus","availability":"availability/condition","qtype":"question/type","mod":"mod","auth":"auth","calendartype":"calendar/type","communication":"communication/provider","customfield":"customfield/field","enrol":"enrol","message":"message/output","block":"blocks","media":"media/player","filter":"filter","editor":"lib/editor","format":"course/format","dataformat":"dataformat","profilefield":"user/profile/field","report":"report","coursereport":"course/report","gradeexport":"grade/export","gradeimport":"grade/import","gradereport":"grade/report","gradingform":"grade/grading/form","mlbackend":"lib/mlbackend","mnetservice":"mnet/service","webservice":"webservice","repository":"repository","portfolio":"portfolio","search":"search/engine","qbank":"question/bank","qbehaviour":"question/behaviour","qformat":"question/format","plagiarism":"plagiarism","tool":"admin/tool","cachestore":"cache/stores","cachelock":"cache/locks","fileconverter":"files/converter","contenttype":"contentbank/contenttype","theme":"theme","local":"local","h5plib":"h5p/h5plib","paygw":"payment/gateway"},"subsystems":{"access":null,"admin":"admin","adminpresets":"admin/presets","analytics":"analytics","antivirus":"lib/antivirus","auth":"auth","availability":"availability","backup":"backup/util/ui","badges":"badges","block":"blocks","blog":"blog","bulkusers":null,"cache":"cache","calendar":"calendar","cohort":"cohort","comment":"comment","communication":"communication","competency":"competency","completion":"completion","contentbank":"contentbank","countries":null,"course":"course","courseformat":"course/format","currencies":null,"customfield":"customfield","dbtransfer":null,"debug":null,"editor":"lib/editor","edufields":null,"enrol":"enrol","error":null,"external":"lib/external","favourites":"favourites","filepicker":null,"fileconverter":"files/converter","files":"files","filters":"filter","form":"lib/form","grades":"grade","grading":"grade/grading","group":"group","help":null,"hub":null,"h5p":"h5p","imscc":null,"install":null,"iso6392":null,"langconfig":null,"license":null,"mathslib":null,"media":"media","message":"message","mimetypes":null,"mnet":"mnet","my":"my","notes":"notes","pagetype":null,"payment":"payment","pix":null,"plagiarism":"plagiarism","plugin":null,"portfolio":"portfolio","privacy":"privacy","question":"question","rating":"rating","reportbuilder":"reportbuilder","repository":"repository","rss":"rss","role":"admin/roles","search":"search","table":"lib/table","tag":"tag","timezones":null,"user":"user","userkey":"lib/userkey","webservice":"webservice","xapi":"lib/xapi"}}');var r=i(74848);const o=e=>n=>{let{plugintype:i="plugintype",pluginname:s="pluginname",filepath:t=null}=n,r=(e=>n=>e.plugintypes[n]?e.plugintypes[n]:`[path/to/${n}]`)(e)(i);return r+=s?`/${s}`:"/[pluginname]",`${r}${t}`},l=o(t),a=(l(t),e=>{if(!e.showFileHeader)return"";switch(e?.filetype){case"xml":return"";case"js":case"javascript":return(e=>{let{plugintype:n="plugintype",pluginname:i="pluginname",examplePurpose:s,modulename:t}=e;if(!s)throw Error("Purpose must be specified");if(!t)throw Error("AMD Module name must be specified");return["/**",` * ${s} for the ${n}_${i} plugin.`," *",` * @module   ${n}_${i}/${t}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */",""].join("\n")})(e);case"yui":return(e=>{let{plugintype:n="plugintype",pluginname:i="pluginname",examplePurpose:s,modulename:t}=e;if(!s)throw Error("Purpose must be specified");if(!t)throw Error("YUI Module name must be specified");return["/*",` * @package   ${n}_${i}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */","","/**",` * @module moodle-${n}_${i}-${t}`," */",""].join("\n")})(e);default:return(e=>{let{plugintype:n="plugintype",pluginname:i="pluginname",examplePurpose:s}=e;if(!s)throw Error("Purpose must be specified");return["/**",` * ${s} for the ${n}_${i} plugin.`," *",` * @package   ${n}_${i}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */",""].join("\n")})(e)}}),d=e=>e.showLicense?(e.filetype,"// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n"):"",c=e=>{let{filetype:n="php"}=e;switch(n){case"js":case"javascript":return"javascript";case"xml":return"xml";case"php":case null:return"php";default:return n}},u=(p=t,(e,n)=>{const i={plugintype:"plugintype",showLicense:!0,showFileHeader:!0,filepath:e.exampleFilepath??e.filepath,...e},t=o(p),l=function(e,n){void 0===n&&(n=null);const i=[d(e),a(e),e.example?e.example:n||null].filter((e=>e)).map((e=>e.trim())).join("\n\n");return[(e=>{let{filetype:n="php"}=e;switch(n){case"js":case"javascript":case"xml":return null;default:return"<?php"}})(e),i].filter((e=>e)).join("\n")}(i,n);return(0,r.jsx)(s.A,{title:t(i),language:c(i),children:l})});var p},7730:(e,n,i)=>{i.d(n,{ul:()=>d});var s=i(96540),t=i(22957),r=i(28453),o=i(37019),l=i(74848);const a=e=>"boolean"!=typeof e&&e?"string"==typeof e||s.isValidElement(e)?(0,l.jsx)(r.x,{children:e}):(0,l.jsx)(r.x,{children:(0,l.jsx)(e,{})}):null,d=e=>{const n=(e=>({filetype:"php",examplePurpose:e.summary,...e}))({examplePurpose:e?.summary??null,...e});return n.description=((e,n)=>{let{description:i=null,extraDescription:s=null,children:t=null}=e;if(t){const e=a(t);return(0,l.jsx)(r.x,{children:e})}if(i){const e=a(i);return(0,l.jsx)(r.x,{children:e})}const o=a(n),d=a(s);return o?(0,l.jsxs)(r.x,{children:[o,d]}):null})(n,n?.defaultDescription??null),(n?.example||n?.defaultExample)&&(n.example=(0,o.rI)(n,n?.defaultExample??null)),(0,t.A)(n)}},86959:(e,n,i)=>{i.d(n,{UL:()=>a,ok:()=>u,o$:()=>m,sk:()=>f,sy:()=>b,Rb:()=>w,Mm:()=>A,c0:()=>P,bQ:()=>I,vD:()=>k,ZF:()=>O,Le:()=>B,hO:()=>H,Ze:()=>X,xi:()=>z,zS:()=>Z,f4:()=>ie,JA:()=>re,WM:()=>ae,nm:()=>ue,H9:()=>me,bE:()=>fe,tC:()=>be,Wi:()=>we,g4:()=>Ae,HK:()=>Pe,DB:()=>Ie,Hf:()=>Ce,bL:()=>Ue});i(96540);var s=i(7730),t=i(74848),r=i(28453);function o(e){const n={a:"a",admonition:"admonition",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"JavaScript in Moodle is written in the ESM format, and transpiled into AMD modules for deployment."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"../guides/javascript",children:"Moodle JavaScript Guide"})," has detailed information and examples on writing JavaScript in Moodle. Further information is also available in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/javascript/modules",children:"JavaScript Modules"})," documentation."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Although the AMD module format is supported, all new JavaScript is written in the EcmaScript Module (ESM) format."})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}const a=e=>(0,t.jsx)(s.ul,{required:!0,defaultDescription:l,defaultExample:"\nimport {fetchThings} from './repository';\n\nexport const updateThings = (thingData) => {\n    return fetchThings(thingData);\n};\n",examplePurpose:"Example module",filepath:"/amd/src/example.js",filetype:"js",modulename:"example",summary:"AMD JavaScript Modules",...e});function d(e){const n={a:"a",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"If your plugin stores data then you may need to implement the Backup feature which allows the activity to backed up, restored, and duplicated."}),"\n",(0,t.jsx)(n.p,{children:"For more information on Backup and restore, see the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Backup_2.0_for_developers",children:"Backup 2.0 for developers"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Restore_2.0_for_developers",children:"Restore 2.0 for developers"})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}const u=e=>(0,t.jsx)(s.ul,{filepath:"/backup/",summary:"Plugin Backup configuration",defaultDescription:c,...e});function p(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For plugins which make use of ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/CLI_scripts",children:"CLI scripts"}),", the convention is that these are placed into the ",(0,t.jsx)(n.code,{children:"cli"})," folder to make their purpose clear, and easy to find."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["All CLI scripts ",(0,t.jsx)(n.strong,{children:"must"})," declare themselves as being a CLI script by defining the ",(0,t.jsx)(n.code,{children:"CLI_SCRIPT"})," constant to true before including ",(0,t.jsx)(n.code,{children:"config.php"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}const m=e=>(0,t.jsx)(s.ul,{filepath:"/cli/",summary:"CLI scripts",exampleFilepath:"/cli/example.php",examplePurpose:"Example CLI script",defaultDescription:h,defaultExample:"define('CLI_SCRIPT', true);\n\nrequire_once(__DIR__ . '/../../config.php');\nrequire_once(\"{$CFG->libdir}/clilib.php\");\n\n// Your CLI features go here.\n",...e});function g(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["If your plugin includes a changelog in its root directory, this will be used to automatically pre-fill the release notes field when uploading new versions of your plugin to the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Plugins_directory",children:"Plugins directory"}),". This file can be in any of the following locations:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.md"}),": as a markdown file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.txt"}),": as a text file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.html"}),": as an HTML file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES"}),": as a text file."]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}const f=e=>(0,t.jsx)(s.ul,{filepath:"/CHANGES",filetype:"php",summary:"Plugin changelog",recommended:!0,defaultDescription:x,...e});function j(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Moodle supports, and recommends, the use of autoloaded PHP classes."}),"\n",(0,t.jsxs)(n.p,{children:["By placing files within the ",(0,t.jsx)(n.code,{children:"classes"})," directory or appropriate sub-directories, and with the correct PHP Namespace, and class name, Moodle is able to autoload classes without the need to manually require, or include them."]}),"\n",(0,t.jsx)(n.p,{children:"Details on these rules and conventions are available in the following documentation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#namespaces",children:"Coding style - namespace conventions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Automatic_class_loading",children:"Automatic class loading"})}),"\n"]})]})}function y(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(j,{...e})}):j(e)}const b=e=>(0,t.jsx)(s.ul,{filepath:"/classes/",summary:"Autoloaded classes",defaultDescription:y,...e});function v(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/access.php"})," file contains the ",(0,t.jsx)(n.strong,{children:"initial"})," configuration for a plugin's access control rules."]}),"\n",(0,t.jsxs)(n.p,{children:["Access control is handled in Moodle by the use of Roles, and Capabilities. You can read more about these in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/access",children:"Access API"})," documentation."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Changing initial configuration",type:"caution",children:[(0,t.jsxs)(n.p,{children:["If you make changes to the initial configuration of ",(0,t.jsx)(n.em,{children:"existing"})," access control rules, these will only take effect for ",(0,t.jsx)(n.em,{children:"new installations of your plugin"}),". Any existing installation ",(0,t.jsx)(n.strong,{children:"will not"})," be updated with the latest configuration."]}),(0,t.jsx)(n.p,{children:"Updating existing capability configuration for an installed site is not recommended as it may have already been modified by an administrator."})]})]})}function _(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(v,{...e})}):v(e)}const w=e=>(0,t.jsx)(s.ul,{defaultDescription:_,defaultExample:"$capabilities = [\n    // Ability to use the plugin.\n    'plugintype/pluginname:useplugininstance' => [\n        'riskbitmask' => RISK_XSS,\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [\n            'manager' => CAP_ALLOW,\n            'editingteacher' => CAP_ALLOW,\n        ],\n    ],\n];\n",filepath:"/db/access.php",summary:"Plugin capabilities",examplePurpose:"Plugin capabilities",...e});function E(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Moodle supports a feature known as _ ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Events_API#Event_observers",children:"Event observers"})," _ to allow components to make changes when certain events take place."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/events.php"})," file allows you define any event subscriptions that your plugin needs to listen for."]}),"\n",(0,t.jsx)(n.p,{children:"Event subscriptions are a convenient way to observe events generated elsewhere in Moodle."}),"\n",(0,t.jsxs)(n.admonition,{title:"Communication between components",type:"caution",children:[(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.em,{children:"should not"})," use event subscriptions to subscribe to events belonging to other plugins, without defining a dependency upon that plugin."]}),(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/general/development/policies/component-communication#event-observers",children:"Component communication principles"})," documentation for a description of some of the risks of doing so."]})]})]})}function $(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(E,{...e})}):E(e)}const A=e=>(0,t.jsx)(s.ul,{refreshedDuringUpgrade:!0,defaultDescription:$,defaultExample:"$observers = [\n    [\n        'eventname' => '\\core\\event\\course_module_created',\n        'callback'  => '\\plugintype_pluginname\\event\\observer\\course_module_created::store',\n        'priority'  => 1000,\n    ],\n];\n",filepath:"/db/events.php",summary:"Event observer definitions",examplePurpose:"Event observer definitions",...e});function T(e){const n={admonition:"admonition",code:"code",em:"em",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/install.php"})," file allows you define a post-installation hook, which is called immediately after the initial creation of your database schema."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["This file is not used at all after the ",(0,t.jsx)(n.em,{children:"initial"})," installation of your plugin."]}),(0,t.jsxs)(n.p,{children:["It is ",(0,t.jsx)(n.em,{children:"not called"})," during any upgrade."]})]})]})}function M(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(T,{...e})}):T(e)}const P=e=>(0,t.jsx)(s.ul,{defaultDescription:M,filepath:"/CHANGES",filetype:"php",summary:"Post-installation hook",...e});function R(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"install.xml"})," file is used to define any database tables, fields, indexes, and keys, which should be created for a plugin during its initial installation."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["When creating or updating the ",(0,t.jsx)(n.code,{children:"install.xml"})," you ",(0,t.jsx)(n.strong,{children:"must"})," use the built-in ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/XMLDB_Documentation",children:"XMLDB editor"})," within Moodle."]})})]})}function D(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(R,{...e})}):R(e)}const I=e=>(0,t.jsx)(s.ul,{filepath:"/db/install.xml",summary:"Database schema",examplePurpose:"Database schema",defaultDescription:D,...e});function S(e){const n={a:"a",code:"code",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/messages.php"})," file allows you to declare the messages that your plugin sends."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Message_API",children:"Message API"})," documentation for further information."]})]})}function L(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}const k=e=>(0,t.jsx)(s.ul,{refreshedDuringUpgrade:!0,defaultExample:"\n$messageproviders = [\n    'things' => [\n        'defaults' => [\n            'airnotifier' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_ENABLED,\n        ],\n    ],\n];\n",defaultDescription:L,filepath:"/db/messages.php",summary:"Message provider configuration",examplePurpose:"Message provider configuration",...e});function C(e){const n={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The Moodle Mobile remote add-on is the mobile app version of the plugin that will be loaded when a user accesses the plugin on the app."}),"\n",(0,t.jsx)(n.p,{children:"A plugin can include several Mobile add-ons. Each add-on must indicate a unique name."}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/general/app/development/plugins-development-guide",children:"Moodle App Plugins development guide"})," for more information on configuring your plugin for the Moodle App."]})]})}function N(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(C,{...e})}):C(e)}const O=e=>(0,t.jsx)(s.ul,{refreshedDuringUpgrade:!0,defaultDescription:N,filepath:"/db/mobile.php",summary:"MoodleMobile version of the plugin",...e});function U(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Details of classes that have been renamed to fit in with autoloading. See ",(0,t.jsx)(n.a,{href:"https://moodle.org/mod/forum/discuss.php?d=262403",children:"forum discussion"})," for details."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["Adding renamed or moved classes to ",(0,t.jsx)(n.code,{children:"renamedclasses.php"})," is only necessary when the class is part of the component's API where it can be reused by other components, especially by third-party plugins. This is to maintain backwards-compatibility in addition to autoloading purposes."]}),(0,t.jsxs)(n.p,{children:["If the renamed or moved class is private/internal to the component and is not subject for external use, there is no need to add it to ",(0,t.jsx)(n.code,{children:"renamedclasses.php"}),"."]})]})]})}function F(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(U,{...e})}):U(e)}const B=e=>(0,t.jsx)(s.ul,{refreshedDuringPurge:!0,defaultExample:"\ndefined('MOODLE_INTERNAL') || die;\n\n$renamedclasses = [\n    'old_class_name' => 'fully_qualified\\\\new\\\\name',\n\n    // Examples:\n    'assign_header' => 'mod_assign\\\\output\\\\header',\n    '\\assign_header' => 'mod_assign\\\\output\\\\header',\n    '\\assign' => 'mod_assign\\\\assignment',\n\n    // Incorrect:\n    // The new class name should _not_ have a leading \\.\n    'assign_header' => '\\\\mod_assign\\\\output\\\\header',\n];\n",defaultDescription:F,filepath:"/db/renamedclasses.php",summary:"Renamed classes",examplePurpose:"Renamed classes",...e});function q(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/services.php"})," file is used to describe the external functions available for use in web services. This includes"]}),"\n",(0,t.jsxs)(n.p,{children:["web service functions defined for JavaScript, and for the ",(0,t.jsx)(n.a,{href:"/general/app",children:"Moodle Mobile App"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Web services should be named following the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Web_service_API_functions#Naming_convention",children:"naming convention for web services"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"For further information on external functions and web services, see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/external/writing-a-service",children:"Adding a web service to a plugin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/external/writing-a-service",children:"Web services API"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/external/functions",children:"External functions API"})}),"\n"]})]})}function G(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(q,{...e})}):q(e)}const H=e=>(0,t.jsx)(s.ul,{refreshedDuringUpgrade:!0,recommended:!0,filepath:"/db/services.php",summary:"Web service function declarations",examplePurpose:"Web service function declarations",defaultExample:"\n$functions = [\n    'plugintype_pluginname_create_things' => [\n        'classname' => 'plugintype_pluginname\\external\\create_things',\n        'description' => 'Create a new thing',\n        'type' => 'write',\n        'ajax' => true,\n        'services' => [\n            MOODLE_OFFICIAL_MOBILE_SERVICE,\n        ],\n    ],\n];\n",defaultDescription:G,...e});function W(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/tasks.php"})," file contains the initial schedule configuration for each of your plugins ",(0,t.jsx)(n.em,{children:"scheduled"})," tasks. Adhoc tasks are not run on a regular schedule and therefore are not described in this file."]}),"\n",(0,t.jsx)(n.admonition,{title:"Editing the schedule for an existing task",type:"caution",children:(0,t.jsx)(n.p,{children:"If an existing task is edited, it will only be updated in the database if the administrator has not customised the schedule of that task in any way."})}),"\n",(0,t.jsxs)(n.p,{children:["The following fields also accept a value of ",(0,t.jsx)(n.code,{children:"R"}),", which indicates that Moodle should choose a random value for that field:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"minute"}),"\n",(0,t.jsx)(n.li,{children:"hour"}),"\n",(0,t.jsx)(n.li,{children:"dayofweek"}),"\n",(0,t.jsx)(n.li,{children:"day"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/commonfiles/db-tasks.php/",children:"db/tasks.php"})," for full details of the file format."]})]})}function Y(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(W,{...e})}):W(e)}const X=e=>(0,t.jsx)(s.ul,{defaultDescription:Y,defaultExample:"$tasks = [\n    [\n        'classname' => 'mod_example\\task\\do_something',\n        'blocking' => 0,\n        'minute' => '30',\n        'hour' => '17',\n        'day' => '*',\n        'month' => '1,7',\n        'dayofweek' => '0',\n    ],\n];\n",filepath:"/db/tasks.php",summary:"Task schedule configuration",examplePurpose:"Task schedule configuration",refreshedDuringUpgrade:!0,...e});function V(e){const n={code:"code",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/uninstall.php"})," file allows you define a pre-uninstallation hook, which is called immediately before all table and data from your plugin are removed."]})}function J(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(V,{...e})}):V(e)}const z=e=>(0,t.jsx)(s.ul,{defaultDescription:J,filepath:"/db/uninstall.php",filetype:"php",summary:"Pre-uninstallation hook",...e});function K(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/upgrade.php"})," file contains upgrade steps, including database schema changes, changes to settings, and other steps which must be performed during upgrade."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/upgrade/",children:"Upgrade API"})," documentation for further information."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Generating Database Schema changes",type:"danger",children:[(0,t.jsxs)(n.p,{children:["When making changes to the database schema you ",(0,t.jsx)(n.strong,{children:"must"})," use the build-in ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/XMLDB_Documentation",children:"XMLDB editor"})," within\nMoodle. This can be used to generate php upgrade steps."]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/commonfiles/#dbinstallxml",children:"install.xml"})," schema must match the schema generated by the upgrade at all times."]})]}),"\n",(0,t.jsx)(n.p,{children:"To create an upgrade step you must:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.a,{href:"/general/development/tools/xmldb",children:"XMLDB editor"})," to create the definition of the new fields"]}),"\n",(0,t.jsxs)(n.li,{children:["Update the ",(0,t.jsx)(n.code,{children:"install.xml"})," from the XMLDB editor"]}),"\n",(0,t.jsx)(n.li,{children:"Generate the PHP upgrade steps from within the XMLDB Editor"}),"\n",(0,t.jsxs)(n.li,{children:["Update the version number in your ",(0,t.jsx)(n.code,{children:"version.php"})]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"In many cases you will be able to combine multiple upgrade steps into a single version change."})}),"\n",(0,t.jsxs)(n.p,{children:["When a version number increment is detected during an upgrade, the ",(0,t.jsx)(n.code,{children:"xmldb_[pluginname]_upgrade"})," function is called with the old version number as the first argument."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/upgrade/",children:"Upgrade API"})," documentation for more information on the upgrade process."]})]})}function Q(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(K,{...e})}):K(e)}const Z=e=>(0,t.jsx)(s.ul,{recommended:!0,defaultDescription:Q,defaultExample:"\nfunction xmldb_certificate_upgrade($oldversion = 0) {\n    if ($oldversion < 2012091800) {\n        // Add new fields to certificate table.\n        $table = new xmldb_table('certificate');\n        $field = new xmldb_field('showcode');\n        $field->set_attributes(XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'savecert');\n        if (!$dbman->field_exists($table, $field)) {\n            $dbman->add_field($table, $field);\n        }\n        // Add new fields to certificate_issues table.\n        $table = new xmldb_table('certificate_issues');\n        $field = new xmldb_field('code');\n        $field->set_attributes(XMLDB_TYPE_CHAR, '50', null, null, null, null, 'certificateid');\n        if (!$dbman->field_exists($table, $field)) {\n            $dbman->add_field($table, $field);\n        }\n\n        // Certificate savepoint reached.\n        upgrade_mod_savepoint(true, 2012091800, 'certificate');\n    }\n}",filepath:"/db/upgrade.php",summary:"Upgrade steps",examplePurpose:"Upgrade steps",...e});function ee(e){const n={a:"a",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A plugin can declare its own environment requirements, in addition to those declared by Moodle core. These may includes features such as PHP extension requirements, version requirements, and similar items."}),"\n",(0,t.jsxs)(n.p,{children:["Further information on this file and its format can be found in the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Environment_checking",children:"Environment checking"})," documentation."]})]})}function ne(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ee,{...e})}):ee(e)}const ie=e=>(0,t.jsx)(s.ul,{showFileHeader:!1,showLicense:!1,refreshedDuringUpgrade:!0,filepath:"/environment.xml",filetype:"xml",summary:"Plugin-specific environment requirements",defaultDescription:ne,defaultExample:'\n<?xml version="1.0" encoding="UTF-8" ?>\n<COMPATIBILITY_MATRIX>\n  <PLUGIN name="plugintype_pluginname">\n    <PHP_EXTENSIONS>\n      <PHP_EXTENSION name="soap" level="required">\n      </PHP_EXTENSION>\n    </PHP_EXTENSIONS>\n  </PLUGIN>\n</COMPATIBILITY_MATRIX>',...e});function se(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Each plugin must define a set of language strings with, at a minimum, an English translation. These are specified in the plugin's ",(0,t.jsx)(n.code,{children:"lang/en"})," directory in a file named after the plugin. For example the LDAP authentication plugin:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// Plugin type: `auth`\n// Plugin name: `ldap`\n// Frankenstyle plugin name: `auth_ldap`\n// Plugin location: `auth/ldap`\n// Language string location: `auth/ldap/lang/en/auth_ldap.php`\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Every plugin ",(0,t.jsx)(n.em,{children:"must"})," define the name of the plugin, or its ",(0,t.jsx)(n.code,{children:"pluginname"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"get_string"})," API can be used to translate a string identifier back into a translated string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"get_string('pluginname', '[plugintype]_[pluginname]');\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/String_API#Adding_language_file_to_plugin",children:"String API"})," documentation for more information on language files."]}),"\n"]})]})}function te(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(se,{...e})}):se(e)}const re=e=>(0,t.jsx)(s.ul,{filepath:"/lang/en/plugintype_pluginname.php",refreshedDuringPurge:!0,required:!0,summary:"Language files",examplePurpose:"Languages configuration",defaultDescription:te,defaultExample:"$string['pluginname'] = 'The name of my plugin will go here';",...e});function oe(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"lib.php"})," file is a legacy file which acts as a bridge between Moodle core, and the plugin. In recent plugins it is should only used to define callbacks and related functionality which currently is not supported as an auto-loadable class."]}),"\n",(0,t.jsxs)(n.p,{children:["All functions defined in this file ",(0,t.jsx)(n.strong,{children:"must"})," meet the requirements set out in the relevant section of the ",(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#functions-and-methods",children:"Coding style"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Performance impact",type:"note",children:(0,t.jsxs)(n.p,{children:["Moodle core often loads all the ",(0,t.jsx)("tt",{children:"lib.php"})," files of a given plugin types. For performance reasons, it is strongly recommended to keep this file as small as possible and have just required code implemented in it. All the plugin's internal logic should be implemented in the auto-loaded classes."]})})]})}function le(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(oe,{...e})}):oe(e)}const ae=e=>(0,t.jsx)(s.ul,{legacy:!0,required:!1,filepath:"/lib.php",summary:"Global plugin functions",examplePurpose:"Plugin functions",defaultDescription:le,...e});function de(e){const n={a:"a",admonition:"admonition",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"Legacy feature",type:"caution",children:(0,t.jsx)(n.p,{children:"The use of this file is no longer recommended, and new uses of it will not be permitted in core code."})}),"\n",(0,t.jsxs)(n.p,{children:["Rather than creating global functions in a global namespace in a ",(0,t.jsx)("tt",{children:"locallib.php"})," file, you should use autoloaded classes which are located in the ",(0,t.jsx)("tt",{children:"classes/"})," directory."]}),"\n",(0,t.jsxs)(n.p,{children:["Where this file is in use, all functions ",(0,t.jsx)(n.strong,{children:"must"})," meet the requirements set out in the relevant section of the ",(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#functions-and-methods",children:"Coding style"})]}),"\n",(0,t.jsxs)(n.p,{children:["Existing functions which have been incorrectly named ",(0,t.jsx)(n.strong,{children:"will not"})," be accepted as an example of an existing convention. Existing functions which are incorrectly named ",(0,t.jsx)(n.strong,{children:"should"})," be converted to use a namespaced class."]})]})}function ce(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(de,{...e})}):de(e)}const ue=e=>(0,t.jsx)(s.ul,{defaultDescription:ce,filepath:"/locallib.php",legacy:!0,required:!1,summary:"Global support functions",...e});function pe(e){const n={a:"a",code:"code",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Plugins can provide icons in several formats, and most plugin types require that a default icon be provided."}),"\n",(0,t.jsxs)(n.p,{children:["Where a browser supports it, the ",(0,t.jsx)(n.code,{children:"svg"})," format is used, falling back to ",(0,t.jsx)(n.code,{children:"png"})," formats when an SVG is unavailable."]}),"\n",(0,t.jsxs)(n.p,{children:["Full details of the correct naming, sizing, and design guidelines for icons in Moodle can be found in the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Moodle_icons",children:"Moodle icons"})," documentation."]})]})}function he(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(pe,{...e})}):pe(e)}const me=e=>(0,t.jsx)(s.ul,{defaultDescription:he,refreshedDuringPurge:!0,filepath:"/pix/",summary:"Plugins icons",...e});function ge(e){const n={a:"a",code:"code",p:"p",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["We recommend that you include any additional information for your plugin in a project readme file. Ideally this should act as an offline version of all information in your plugin's page in the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Plugins_directory",children:"Plugins directory"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We recommend creating your readme file in either a ",(0,t.jsx)(n.code,{children:"README.md"}),", or ",(0,t.jsx)(n.code,{children:"README.txt"})," format."]})]})}function xe(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ge,{...e})}):ge(e)}const fe=e=>(0,t.jsx)(s.ul,{filepath:"/README",recommended:!0,defaultDescription:xe,summary:"Plugin Information for Administrators",...e});function je(e){const n={code:"code",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["When importing a third-party library into your plugin, it is advisable to create a ",(0,t.jsx)(n.code,{children:"readme_moodle.txt"})," file detailing relevant information, including:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Download URLs"}),"\n",(0,t.jsx)(n.li,{children:"Build instructions"}),"\n"]})]})}function ye(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(je,{...e})}):je(e)}const be=e=>(0,t.jsx)(s.ul,{recommended:!0,filepath:"/*/readme_moodle.txt",defaultDescription:ye,summary:"Third-party library import instructions",...e});function ve(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["You can define settings for your plugin that the administrator can configure by creating a ",(0,t.jsx)(n.code,{children:"settings.php"})," file in the root of your plugins' directory."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"Settings must named in the following format:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"plugintype_pluginname/settingname\n"})}),(0,t.jsxs)(n.p,{children:["By following the correct naming, all settings will automatically be stored in the ",(0,t.jsx)(n.code,{children:"config_plugins"})," database table."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Full details on how to create settings are available in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/admin/",children:"Admin settings"})," documentation."]})]})}function _e(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ve,{...e})}):ve(e)}const we=e=>(0,t.jsx)(s.ul,{defaultDescription:_e,filepath:"/settings.php",summary:"Plugin settings",examplePurpose:"Plugin settings",...e});function Ee(e){const n={a:"a",admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Plugins may define a '/styles.css' to provide plugin-specific styling. See the following for further documentation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Plugin_contribution_checklist#CSS_styles",children:"Plugin contribution checklist#CSS styles"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/CSS_Coding_Style",children:"CSS Coding Style"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Avoid custom styles where possible",type:"tip",children:(0,t.jsx)(n.p,{children:"Rather than writing custom CSS for your plugin, where possible apply Bootstrap classes to the DOM elements in your output. These will be easier to maintain and will adopt most colour, branding, and other customisations applied to a theme."})})]})}function $e(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Ee,{...e})}):Ee(e)}const Ae=e=>(0,t.jsx)(s.ul,{refreshedDuringPurge:!0,defaultDescription:$e,filepath:"/styles.css",summary:"CSS style sheet for your plugin",...e});function Te(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Details of all third-party libraries should be declared in the ",(0,t.jsx)(n.code,{children:"thirdpartylibs.xml"})," file."]}),"\n",(0,t.jsx)(n.p,{children:"This information is used to generate ignore file configuration for linting tools. For Moodle core it is also used to generate library information as part of release notes and credits."}),"\n",(0,t.jsxs)(n.p,{children:["Within the XML the ",(0,t.jsx)(n.code,{children:"location"})," is a file, or directory, relative to your plugin's root."]}),"\n",(0,t.jsx)(n.admonition,{title:"Licensing",type:"caution",children:(0,t.jsxs)(n.p,{children:["The license of any third-party code included in your plugin, and within the ",(0,t.jsx)(n.code,{children:"thirdpartylibs.xml"})," file ",(0,t.jsx)(n.strong,{children:"must"})," be ",(0,t.jsx)(n.a,{href:"http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses",children:"compatible with the GNU GPLv3"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Third_Party_Libraries",children:"Third Party Libraries"})," documentation for further information."]})]})}function Me(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Te,{...e})}):Te(e)}const Pe=e=>(0,t.jsx)(s.ul,{defaultDescription:Me,defaultExample:'<?xml version="1.0"?>\n<libraries>\n    <library>\n        <location>javascript/html5shiv.js</location>\n        <name>Html5Shiv</name>\n        <version>3.6.2</version>\n        <license>Apache</license>\n        <licenseversion>2.0</licenseversion>\n    </library>\n    <library>\n        <location>vendor/guzzle/guzzle/</location>\n        <name>guzzle</name>\n        <version>v3.9.3</version>\n        <license>MIT</license>\n        <licenseversion></licenseversion>\n    </library>\n</libraries>',filepath:"/thirdpartylibs.xml",filetype:"xml",summary:"Details of third-party libraries included in the plugin",showLicense:!1,showFileHeader:!1,...e});function Re(e){const n={code:"code",em:"em",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Each component and subsystem may make use of an ",(0,t.jsx)(n.code,{children:"upgrade.txt"})," file in the top level folder. A section title is used to identify the Moodle version where the change was introduced, and significant changes for that version relating to that component or subsystem are noted."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, given an API change is applied for the upcoming Moodle version 4.1 which is still in the ",(0,t.jsx)(n.strong,{children:"master"})," branch (4.1dev), the version number on the ",(0,t.jsx)(n.code,{children:"upgrade.txt"}),"'s section title will be set to ",(0,t.jsx)(n.strong,{children:"4.1"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 1: Change applied to the master branch"',children:"== 4.1 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"changes-applied-to-multiple-branches",children:"Changes applied to multiple branches"}),"\n",(0,t.jsxs)(n.p,{children:["When changes are integrated to multiple branches, for example a stable version and the master branch, then the relevant versions used to describe the change in the ",(0,t.jsx)(n.code,{children:"upgrade.txt"})," file should be the next version to be released ",(0,t.jsx)(n.em,{children:"for each branch"}),". The ",(0,t.jsx)(n.strong,{children:"master"})," branch should always use the next major version."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if a change is applied to the ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," during the development of Moodle 4.0.2, and the ",(0,t.jsx)(n.strong,{children:"master"})," branch during the development of Moodle 4.1, then the relevant versions will be ",(0,t.jsx)(n.strong,{children:"4.0.2"})," and ",(0,t.jsx)(n.strong,{children:"4.1"}),", respectively. The section title for the ",(0,t.jsx)(n.strong,{children:"master"})," branch will be the same as the one in Example 1. The section title for the ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," branch will indicate the next upcoming minor version (4.0.2 in this case):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 2: Patch applied to master and MOODLE_400_STABLE"',children:"== 4.0.2 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"mentioning-other-moodle-versions-the-change-applies-to",children:"Mentioning other Moodle versions the change applies to"}),"\n",(0,t.jsxs)(n.p,{children:["Multiple versions within the section title are ",(0,t.jsx)(n.strong,{children:"not"})," allowed. However, developers may note the Moodle versions that the change applies to within the upgrade note text itself."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3a: master (4.1dev)"',children:"== 4.1 ==\nAn API change to empower educators! (This was fixed in 4.1 and 4.0.2)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3b: MOODLE_400_STABLE"',children:"== 4.0.2 ==\nAn API change to empower educators! (This was fixed in 4.1 and 4.0.2)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3c: (INCORRECT) Multiple versions on the section title"',children:"== 4.1, 4.0.2 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"exception-during-parallel-development",children:"Exception during parallel development"}),"\n",(0,t.jsx)(n.p,{children:"When Moodle is developing two major versions in parallel, for example Moodle 3.11.0, and Moodle 4.0.0, then the\nversion in the earliest of the major version development branches will be used for both branches."}),"\n",(0,t.jsxs)(n.p,{children:["For example, given we are in a parallel development situation with ",(0,t.jsx)(n.strong,{children:"MOODLE_311_STABLE"})," (3.11dev) and ",(0,t.jsx)(n.strong,{children:"master"})," (4.0dev), with Moodle 3.11 as the next upcoming major Moodle version. If an API change is applied to ",(0,t.jsx)(n.strong,{children:"MOODLE_311_STABLE"}),", the version number on the section title will be ",(0,t.jsx)(n.strong,{children:"3.11"})," for both ",(0,t.jsx)(n.strong,{children:"master"})," and ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," branches."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 4a: master (4.0dev)"',children:"== 3.11 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 4b: MOODLE_311_STABLE (3.11dev)"',children:"== 3.11 ==\nAn API change to empower educators!\n"})})]})}function De(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Re,{...e})}):Re(e)}const Ie=e=>(0,t.jsx)(s.ul,{recommended:!0,filepath:"/*/upgrade.txt",defaultDescription:De,summary:"Significant changes for each version of your plugin",...e});function Se(e){const n={li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The version.php contains metadata about the plugin."}),"\n",(0,t.jsx)(n.p,{children:"It is used during the installation and upgrade of the plugin."}),"\n",(0,t.jsx)(n.p,{children:"This file contains metadata used to describe the plugin, and includes information such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the version number"}),"\n",(0,t.jsx)(n.li,{children:"a list of dependencies"}),"\n",(0,t.jsx)(n.li,{children:"the minimum Moodle version required"}),"\n",(0,t.jsx)(n.li,{children:"maturity of the plugin"}),"\n"]})]})}function Le(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Se,{...e})}):Se(e)}const ke="defined('MOODLE_INTERNAL') || die();\n\n$plugin->version = TODO;\n$plugin->requires = TODO;\n$plugin->supported = TODO;   // Available as of Moodle 3.9.0 or later.\n$plugin->incompatible = TODO;   // Available as of Moodle 3.9.0 or later.\n$plugin->component = 'TODO_FRANKENSTYLE';\n$plugin->maturity = MATURITY_STABLE;\n$plugin->release = 'TODO';\n\n$plugin->dependencies = [\n    'mod_forum' => 2022042100,\n    'mod_data' => 2022042100\n];\n";function Ce(e){return(0,t.jsx)(s.ul,{required:!0,filepath:"/version.php",filetype:"php",summary:"Version metadata",examplePurpose:"Version metadata",defaultDescription:Le,defaultExample:ke,...e})}function Ne(e){const n={a:"a",admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In older versions of Moodle, JavaScript was written in the YUI format. This is being phased out in favour of ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/javascript/modules",children:"JavaScript Modules"}),", although some older uses still remain in Moodle core."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/javascript/yui/modules",children:"YUI/Modules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/guides/javascript/yui/",children:"YUI"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["New YUI code will not be accepted into Moodle core, except for new plugins for the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/plugintypes/atto/",children:"Atto editor"}),"."]})})]})}function Oe(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Ne,{...e})}):Ne(e)}const Ue=e=>(0,t.jsx)(s.ul,{legacy:!0,refreshedDuringPurge:!0,defaultDescription:Oe,filepath:"/yui/",examplePurpose:"YUI JavaScript Modules",summary:"YUI JavaScript Modules",...e})},57435:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>g,contentTitle:()=>h,default:()=>j,frontMatter:()=>p,metadata:()=>m,toc:()=>x});var s=i(74848),t=i(28453),r=i(78924),o=i(86959);const l="class enrol_pluginname_plugin extends enrol_plugin {\n\n    // Enrolment plugins can define many workflows to handle enrolment\n    // depending on the overridden methods. See the methods section for more information.\n}\n",a="$string['fee:config'] = 'Configure enrolment on payment enrol instances';\n$string['fee:manage'] = 'Manage enrolled users';\n$string['fee:unenrol'] = 'Unenrol users from course';\n$string['fee:unenrolself'] = 'Unenrol self from course';\n$string['pluginname'] = 'Enrolment on payment';\n$string['pluginname_desc'] = 'The enrolment on payment enrolment method allows you to set up courses requiring a payment. If the fee for any course is set to zero, then students are not asked to pay for entry. There is a site-wide fee that you set here as a default for the whole site and then a course setting that you can set for each course individually. The course fee overrides the site fee.';\n$string['privacy:metadata'] = 'The enrolment on payment enrolment plugin does not store any personal data.';\n",d="$capabilities = [\n\n    // Enrol anybody.\n    'enrol/pluginname:enrol' => [\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [\n            'manager' => CAP_ALLOW,\n            'editingteacher' => CAP_ALLOW,\n        ],\n    ],\n\n    // Manage enrolments of users.\n    'enrol/pluginname:manage' => [\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [\n            'manager' => CAP_ALLOW,\n            'editingteacher' => CAP_ALLOW,\n        ],\n    ],\n\n    // Unenrol anybody (including self) - watch out for data loss.\n    'enrol/pluginname:unenrol' => [\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [\n            'manager' => CAP_ALLOW,\n            'editingteacher' => CAP_ALLOW,\n        ],\n    ],\n\n    // Unenrol self - watch out for data loss.\n    'enrol/pluginname:unenrolself' => [\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [],\n    ],\n];\n",c="<?php\nclass enrol_guest_plugin extends enrol_plugin {\n\n    /**\n     * We are a good plugin and don't invent our own UI/validation code path.\n     *\n     * @return boolean\n     */\n    public function use_standard_editing_ui() {\n        return true;\n    }\n\n    /**\n     * Returns true if the current user can add a new instance of enrolment plugin in course.\n     * @param int $courseid\n     * @return boolean\n     */\n    public function can_add_instance($courseid) {\n        global $DB;\n\n        $context = context_course::instance($courseid, MUST_EXIST);\n\n        if (!has_capability('moodle/course:enrolconfig', $context)) {\n            return false;\n        }\n\n        if (!has_capability('enrol/pluginname:config', $context)) {\n            return false;\n        }\n\n        // In this example we only allow one instance per course.\n        if ($DB->record_exists('enrol', ['courseid' => $courseid, 'enrol' => 'pluginname'])) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Add elements to the edit instance form.\n     *\n     * @param stdClass $instance\n     * @param MoodleQuickForm $mform\n     * @param context $context\n     * @return bool\n     */\n    public function edit_instance_form($instance, MoodleQuickForm $mform, $context) {\n        $options = [\n            'example1' => get_string('example1', 'enrol_pluginname'),\n            'example2' => get_string('example2', 'enrol_pluginname'),\n        ];\n        $mform->addElement(\n            'select',\n            'customchar1',\n            get_string('something', 'enrol_pluginname'),\n            $options\n        );\n        $mform->setDefault('customchar1', $this->get_config('something'));\n\n        $mform->addElement(\n            'text',\n            'customtext1',\n            get_string('extraname', 'enrol_pluginname')\n        );\n    }\n\n    /**\n     * Perform custom validation of the data used to edit the instance.\n     *\n     * @param array $data array of (\"fieldname\"=>value) of submitted data\n     * @param array $files array of uploaded files \"element_name\"=>tmp_file_path\n     * @param object $instance The instance loaded from the DB\n     * @param context $context The context of the instance we are editing\n     * @return array of \"element_name\"=>\"error_description\" if there are errors,\n     *         or an empty array if everything is OK.\n     */\n    public function edit_instance_validation($data, $files, $instance, $context) {\n        $errors = [];\n\n        // Do some validation.\n        if ($data['customchar1'] != 'example2' && empty($data['customtext1'])) {\n            $errors['customtext1'] = get_string('missing_extraname', 'enrol_pluginname');\n        }\n\n        return $errors;\n    }\n\n    /**\n     * Add new instance of enrol plugin.\n     * @param object $course the course object\n     * @param array $fields instance fields\n     * @return int id of new instance, null if can not be created\n     */\n    public function add_instance($course, array $fields = null) {\n        // Add $fields calculations here.\n        $instanceid = parent::add_instance($course, $fields);\n        // Insert elements to the enrolment plugins tables if needed.\n        return $instanceid;\n    }\n}\n",u="class enrol_pluginname_plugin extends enrol_plugin {\n\n    // (...)\n\n    public function edit_instance_form($instance, MoodleQuickForm $mform, $context) {\n        $mform->addElement(\n            'select',\n            'customint4',\n            get_string('sendcoursewelcomemessage', 'enrol_pluginname'),\n            enrol_send_welcome_email_options()\n        );\n    }\n\n    /**\n     * Enrol a user using a given enrolment instance.\n     *\n     * @param stdClass $instance the plugin instance\n     * @param int $userid the user id\n     * @param int $roleid the role id\n     * @param int $timestart enrolment start timestamp\n     * @param int $timeend enrolment end timestamp\n     * @param int $status default to ENROL_USER_ACTIVE for new enrolments\n     * @param bool $recovergrades restore grade history\n     */\n    public function enrol_user(\n        stdClass $instance,\n        $userid,\n        $roleid = null,\n        $timestart = 0,\n        $timeend = 0,\n        $status = null,\n        $recovergrades = null\n    ) {\n        parent::enrol_user(\n            $instance,\n            $userid,\n            $roleid,\n            $timestart,\n            $timeend,\n            $status,\n            $recovergrades\n        );\n        // Send welcome message.\n        if ($instance->customint4 != ENROL_DO_NOT_SEND_EMAIL) {\n            $this->email_welcome_message($instance, core_user::get_user($userid));\n        }\n    }\n}\n",p={title:"Enrolment plugins",tags:["Enrolment","Plugins"]},h=void 0,m={id:"apis/plugintypes/enrol/index",title:"Enrolment plugins",description:"Moodle provides a number of ways of managing course enrolment, called enrolment plugins. Each course can decide its enabled enrolment plugins instances and any enrolment plugin can define a workflow the user must follow in order to enrol in the course.",source:"@site/versioned_docs/version-4.2/apis/plugintypes/enrol/index.md",sourceDirName:"apis/plugintypes/enrol",slug:"/apis/plugintypes/enrol/",permalink:"/moodledevdocs/docs/4.2/apis/plugintypes/enrol/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.2/apis/plugintypes/enrol/index.md",tags:[{label:"Enrolment",permalink:"/moodledevdocs/docs/4.2/tags/enrolment"},{label:"Plugins",permalink:"/moodledevdocs/docs/4.2/tags/plugins"}],version:"4.2",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Enrolment plugins",tags:["Enrolment","Plugins"]},sidebar:"docs",previous:{title:"Course Custom fields",permalink:"/moodledevdocs/docs/4.2/apis/plugintypes/customfield/"},next:{title:"File Converters",permalink:"/moodledevdocs/docs/4.2/apis/plugintypes/fileconverter/"}},g={},x=[{value:"File structure",id:"file-structure",level:2},{value:"lib.php",id:"libphp",level:3},{value:"lang/en/enrol_pluginname.php",id:"langenenrol_pluginnamephp",level:3},{value:"db/access.php",id:"dbaccessphp",level:3},{value:"version.php",id:"versionphp",level:3},{value:"User enrolment process",id:"user-enrolment-process",level:2},{value:"Enrolment expiration and suspending",id:"enrolment-expiration-and-suspending",level:2},{value:"Enrolment API methods.",id:"enrolment-api-methods",level:2},{value:"enrol_plugin::get_user_enrolment_actions(): array",id:"enrol_pluginget_user_enrolment_actions-array",level:3},{value:"enrol_plugin::allow_unenrol(): bool",id:"enrol_pluginallow_unenrol-bool",level:3},{value:"enrol_plugin::allow_unenrol_user(): bool",id:"enrol_pluginallow_unenrol_user-bool",level:3},{value:"enrol_plugin::allow_enrol(): bool",id:"enrol_pluginallow_enrol-bool",level:3},{value:"enrol_plugin::enrol_user()",id:"enrol_pluginenrol_user",level:3},{value:"enrol_plugin(): bool",id:"enrol_plugin-bool",level:3},{value:"enrol_plugin::roles_protected(): bool",id:"enrol_pluginroles_protected-bool",level:3},{value:"Standard Editing UI",id:"standard-editing-ui",level:2},{value:"Sending a welcome email",id:"sending-a-welcome-email",level:2},{value:"See also",id:"see-also",level:2}];function f(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{CodeBlock:i,Details:h}=n;return i||y("CodeBlock",!0),h||y("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.A,{frontMatter:p,metadata:m}),"\n","\n",(0,s.jsx)(n.p,{children:"Moodle provides a number of ways of managing course enrolment, called enrolment plugins. Each course can decide its enabled enrolment plugins instances and any enrolment plugin can define a workflow the user must follow in order to enrol in the course."}),"\n",(0,s.jsxs)(n.p,{children:["Course enrolment information is stored in tables ",(0,s.jsx)(n.strong,{children:"enrol"}),", ",(0,s.jsx)(n.strong,{children:"user_enrolments"})," and optionally other custom database tables defined by individual enrolment plugins. By default user enrolments are protected and can not be modified manually by teachers but only via the specific enrolment plugin."]}),"\n",(0,s.jsx)(n.p,{children:"Enrolment gives users following privileges:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["User with active enrolment may enter course, other users need either temporary guest access right or moodle/course",":view"," capability."]}),"\n",(0,s.jsx)(n.li,{children:'"My courses" shows list of active enrolments for current user.'}),"\n",(0,s.jsx)(n.li,{children:"Course participation - some activities restrict participation to enrolled users only. The behaviour is defined independently by each activity, for example only enrolled users with submit capability may submit assignments, the capability alone is not enough."}),"\n",(0,s.jsx)(n.li,{children:"Only enrolled users may be members of groups."}),"\n",(0,s.jsx)(n.li,{children:"Gradebook tracks grades of all enrolled users, visibility of grades is controlled by role membership."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"Enrolments and role assignments are separate concepts, you may be enrolled and not have any role and you may have a role in course and not be enrolled. Roles at course context level and below may be controlled by enrolment plugins."})}),"\n",(0,s.jsx)(n.h2,{id:"file-structure",children:"File structure"}),"\n",(0,s.jsxs)(n.p,{children:["All enrolment plugin files must be located inside the ",(0,s.jsx)(n.strong,{children:"enrol/pluginname"})," folder."]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsxs)("summary",{children:["View an example directory layout for the ",(0,s.jsx)(n.code,{children:"enrol_pluginname"})," plugin."]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-console",children:" enrol/pluginname/\n |-- db\n |   `-- access.php\n |-- lang\n |   `-- en\n |       `-- enrol_pluginname.php\n `-- lib.php\n `-- version.php\n"})})]}),"\n",(0,s.jsxs)(n.p,{children:["Some of the important files for the format plugintype are described below. See the ",(0,s.jsx)(n.a,{href:"../commonfiles",children:"common plugin files"})," documentation for details of other files which may be useful in your plugin."]}),"\n",(0,s.jsx)(n.h3,{id:"libphp",children:"lib.php"}),"\n","\n",(0,s.jsx)(o.WM,{plugintype:"enrol",pluginname:"pluginname",example:l,legacy:!1,required:!0,children:(0,s.jsx)(n.p,{children:"The plugin lib.php must contain the plugin base class."})}),"\n",(0,s.jsxs)(n.p,{children:["Enrolment plugins must extend ",(0,s.jsx)(n.code,{children:"enrol_plugin"})," base class which is defined at the end of lib/enrollib.php. This base class contains all standard methods to define the plugin workflow."]}),"\n",(0,s.jsx)(n.h3,{id:"langenenrol_pluginnamephp",children:"lang/en/enrol_pluginname.php"}),"\n","\n",(0,s.jsx)(o.JA,{plugintype:"enrol",pluginname:"pluginname",example:a}),"\n",(0,s.jsx)(n.h3,{id:"dbaccessphp",children:"db/access.php"}),"\n","\n",(0,s.jsx)(o.Rb,{plugintype:"repository",pluginname:"pluginname",example:d}),"\n",(0,s.jsx)(n.p,{children:"Depending on the enrolment workflow, the access.php file should define the following capabilities:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["enrol/xxx",":enrol"]})," - used when ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_enrol()"})," returns true."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["enrol/xxx",":unenrol"]})," - used when ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_unenrol()"})," or ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_unenrol_user()"})," returns true."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["enrol/xxx",":manage"]})," - used when ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_manage()"})," returns true."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["enrol/xxx",":unenrolself"]})," - used when plugin support self-unenrolment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["enrol/xxx",":config"]})," - used when plugin allows user to modify instance properties. Automatic synchronisation plugins do not usually need this capability."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#enrolment-api-methods",children:"enrolment API methods"})," for more information."]}),"\n",(0,s.jsx)(n.h3,{id:"versionphp",children:"version.php"}),"\n",(0,s.jsx)(o.Hf,{plugintype:"enrol"}),"\n",(0,s.jsx)(n.h2,{id:"user-enrolment-process",children:"User enrolment process"}),"\n",(0,s.jsxs)(n.p,{children:["Manual enrolment plugins are the simplest way to handle user enrolments. In the core ",(0,s.jsx)(n.em,{children:"enrol_manual"}),", users with necessary permissions may enrol or unenrol users manually. In the ",(0,s.jsx)(n.em,{children:"enrol_flatfile"})," plugin allows automation of enrolment and unenrolment actions."]}),"\n",(0,s.jsxs)(n.p,{children:["Fully automatic plugins are configured at the system level, they synchronise user enrolments with information stored in external systems (for example ",(0,s.jsx)(n.em,{children:"enrol_ldap"}),", ",(0,s.jsx)(n.em,{children:"enrol_database"})," and ",(0,s.jsx)(n.em,{children:"enrol_category"}),"). Some non-interactive plugins may require configuration of enrolment instances (for example ",(0,s.jsx)(n.em,{children:"enrol_cohort"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Interactive enrolment plugins require user interaction during enrolment (for example: ",(0,s.jsx)(n.em,{children:"enrol_self"})," and ",(0,s.jsx)(n.em,{children:"enrol_fee"}),"). These plugins need to override ",(0,s.jsx)(n.code,{children:"enrol_plugin::show_enrolme_link()"}),", ",(0,s.jsx)(n.code,{children:"enrol_plugin::enrol_page_hook()"})," and to implement adding and editing of enrol instance."]}),"\n",(0,s.jsx)(n.h2,{id:"enrolment-expiration-and-suspending",children:"Enrolment expiration and suspending"}),"\n",(0,s.jsx)(n.p,{children:"User has active enrolment if all following conditions are met:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["User has record in ",(0,s.jsx)(n.code,{children:"user_enrolments"})," table,"]}),"\n",(0,s.jsx)(n.li,{children:"User enrolment already started,"}),"\n",(0,s.jsx)(n.li,{children:"User enrolment is not past timeend,"}),"\n",(0,s.jsx)(n.li,{children:"User enrolment has active status,"}),"\n",(0,s.jsxs)(n.li,{children:["Enrol instance has active status in ",(0,s.jsx)(n.code,{children:"enrol"})," table,"]}),"\n",(0,s.jsx)(n.li,{children:"Enrol plugin is enabled."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Most synchronisation plugins include a setting called ",(0,s.jsx)(n.em,{children:"External unenrol action"}),". It is used to decide what happens when previously enrolled user is not supposed to be enrolled any more. Enrol plugins can provide schedulled tasks to synchronize enrolments."]}),"\n",(0,s.jsxs)(n.p,{children:["Plugins that set ",(0,s.jsx)(n.code,{children:"timeend"})," in ",(0,s.jsx)(n.code,{children:"user_enrolments"})," table may want to specify expiration action and optional expiration notification using ",(0,s.jsx)(n.code,{children:"enrol_plugin::process_expirations()"})," and ",(0,s.jsx)(n.code,{children:"enrol_plugin::send_expiry_notifications()"})," methods."]}),"\n",(0,s.jsx)(n.h2,{id:"enrolment-api-methods",children:"Enrolment API methods."}),"\n",(0,s.jsxs)(n.p,{children:["Each enrolment plugin can define the enrolment workflow by overriding some of the ",(0,s.jsx)(n.code,{children:"enrol_plugin"})," methods."]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginget_user_enrolment_actions-array",children:"enrol_plugin::get_user_enrolment_actions(): array"}),"\n",(0,s.jsxs)(n.p,{children:["By default, all enrolment plugins will have ",(0,s.jsx)(n.em,{children:"editing enrolment"})," and ",(0,s.jsx)(n.em,{children:"user unenrolment"})," actions. However, some plugins may override this method to add extra actions."]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Gets an array of the user enrolment actions\n *\n * @param course_enrolment_manager $manager\n * @param stdClass $userenrolment\n * @return array An array of user_enrolment_actions\n */\npublic function get_user_enrolment_actions(course_enrolment_manager $manager, $userenrolment) {\n    $actions = parent::get_user_enrolment_actions($manager, $userenrolment);\n    $context = $manager->get_context();\n    $instance = $userenrolment->enrolmentinstance;\n    $params = $manager->get_moodlepage()->url->params();\n    $params['ue'] = $userenrolment->id;\n\n    // Edit enrolment action.\n    if ($this->allow_manage($instance) && has_capability(\"enrol/{$instance->enrol}:something\", $context)) {\n        $title = get_string('newaction', 'enrol');\n        $icon = new pix_icon('t/edit', '');\n        $url = new moodle_url('/enrol/pluginname/something.php', $params);\n        $actions[] = new user_enrolment_action($icon, $title, $url);\n    }\n\n    return $actions;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginallow_unenrol-bool",children:"enrol_plugin::allow_unenrol(): bool"}),"\n",(0,s.jsx)(n.p,{children:"This method returns true if other code allowed to unenrol everybody from one instance. This method is used on course reset and manual unenrol."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The unenrol action will allow resetif all following conditions are met:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The method ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_unenrol()"})," returns true"]}),"\n",(0,s.jsxs)(n.li,{children:["The current user has the ",(0,s.jsx)(n.code,{children:"enrol/pluginname:unenrol"})," capability."]}),"\n"]})]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function allow_unenrol(stdClass $instance) {\n    // Add any extra validation here.\n    return true;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginallow_unenrol_user-bool",children:"enrol_plugin::allow_unenrol_user(): bool"}),"\n",(0,s.jsx)(n.p,{children:"This method returns true if other code allowed to unenrol a specific user from one instance."}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"allow_unenrol_user"})," is not overridden, the default behaviour is to call ",(0,s.jsx)(n.code,{children:"allow_unenrol()"})," method."]})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The unenrol action will be displayed if all following conditions are met:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The method ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_unenrol_user()"})," returns true"]}),"\n",(0,s.jsxs)(n.li,{children:["The current user has the ",(0,s.jsx)(n.code,{children:"enrol/pluginname:unenrol"})," capability."]}),"\n"]})]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function allow_unenrol_user(stdClass $instance, stdClass $userenrolment) {\n    // Add any extra validation here.\n    return true;\n}\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:["It is quite common in enrolment plugins to allow unenrol only if the user enrolment is suspended (for example: ",(0,s.jsx)(n.em,{children:"enrol_database"}),", ",(0,s.jsx)(n.em,{children:"enrol_flatfile"}),", ",(0,s.jsx)(n.em,{children:"enrol_meta"}),")."]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View suspended enrolment example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function allow_unenrol_user(stdClass $instance, stdClass $userenrolment) {\n    if ($userenrolment->status == ENROL_USER_SUSPENDED) {\n        return true;\n    }\n    return false;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginallow_enrol-bool",children:"enrol_plugin::allow_enrol(): bool"}),"\n",(0,s.jsx)(n.p,{children:"Define if the enrol plugin is compatible with manual enrolments."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The edit manual enrolment action will be displayed if if all following conditions are met:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The method ",(0,s.jsx)(n.code,{children:"enrol_plugin::allow_enrol()"})," returns true"]}),"\n",(0,s.jsxs)(n.li,{children:["The current user has the ",(0,s.jsx)(n.code,{children:"enrol/pluginname:enrol"})," capability."]}),"\n"]})]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function allow_enrol(stdClass $instance) {\n    // Add any extra validation here.\n    return true;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginenrol_user",children:"enrol_plugin::enrol_user()"}),"\n",(0,s.jsx)(n.p,{children:"This method is the plugin enrolment hook. It will be called when user is enrolled in the course using one of the plugin instances. It is used to alter the enrolment data (for example altering the dates or the role) and also to throw exceptions if some external condions are not met."}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"/**\n * Enrol a user using a given enrolment instance.\n *\n * @param stdClass $instance the plugin instance\n * @param int $userid the user id\n * @param int $roleid the role id\n * @param int $timestart enrolment start timestamp\n * @param int $timeend enrolment end timestamp\n * @param int $status default to ENROL_USER_ACTIVE for new enrolments, no change by default in updates\n * @param bool $recovergrades restore grade history\n */\npublic function enrol_user(\n    stdClass $instance,\n    $userid,\n    $roleid = null,\n    $timestart = 0,\n    $timeend = 0,\n    $status = null,\n    $recovergrades = null\n) {\n    // Add validations here.\n\n    parent::enrol_user(\n        $instance,\n        $userid,\n        $roleid,\n        $timestart,\n        $timeend,\n        $status,\n        $recovergrades\n    );\n}\n"})})})]}),"\n",(0,s.jsxs)(n.h3,{id:"enrol_plugin-bool",children:["enrol_plugin",":allow_manage","(): bool"]}),"\n",(0,s.jsx)(n.p,{children:"Return true if plugin allows manual modification of user enrolments from other code. False is usually returned from plugins that synchronise data with external systems, otherwise the manual changes would be reverted immediately upon synchronisation."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"The edit enrolment action in the participants list will be displayed if if all following conditions are met:"}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The method ",(0,s.jsx)(n.code,{children:"allow_manage"})," returns true"]}),"\n",(0,s.jsxs)(n.li,{children:["The current user has the ",(0,s.jsx)(n.code,{children:"enrol/pluginname:manage"})," capability."]}),"\n"]})]}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function allow_manage(stdClass $instance) {\n    // Add any extra validation here.\n    return true;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"enrol_pluginroles_protected-bool",children:"enrol_plugin::roles_protected(): bool"}),"\n",(0,s.jsx)(n.p,{children:"Enrolment plugins can protect roles from being modified by any other plugin. Returning false will allow users to remove all roles assigned by this plugin. By default, this method returns true."}),"\n",(0,s.jsx)(n.p,{children:":::"}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"public function roles_protected() {\n    // Add any extra validation here if necessary.\n    return false;\n}\n"})})})]}),"\n",(0,s.jsx)(n.h2,{id:"standard-editing-ui",children:"Standard Editing UI"}),"\n",(0,s.jsx)(n.p,{children:"Moodle participants page has a standard editing UI for manual enrolments. To integrate a plugin into the start UI you need to implement the following methods:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enrol_plugin::use_standard_editing_ui()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enrol_plugin::edit_instance_form()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enrol_plugin::edit_instance_validation()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enrol_plugin::can_add_instance()"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enrol_plugin::add_instance()"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This means that the following functions from the plugin will be called to build the add/edit form, perform validation of the data and add standard navigation links to the manage enrolments page and course navigation."}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(i,{language:"php",children:c})})]}),"\n",(0,s.jsx)(n.h2,{id:"sending-a-welcome-email",children:"Sending a welcome email"}),"\n",(0,s.jsxs)(n.p,{children:["Some enrol methods has the support for sending welcome mesages to users. To grant the enrol messages are consistent acorrs enrolments methods, the enrol API provides the ",(0,s.jsx)(n.code,{children:"enrol_send_welcome_email_options"})," function. This method returns a list of all possible options for sending welcome email when the user enrol in a course and each option has a respective constant defined on ",(0,s.jsx)(n.strong,{children:"enrollib.php"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"define('ENROL_DO_NOT_SEND_EMAIL', 0); // Do not send the welcome email.\ndefine('ENROL_SEND_EMAIL_FROM_COURSE_CONTACT', 1); // Send welcome email from course contact.\ndefine('ENROL_SEND_EMAIL_FROM_KEY_HOLDER', 2); // Send welcome email from course key holder.\ndefine('ENROL_SEND_EMAIL_FROM_NOREPLY', 3); // Send welcome email from no reply.\n"})}),"\n",(0,s.jsxs)(h,{children:[(0,s.jsx)("summary",{children:"View example"}),(0,s.jsx)("div",{children:(0,s.jsx)(i,{language:"php",children:u})})]}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"/moodledevdocs/docs/4.2/apis/subsystems/enrol",children:"Enrolment API"})}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(f,{...e})}):f(e)}function y(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);