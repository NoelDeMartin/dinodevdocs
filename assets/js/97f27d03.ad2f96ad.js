"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[86385],{30723:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>c,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var o=t(74848),s=t(28453),i=t(78924);const l={title:"Question Types",tags:["Moodle App"]},r=void 0,d={id:"app/development/plugins-development-guide/examples/question-types",title:"Question Types",description:"You can implement custom question types using the CoreQuestionDelegate:",source:"@site/general/app/development/plugins-development-guide/examples/question-types.md",sourceDirName:"app/development/plugins-development-guide/examples",slug:"/app/development/plugins-development-guide/examples/question-types",permalink:"/moodledevdocs/general/app/development/plugins-development-guide/examples/question-types",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/general/app/development/plugins-development-guide/examples/question-types.md",tags:[{label:"Moodle App",permalink:"/moodledevdocs/general/tags/moodle-app"}],version:"current",lastUpdatedBy:"Noel De Martin",lastUpdatedAt:1715004871e3,frontMatter:{title:"Question Types",tags:["Moodle App"]},sidebar:"moodleapp",previous:{title:"Prefetch Handlers",permalink:"/moodledevdocs/general/app/development/plugins-development-guide/examples/prefetch-handlers"},next:{title:"Self Enrolment",permalink:"/moodledevdocs/general/app/development/plugins-development-guide/examples/self-enrolment"}},a={},p=[{value:"Other examples",id:"other-examples",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.A,{frontMatter:l,metadata:d}),"\n",(0,o.jsxs)(n.p,{children:["You can implement custom question types using the ",(0,o.jsx)(n.a,{href:"/moodledevdocs/general/app/development/plugins-development-guide/api-reference#corequestiondelegate",children:"CoreQuestionDelegate"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="db/mobile.php"',children:"$addons = [\n    \"qtype_YOURQTYPENAME\" => [\n        \"handlers\" => [\n            'YOURQTYPENAME' => [\n                'displaydata' => [\n                    'title' => 'YOURQTYPENAME question',\n                    'icon' => '/question/type/YOURQTYPENAME/pix/icon.gif',\n                    'class' => '',\n                ],\n                'delegate' => 'CoreQuestionDelegate',\n                'method' => 'mobile_get_YOURQTYPENAME',\n                'offlinefunctions' => [\n                    'mobile_get_YOURQTYPENAME' => [],\n                ],\n                'styles' => [\n                    'url' => '/question/type/YOURQTYPENAME/mobile/styles_app.css',\n                    'version' => '1.00',\n                ],\n            ],\n        ],\n        'lang' => [\n            ['pluginname', 'qtype_YOURQTYPENAME'],\n        ],\n    ],\n];\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="classes/output/mobile.php"',children:"class mobile {\n\n    public static function mobile_get_YOURQTYPENAME() {\n        global $OUTPUT, $CFG;\n\n        $html = $OUTPUT->render_from_template('qtype_YOURQTYPENAME/mobile', []);\n\n        return [\n            'templates' => [\n                [\n                    'id' => 'main',\n                    'html' => $html,\n                ],\n            ],\n            'javascript' => file_get_contents($CFG->dirroot . '/question/type/YOURQTYPENAME/mobile/mobile.js'),\n        ];\n    }\n\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-html",metastring:'handlebars title="templates/mobile.mustache"',children:'<section class="list qtype-YOURQTYPENAME-container qtype-YOURQTYPENAME" ion-list *ngIf="question.text || question.text === \'\'">\n    <ion-item class="addon-qtype-YOURQTYPENAME-container qtext">\n        <ion-label>\n            <core-format-text\n                [component]="component"\n                [componentId]="componentId"\n                [text]="question.text"\n                (afterRender)="questionRendered()">\n            </core-format-text>\n        </ion-label>\n    </ion-item>\n</section>\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",metastring:'title="mobile/mobile.js"',children:"const that = this;\nconst result = {\n    componentInit() {\n        if (!this.question) {\n            console.warn('Aborting because of no question received.');\n\n            return that.CoreQuestionHelperProvider.showComponentError(that.onAbort);\n        }\n\n        const div = document.createElement('div');\n\n        div.innerHTML = this.question.html;\n\n         // Get question questiontext.\n        const questiontext = div.querySelector('.qtext');\n\n        // Replace Moodle's correct/incorrect and feedback classes with our own.\n        // Only do this if you want to use the standard classes.\n        this.CoreQuestionHelperProvider.replaceCorrectnessClasses(div);\n        this.CoreQuestionHelperProvider.replaceFeedbackClasses(div);\n\n         // Treat the correct/incorrect icons.\n        this.CoreQuestionHelperProvider.treatCorrectnessIcons(div);\n\n        if (div.querySelector('.readonly') !== null) {\n            this.question.readonly = true;\n        }\n\n        if (div.querySelector('.feedback') !== null) {\n            this.question.feedback = div.querySelector('.feedback');\n            this.question.feedbackHTML = true;\n        }\n\n         this.question.text = this.CoreDomUtilsProvider.getContentsOfElement(div, '.qtext');\n\n        if (typeof this.question.text === 'undefined') {\n            this.logger.warn('Aborting because of an error parsing question.', this.question.name);\n\n            return this.CoreQuestionHelperProvider.showComponentError(this.onAbort);\n        }\n\n        // Called by the reference in html to (afterRender)=\"questionRendered()\".\n        this.questionRendered = function questionRendered() {\n            // Do stuff that needs the question rendered before it can run.\n        };\n\n        // Wait for the DOM to be rendered.\n        setTimeout(() => {\n            // Put stuff here that will be pulled from the rendered question.\n        });\n\n        return true;\n    }\n};\n\nresult;\n"})}),"\n",(0,o.jsx)(n.h2,{id:"other-examples",children:"Other examples"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/marcusgreen/moodle-qtype_TEMPLATE",children:"Question type plugin template"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/marcusgreen/moodle-qtype_gapfill",children:"Gapfill question type"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/marcusgreen/moodle-qtype_wordselect",children:"Wordselect question type"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/rezeau/moodle-qtype_regexp",children:"RegExp question type"})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}}}]);