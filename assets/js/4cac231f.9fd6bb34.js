"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[17452],{30917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var s=n(74848),c=n(28453),i=n(78924);const o={title:"Clock",tags:["Time","PSR-20","PSR","Unit testing","Testing"],description:"Fetching the current time"},a=void 0,l={id:"apis/core/clock/index",title:"Clock",description:"Fetching the current time",source:"@site/docs/apis/core/clock/index.md",sourceDirName:"apis/core/clock",slug:"/apis/core/clock/",permalink:"/moodledevdocs/docs/4.4/apis/core/clock/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/core/clock/index.md",tags:[{label:"Time",permalink:"/moodledevdocs/docs/4.4/tags/time"},{label:"PSR-20",permalink:"/moodledevdocs/docs/4.4/tags/psr-20"},{label:"PSR",permalink:"/moodledevdocs/docs/4.4/tags/psr"},{label:"Unit testing",permalink:"/moodledevdocs/docs/4.4/tags/unit-testing"},{label:"Testing",permalink:"/moodledevdocs/docs/4.4/tags/testing"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Clock",tags:["Time","PSR-20","PSR","Unit testing","Testing"],description:"Fetching the current time"},sidebar:"docs",previous:{title:"Calendar API",permalink:"/moodledevdocs/docs/4.4/apis/core/calendar/"},next:{title:"Conditional activities API",permalink:"/moodledevdocs/docs/4.4/apis/core/conditionalactivities/"}},r={},d=[{value:"Usage",id:"usage",level:2},{value:"Usage in standard classes",id:"usage-in-standard-classes",level:3},{value:"Usage via Constructor Injection",id:"usage-via-constructor-injection",level:3},{value:"Unit testing",id:"unit-testing",level:2},{value:"Incrementing clock",id:"incrementing-clock",level:3},{value:"Frozen clock",id:"frozen-clock",level:3},{value:"Custom clock",id:"custom-clock",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components},{Since:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Since",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{frontMatter:o,metadata:l}),"\n",(0,s.jsx)(n,{version:"4.4",issueNumber:"MDL-80838"}),"\n",(0,s.jsxs)(t.p,{children:["Moodle supports use of a ",(0,s.jsx)(t.a,{href:"https://php-fig.org/psr/psr20/",children:"PSR-20"})," compatible Clock interface, which should be accessed using Dependency Injection."]}),"\n",(0,s.jsxs)(t.p,{children:["This should be used instead of ",(0,s.jsx)(t.code,{children:"time()"})," to fetch the current time. This allows unit tests to mock time and therefore to test a variety of cases such as events happening at the same time, or setting an explicit time."]}),"\n",(0,s.jsx)(t.admonition,{title:"Recommended usage",type:"tip",children:(0,s.jsxs)(t.p,{children:["We recommend that the Clock Interface is used consistently in your code instead of using the standard ",(0,s.jsx)(t.code,{children:"time()"})," method."]})}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.p,{children:["The usage of the Clock extends the PSR-20 Clock Interface and adds a new convenience method, ",(0,s.jsx)(t.code,{children:"\\core\\clock::time(): int"}),", to simplify replacement of the global ",(0,s.jsx)(t.code,{children:"time()"})," method."]}),"\n",(0,s.jsx)(t.h3,{id:"usage-in-standard-classes",children:"Usage in standard classes"}),"\n",(0,s.jsxs)(t.p,{children:["Where the calling code is not instantiated via Dependency Injection itself, the simplest way to fetch the clock is using ",(0,s.jsx)(t.code,{children:"\\core\\di::get(\\core\\clock::class)"}),", for example:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Usage in legacy code"',children:"$clock = \\core\\di::get(\\core\\clock::class);\n\n// Fetch the current time as a \\DateTimeImmutable.\n$clock->now();\n\n// Fetch the current time as a Unix Time Stamp.\n$clock->time();\n"})}),"\n",(0,s.jsx)(t.h3,{id:"usage-via-constructor-injection",children:"Usage via Constructor Injection"}),"\n",(0,s.jsx)(t.p,{children:"The recommended approach is to have the Dependency Injector inject into the constructor of a class."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Usage in injected classes"',children:"namespace mod_example;\n\nclass post {\n    public function __construct(\n        protected readonly \\core\\clock $clock,\n        protected readonly \\moodle_database $db,\n    )\n\n    public function create_thing(\\stdClass $data): \\stdClass {\n        $data->timecreated = $this->clock->time();\n\n        $data->id = $this->db->insert_record('example_thing', $data);\n\n        return $data;\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"When using DI to fetch the class, the dependencies will automatically added to the constructor arguments:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Obtaining the injected class"',children:"$post = \\core\\di::get(post::class);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"unit-testing",children:"Unit testing"}),"\n",(0,s.jsx)(t.p,{children:"One of the most useful benefits to making consistent use of the Clock interface is to mock data within unit tests."}),"\n",(0,s.jsx)(t.p,{children:"When testing code which makes use of the Clock interface, you can replace the standard system clock implementation with a testing clock which suits your needs."}),"\n",(0,s.jsx)(t.admonition,{title:"Container Reset",type:"tip",children:(0,s.jsx)(t.p,{children:"The DI container is automatically reset at the end of every test, which ensures that your clock does not bleed into subsequent tests."})}),"\n",(0,s.jsxs)(t.p,{children:["Moodle provides two standard test clocks, but you are welcome to create any other, as long as it implements the ",(0,s.jsx)(t.code,{children:"\\core\\clock"})," interface."]}),"\n",(0,s.jsxs)(t.admonition,{type:"warning",children:[(0,s.jsxs)(t.p,{children:["When mocking the clock, you ",(0,s.jsx)(t.em,{children:"must"})," do so ",(0,s.jsx)(t.em,{children:"before"})," fetching your service."]}),(0,s.jsx)(t.p,{children:"Any injected value within your service will persist for the lifetime of that service."}),(0,s.jsxs)(t.p,{children:["Replacing the clock after fetching your service will have ",(0,s.jsx)(t.em,{children:"no"})," effect."]})]}),"\n",(0,s.jsx)(t.h3,{id:"incrementing-clock",children:"Incrementing clock"}),"\n",(0,s.jsx)(t.p,{children:"The incrementing clock increases the time by one second every time it is called. It can also be instantiated with a specific start time if preferred."}),"\n",(0,s.jsxs)(t.p,{children:["A helper method, ",(0,s.jsx)(t.code,{children:"mock_clock_with_incrementing(?int $starttime = null): \\core\\clock"}),", is provided within the standard testcase:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Obtaining the incrementing clock"',children:"class my_test extends \\advanced_testcase {\n    public function test_create_thing(): void {\n        // This class inserts data into the database.\n        $this->resetAfterTest(true);\n\n        $clock = $this->mock_clock_with_incrementing();\n\n        $post = \\core\\di::get(post::class);\n        $posta = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n        $postb = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n\n        // The incrementing clock automatically advanced by one second each time it is called.\n        $this->assertGreaterThan($postb->timecreated, $posta->timecreated);\n        $this->assertLessThan($clock->time(), $postb->timecreated);\n    }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"It is also possible to specify a start time for the clock;"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Setting the start time"',children:"$clock = $this->mock_clock_with_incrementing(12345678);\n"})}),"\n",(0,s.jsx)(t.h3,{id:"frozen-clock",children:"Frozen clock"}),"\n",(0,s.jsx)(t.p,{children:"The frozen clock uses a time which does not change, unless manually set. This can be useful when testing code which must handle time-based resolutions."}),"\n",(0,s.jsxs)(t.p,{children:["A helper method, ",(0,s.jsx)(t.code,{children:"mock_clock_with_frozen(?int $time = null): \\core\\clock"}),", is provided within the standard testcase:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Obtaining and using the frozen clock"',children:"class my_test extends \\advanced_testcase {\n    public function test_create_thing(): void {\n        // This class inserts data into the database.\n        $this->resetAfterTest(true);\n\n        $clock = $this->mock_clock_with_frozen();\n\n        $post = \\core\\di::get(post::class);\n        $posta = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n        $postb = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n\n        // The frozen clock keeps the same time.\n        $this->assertEquals($postb->timecreated, $posta->timecreated);\n        $this->assertEquals($clock->time(), $postb->timecreated);\n\n        // The time can be manually set.\n        $clock->set_to(12345678);\n        $postc = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n\n        // The frozen clock keeps the same time.\n        $this->assertEquals(12345678, $postc->timecreated);\n\n        // And can also be bumped.\n        $clock->set_to(0);\n        $this->assertEquals(0, $clock->time());\n\n        // Bump the current time by 1 second.\n        $clock->bump();\n        $this->assertEquals(1, $clock->time());\n\n        // Bump by 4 seconds.\n        $clock->bump(4);\n        $this->assertEquals(5, $clock->time());\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h3,{id:"custom-clock",children:"Custom clock"}),"\n",(0,s.jsx)(t.p,{children:"If the standard cases are not suitable for you, then you can create a custom clock and inject it into the DI container."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",metastring:'title="Creating a custom clock"',children:"class my_clock implements \\core\\clock {\n    public int $time;\n\n    public function __construct() {\n        $this->time = time();\n    }\n\n    public function now(): \\DateTimeImmutable {\n        $time = new \\DateTimeImmutable('@' . $this->time);\n        $this->time = $this->time += 5;\n\n        return $time;\n    }\n\n    public function time(): int {\n        return $this->now()->getTimestamp();\n    }\n}\n\nclass my_test extends \\advanced_testcase {\n    public function test_my_thing(): void {\n        $clock = new my_clock();\n        \\core\\di:set(\\core\\clock::class, $clock);\n\n        $post = \\core\\di::get(post::class);\n        $posta = $post->create_thing((object) [\n            'name' => 'a',\n        ]);\n    }\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);