"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[84651],{3861:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>l,toc:()=>c});var i=o(74848),s=o(28453),n=o(78924);const d={title:"Editor API",tags:[],documentationDraft:!0},r=void 0,l={id:"apis/subsystems/editor/index",title:"Editor API",description:"The editor API lets you control Moodle text editors. It can be found in lib/editorlib.php.",source:"@site/versioned_docs/version-4.2/apis/subsystems/editor/index.md",sourceDirName:"apis/subsystems/editor",slug:"/apis/subsystems/editor/",permalink:"/moodledevdocs/docs/4.2/apis/subsystems/editor/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.2/apis/subsystems/editor/index.md",tags:[],version:"4.2",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:168325581e4,frontMatter:{title:"Editor API",tags:[],documentationDraft:!0},sidebar:"docs",previous:{title:"Check API",permalink:"/moodledevdocs/docs/4.2/apis/subsystems/check/"},next:{title:"Enrolment API",permalink:"/moodledevdocs/docs/4.2/apis/subsystems/enrol"}},a={},c=[{value:"How to set up a text editor",id:"how-to-set-up-a-text-editor",level:2},{value:"Editor options",id:"editor-options",level:2},{value:"General options",id:"general-options",level:3},{value:"Atto-specific options",id:"atto-specific-options",level:3}];function p(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.A,{frontMatter:d,metadata:l}),"\n",(0,i.jsxs)(t.p,{children:["The editor API lets you control Moodle text editors. It can be found in ",(0,i.jsx)(t.code,{children:"lib/editorlib.php"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"important",children:(0,i.jsx)(t.p,{children:"Normally you do not need to use this API directly because you can include editors as part of a Moodle form, which will automatically set up the editor for you."})}),"\n",(0,i.jsx)(t.h2,{id:"how-to-set-up-a-text-editor",children:"How to set up a text editor"}),"\n",(0,i.jsx)(t.p,{children:"To set up a text editor on an existing HTML text area field:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Call function ",(0,i.jsx)(t.code,{children:"editors_get_preferred_editor()"}),", which will return an object of the texteditor class."]}),"\n",(0,i.jsxs)(t.li,{children:["Call function ",(0,i.jsx)(t.code,{children:"use_editor()"})," to enable the editor for the text area."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["For example, assuming there is an HTML text area with id ",(0,i.jsx)(t.code,{children:"mytextareaid"}),":"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"$editor = editors_get_preferred_editor(FORMAT_HTML);\n$editor->use_editor('mytextareaid');\n"})}),"\n",(0,i.jsx)(t.h2,{id:"editor-options",children:"Editor options"}),"\n",(0,i.jsx)(t.p,{children:"The use_editor function allows an options array to be supplied."}),"\n",(0,i.jsx)(t.h3,{id:"general-options",children:"General options"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"context"}),": set to the current context object"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"enable_filemanagement"}),": set false to disable the file management plugin"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"autosave"}),": set false to disable autosave"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"atto-specific-options",children:"Atto-specific options"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"toolbar"}),": set to override which icons appear on the toolbar (normally it uses the admin setting - this is for special cases for example if you want a minimal editor in a particular plugin)."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"The following example will cause atto to show the four buttons indicated."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"$attobuttons = 'style1 = bold, italic' .  PHP_EOL . 'list = unorderedlist, orderedlist';\n$editor->use_editor($id, [\n    'context' => $context,\n    'autosave' => false,\n    'atto:toolbar' => $attobuttons\n], [\n    'return_types' => FILE_EXTERNAL,\n]);\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);