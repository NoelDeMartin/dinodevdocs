"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[53982],{3695:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var o=a(74848),n=a(28453),r=a(78924);const l={title:"Modal Dialogues",tags:["Javascript","Modal","Dialogue"]},i=void 0,d={id:"guides/javascript/modal/index",title:"Modal Dialogues",description:"The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle.",source:"@site/versioned_docs/version-4.1/guides/javascript/modal/index.md",sourceDirName:"guides/javascript/modal",slug:"/guides/javascript/modal/",permalink:"/moodledevdocs/docs/4.1/guides/javascript/modal/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.1/guides/javascript/modal/index.md",tags:[{label:"Javascript",permalink:"/moodledevdocs/docs/4.1/tags/javascript"},{label:"Modal",permalink:"/moodledevdocs/docs/4.1/tags/modal"},{label:"Dialogue",permalink:"/moodledevdocs/docs/4.1/tags/dialogue"}],version:"4.1",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Modal Dialogues",tags:["Javascript","Modal","Dialogue"]},sidebar:"docs",previous:{title:"jQuery",permalink:"/moodledevdocs/docs/4.1/guides/javascript/jquery/"},next:{title:"Modules",permalink:"/moodledevdocs/docs/4.1/guides/javascript/modules"}},s={},c=[{value:"Creating a basic modal",id:"creating-a-basic-modal",level:2},{value:"Using the &#39;trigger&#39;",id:"using-the-trigger",level:3},{value:"Instantiating modal types",id:"instantiating-modal-types",level:2},{value:"Creating a custom modal type",id:"creating-a-custom-modal-type",level:2}];function m(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.R)(),...e.components},{Since:a}=t;return a||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Since",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.A,{frontMatter:l,metadata:d}),"\n",(0,o.jsx)(a,{version:"3.2"}),"\n",(0,o.jsx)(t.p,{children:"The use of modal modules provides a simplified developer experience for creating modal dialogues within Moodle."}),"\n",(0,o.jsx)(t.p,{children:"The module attempts to ensure that all accessibility requirements are met, including applying the correct aria roles, focus control, aria hiding background elements, and locking keyboard navigation."}),"\n",(0,o.jsx)(t.p,{children:"Modals will fire events for common actions that occur within the modal for other code to listen to and react accordingly."}),"\n",(0,o.jsx)(t.p,{children:"Moodle ships with several standard modal types for you to re-use including a simple cancel modal, and a save/cancel modal."}),"\n",(0,o.jsx)(t.h2,{id:"creating-a-basic-modal",children:"Creating a basic modal"}),"\n",(0,o.jsxs)(t.p,{children:["The Modal Factory can be used to instantiate a new Modal. The factory provides a ",(0,o.jsx)(t.code,{children:"create"})," function, accepting some configuration which is used to create the modal instance, and an optional ",(0,o.jsx)(t.em,{children:"trigger element"}),". The ",(0,o.jsx)(t.code,{children:"create"})," function returns a Promise that is resolved with the created modal."]}),"\n",(0,o.jsx)(t.p,{children:"The configuration is provided as an object with key/value pairs. The options are:"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:(0,o.jsx)(t.strong,{children:"key"})}),(0,o.jsx)(t.th,{children:(0,o.jsx)(t.strong,{children:"description"})})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"title"}),(0,o.jsx)(t.td,{children:"the title to display in the modal header - note: this will render HTML"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"body"}),(0,o.jsx)(t.td,{children:"the main content to be rendered in the modal body"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"footer"}),(0,o.jsx)(t.td,{children:"the content to be rendered in the modal footer"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"type"}),(0,o.jsx)(t.td,{children:"one of the modal types registered with the factory"})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:"large"}),(0,o.jsx)(t.td,{children:"a boolean to indicate if the modal should be wider than the default size"})]})]})]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Basic instantiation of a modal"',children:"import ModalFactory from 'core/modal_factory';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: '<p>Example body content</p>',\n        footer: 'An example footer content',\n    });\n    modal.show();\n\n    // ...\n};\n"})}),"\n",(0,o.jsx)(t.p,{children:"Where text, language strings, or HTML is accepted, a Promise can also be provided."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Using a template to render the body"',children:"import ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: Templates.render('mod_example/example_modal_content', {id: 42}),\n        footer: 'An example footer content',\n    });\n    modal.show();\n\n    // ...\n};\n"})}),"\n",(0,o.jsx)(t.h3,{id:"using-the-trigger",children:"Using the 'trigger'"}),"\n",(0,o.jsxs)(t.p,{children:["Moodle Modals created using the Modal Factory support an optional ",(0,o.jsx)(t.em,{children:"trigger"})," element. Whilst this is available, it is no longer recommended and support for it will likely be removed in Moodle 4.3."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Providing a trigger"',children:"import ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport $ from 'jquery';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        title: 'test title',\n        body: Templates.render('mod_example/example_modal_content', {id: 42}),\n        footer: 'An example footer content',\n    }, $('a.item-delete'));\n\n    // ...\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"instantiating-modal-types",children:"Instantiating modal types"}),"\n",(0,o.jsx)(t.p,{children:"A number of commonly used modals are available as standard, these include:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"a Delete / Cancel modal"}),"\n",(0,o.jsx)(t.li,{children:"a Save / Cancel modal"}),"\n",(0,o.jsx)(t.li,{children:"a Cancel modal"}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["To use these modals you can provide the ",(0,o.jsx)(t.code,{children:"type"})," argument to the ",(0,o.jsx)(t.code,{children:"ModalFactory.create"})," method. This argument takes a string value and values can be found for these modals in ",(0,o.jsx)(t.code,{children:"ModalFactory.TYPES"}),"."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Creating a save/cancel modal"',children:"import ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    // ...\n};\n"})}),"\n",(0,o.jsx)(t.p,{children:"Each type of modal may fire additional events to allow your code to handle the new functionality being offered -- for example, if you wanted to have a save/cancel modal that you did some form validation on before saving you could do something like the example below."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Listening to a Save event"',children:"import ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\n\nexport const init = async () => {\n    const modal = await ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: 'test title',\n        body: getString('confirmchange', 'mod_example'),\n    });\n\n    modal.getRoot().on(ModalEvents.save, (e) => {\n        // ...\n    })\n\n    // ...\n};\n"})}),"\n",(0,o.jsx)(t.h2,{id:"creating-a-custom-modal-type",children:"Creating a custom modal type"}),"\n",(0,o.jsx)(t.p,{children:"In some situations it is desirable to write a brand new modal."}),"\n",(0,o.jsx)(t.p,{children:"There are two parts to this:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["a new Modal class which extends the ",(0,o.jsx)(t.code,{children:"core/modal"})," class; and"]}),"\n",(0,o.jsx)(t.li,{children:"a template"}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["Creating the Modal class is as simple as extending the ",(0,o.jsx)(t.code,{children:"core/modal"})," class, providing a ",(0,o.jsx)(t.code,{children:"TYPE"})," property, and registering the modal with the modal factory."]}),"\n",(0,o.jsxs)(t.p,{children:["We highly recommend declaring the ",(0,o.jsx)(t.em,{children:"template"})," as a static property on the class too and this will be required from Moodle 4.3 onwards."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="mod/example/amd/src/my_modal.js"',children:"import Modal from 'core/modal';\nimport ModalFactory from 'core/modal_factory';\n\nexport default MyModal extends Modal {\n    static TYPE = \"mod_example/my_modal\";\n    static TEMPLATE = \"mod_example/my_modal\";\n}\n\nlet registered = false;\nif (!registered) {\n    ModalRegistry.register(MyModal.TYPE, MyModal, MyModal.TEMPLATE);\n    registered = true;\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["The template should extend the ",(0,o.jsx)(t.code,{children:"core/modal"})," core template and can override any of the title, body, or footer regions, for example:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-mustache",metastring:'title="mod/example/templates/my_modal.mustache"',children:'{{< core/modal }}\n    {{$title}}{{#str}} login {{/str}}{{/title}}\n    {{$body}}\n        <div class="container">\n            <form>\n                <div class="form-group row">\n                    <label for="inputEmail" class="col-sm-2 col-form-label">{{#str}} email {{/str}}</label>\n                    <div class="col-sm-10">\n                        <input type="email" class="form-control" id="inputEmail" placeholder="{{#str}} email {{/str}}">\n                    </div>\n                </div>\n                <div class="form-group row">\n                    <label for="inputPassword" class="col-sm-2 col-form-label">{{#str}} password {{/str}}</label>\n                    <div class="col-sm-10">\n                        <input type="password" class="form-control" id="inputPassword" placeholder="{{#str}} password {{/str}}">\n                    </div>\n                </div>\n            </form>\n        </div>\n    {{/body}}\n    {{$footer}}\n        <button type="button" class="btn btn-primary" data-action="login">{{#str}} login {{/str}}</button>\n        <button type="button" class="btn btn-secondary" data-action="cancel">{{#str}} cancel {{/str}}</button>\n    {{/footer}}\n{{/ core/modal }}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Once defined, the new modal can be instantiated using the Modal Factory, for example:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",metastring:'title="Instantiating a custom modal"',children:"import ModalFactory from 'core/modal_factory';\nimport MyModal from 'mod_example/my_modal';\n\nexport default const init = async() => {\n    // ...\n    const modal = await ModalFactory.create({\n        type: MyModal.TYPE,\n    });\n\n    modal.show();\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}}}]);