"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[120],{4679:e=>{e.exports=JSON.parse('{"label":"Behaviour testing","permalink":"/moodledevdocs/general/tags/behaviour-testing","allTagsPath":"/moodledevdocs/general/tags","count":6,"items":[{"id":"app/development/testing/acceptance-testing","title":"Acceptance testing for the Moodle App","description":"In order to run tests that carry out automated functionality testing for the Moodle App, you can write Acceptance tests. This can be useful if you want to test plugins that are compatible with the app, or you\'re contributing to the app core. Behat tests for the app work the same way as tests for Moodle core, but they are not run as part of a normal Behat execution and there are some differences that we\'ll go through in this page.","permalink":"/moodledevdocs/general/app/development/testing/acceptance-testing"},{"id":"development/tools/behat/index","title":"Behat","description":"This page describes the internals of Behat and the integration with Moodle.","permalink":"/moodledevdocs/general/development/tools/behat/"},{"id":"development/tools/behat/browsers/index","title":"Browsers","description":"This page complements Behat providing info about how to run the acceptance tests suite in different browsers.","permalink":"/moodledevdocs/general/development/tools/behat/browsers/"},{"id":"development/tools/behat/running","title":"Running acceptance tests","description":"Moodle uses Behat, a php framework for automated functional testing, as part of a suite of testing tools.","permalink":"/moodledevdocs/general/development/tools/behat/running"},{"id":"development/tools/behat/browsers/supportedbrowsers","title":"Working combinations of OS+Browser+selenium","description":"As OS, Browsers and Selenium keeps updating, some combination might fail on different Moodle releases.","permalink":"/moodledevdocs/general/development/tools/behat/browsers/supportedbrowsers"},{"id":"development/tools/behat/writing","title":"Writing acceptance tests","description":"This documentation gives some hints on writing behat tests for Moodle core, and for plugins. The focus of the documentation is on behat tests for plugins. Behat Features and Scenarios are written in a natural language, and should","permalink":"/moodledevdocs/general/development/tools/behat/writing"}],"unlisted":false}')}}]);