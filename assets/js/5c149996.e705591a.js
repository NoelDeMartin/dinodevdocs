"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[3943],{85642:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>v,frontMatter:()=>t,metadata:()=>c,toc:()=>d});var o=s(74848),i=s(28453),r=s(78924);const t={title:"File Converters",tags:["File","core_file","file_converter","API","PDF","Conversion","Document"]},l=void 0,c={id:"apis/subsystems/files/converter",title:"File Converters",description:"Users are able to submit a wide range of files, and it is a common requirement to convert these to alternative formats.",source:"@site/versioned_docs/version-4.1/apis/subsystems/files/converter.md",sourceDirName:"apis/subsystems/files",slug:"/apis/subsystems/files/converter",permalink:"/moodledevdocs/docs/4.1/apis/subsystems/files/converter",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.1/apis/subsystems/files/converter.md",tags:[{label:"File",permalink:"/moodledevdocs/docs/4.1/tags/file"},{label:"core_file",permalink:"/moodledevdocs/docs/4.1/tags/core-file"},{label:"file_converter",permalink:"/moodledevdocs/docs/4.1/tags/file-converter"},{label:"API",permalink:"/moodledevdocs/docs/4.1/tags/api"},{label:"PDF",permalink:"/moodledevdocs/docs/4.1/tags/pdf"},{label:"Conversion",permalink:"/moodledevdocs/docs/4.1/tags/conversion"},{label:"Document",permalink:"/moodledevdocs/docs/4.1/tags/document"}],version:"4.1",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1670648742e3,frontMatter:{title:"File Converters",tags:["File","core_file","file_converter","API","PDF","Conversion","Document"]},sidebar:"docs",previous:{title:"File Browser API",permalink:"/moodledevdocs/docs/4.1/apis/subsystems/files/browsing"},next:{title:"File API internals",permalink:"/moodledevdocs/docs/4.1/apis/subsystems/files/internals"}},a={},d=[{value:"Using the file converter API",id:"using-the-file-converter-api",level:2},{value:"Polling for updates on an existing conversion",id:"polling-for-updates-on-an-existing-conversion",level:3},{value:"Checking status of a conversion",id:"checking-status-of-a-conversion",level:3},{value:"Fetching the target file",id:"fetching-the-target-file",level:3},{value:"See also",id:"see-also",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.A,{frontMatter:t,metadata:c}),"\n",(0,o.jsx)(n.p,{children:"Users are able to submit a wide range of files, and it is a common requirement to convert these to alternative formats."}),"\n",(0,o.jsxs)(n.p,{children:["The most obvious example of this in Moodle core is in the ",(0,o.jsx)(n.code,{children:"assignfeedback_editpdf"})," plugin which allows for conversion from a variety of document types into PDF to facilitate annotation."]}),"\n",(0,o.jsx)(n.p,{children:"The file converters distributed with Moodle currently are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Unoconv"}),"\n",(0,o.jsx)(n.li,{children:"Google Drive"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The file converter API allows for conversion via multiple plugins and will automatically fallback to another suitable plugin upon failure."}),"\n",(0,o.jsx)(n.p,{children:"The API is designed to be called asynchronously as many cloud services offering document conversion offer an asynchronous API themselves."}),"\n",(0,o.jsx)(n.h2,{id:"using-the-file-converter-api",children:"Using the file converter API"}),"\n",(0,o.jsxs)(n.p,{children:["A file conversion is performed by the ",(0,o.jsx)(n.code,{children:"core_files\\converter"})," API and a single conversion is represented by the ",(0,o.jsx)(n.code,{children:"core\\files\\conversion"})," class."]}),"\n",(0,o.jsxs)(n.p,{children:["Individual file conversions should always be accessed by the ",(0,o.jsx)(n.code,{children:"core_files\\converter"})," API."]}),"\n",(0,o.jsxs)(n.p,{children:["A file conversion is fetched or created by calling the ",(0,o.jsx)(n.code,{children:"start_conversion"})," function on the converter API and passing in an existing ",(0,o.jsx)(n.code,{children:"stored_file"})," record, along with the target format."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="Starting a new conversion"',children:"$converter = new \\core_files\\converter();\n$conversion = $converter->start_conversion($file, 'pdf');\n"})}),"\n",(0,o.jsx)(n.p,{children:"If an existing file conversion matching the file and target format exists, the conversion record for this file will be returned, otherwise a new conversion is created and returned."}),"\n",(0,o.jsx)(n.p,{children:"To force a fresh conversion, a third boolean parameter can be passed, though this should not normally be necessary."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="Forcing a conversion to be performed again"',children:"$converter = new \\core_files\\converter();\n$conversion = $converter->start_conversion($file, 'pdf', true);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"polling-for-updates-on-an-existing-conversion",children:"Polling for updates on an existing conversion"}),"\n",(0,o.jsxs)(n.p,{children:["When the ",(0,o.jsx)(n.code,{children:"start_conversion"})," function is called, it automatically polls for any update on the conversion so it should not normally be necessary to poll the status separately."]}),"\n",(0,o.jsx)(n.p,{children:"It is however possible to do so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="Polling the API for the status of a conversino"',children:"$converter = new \\core_files\\converter();\n$conversion = $converter->start_conversion($file, 'pdf');\n$converter->poll_conversion($conversion);\n"})}),"\n",(0,o.jsx)(n.h3,{id:"checking-status-of-a-conversion",children:"Checking status of a conversion"}),"\n",(0,o.jsx)(n.p,{children:"File conversions can have one of four states:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"STATUS_PENDING"})," - The conversion has not yet started;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"STATUS_IN_PROGRESS"})," - A conversion has been picked up by a file converter and is currently in progress;"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"STATUS_COMPLETE"})," - The conversion was successful and the converted file is available; and"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"STATUS_FAILED"})," - All attempts to convert the file have failed."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The conversion API provides a way to check the status of the conversion with the ",(0,o.jsx)(n.code,{children:"$conversion->get_status()"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="Fetching status"',children:"$converter = new \\core_files\\converter();\n$conversion = $converter->start_conversion($file, 'pdf');\n\nswitch ($conversion->get_status()) {\n    case \\core_files\\conversion::STATUS_COMPLETE:\n        // The file is ready. Do something with it.\n    case \\core_files\\conversion::STATUS_PENDING:\n    case \\core_files\\conversion::STATUS_IN_PROGRESS:\n        // Conversion still ongoing. Display spinner to the user.\n    case \\core_files\\conversion::STATUS_FAILED:\n        // Permanent failure - handle to the user.\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"fetching-the-target-file",children:"Fetching the target file"}),"\n",(0,o.jsxs)(n.p,{children:["Following a conversion, the target file is stored as a ",(0,o.jsx)(n.code,{children:"stored_file"})," record and can be fetched for consumption elsewhere in your API:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",metastring:'title="Fetching the new file"',children:"if ($conversion->get_status() === \\core_files\\conversion::STATUS_COMPLETE) {\n    $file = $conversion->get_destfile();\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Creating a new ",(0,o.jsx)(n.a,{href:"/moodledevdocs/docs/4.1/apis/plugintypes/fileconverter/",children:"file converter plugin"})]}),"\n"]})]})}function v(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);