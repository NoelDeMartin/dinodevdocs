"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[79946],{36:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=o(74848),t=o(28453),s=o(78924);const a={title:"Hooks API",tags:["hooks","API","core"]},l=void 0,c={id:"apis/core/hooks/index",title:"Hooks API",description:"This page describes the Hooks API which is a replacement for some of the lib.php based one-to-many",source:"@site/versioned_docs/version-4.3/apis/core/hooks/index.md",sourceDirName:"apis/core/hooks",slug:"/apis/core/hooks/",permalink:"/moodledevdocs/docs/4.3/apis/core/hooks/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.3/apis/core/hooks/index.md",tags:[{label:"hooks",permalink:"/moodledevdocs/docs/4.3/tags/hooks"},{label:"API",permalink:"/moodledevdocs/docs/4.3/tags/api"},{label:"core",permalink:"/moodledevdocs/docs/4.3/tags/core"}],version:"4.3",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Hooks API",tags:["hooks","API","core"]},sidebar:"docs",previous:{title:"Advanced grading API",permalink:"/moodledevdocs/docs/4.3/apis/core/grading/"},next:{title:"HTML Writer API",permalink:"/moodledevdocs/docs/4.3/apis/core/htmlwriter/"}},r={},d=[{value:"General concepts",id:"general-concepts",level:2},{value:"Mapping to PSR-14",id:"mapping-to-psr-14",level:3},{value:"Hook emitter",id:"hook-emitter",level:3},{value:"Hook instance",id:"hook-instance",level:3},{value:"Hook callback",id:"hook-callback",level:3},{value:"Hooks overview page",id:"hooks-overview-page",level:3},{value:"Adding new hooks",id:"adding-new-hooks",level:2},{value:"Example of hook creation",id:"example-of-hook-creation",level:3},{value:"Registering of hook callbacks",id:"registering-of-hook-callbacks",level:2},{value:"Example of hook callback registration",id:"example-of-hook-callback-registration",level:3},{value:"Deprecation of legacy lib.php callbacks",id:"deprecation-of-legacy-libphp-callbacks",level:2},{value:"Example how to migrate legacy callback",id:"example-how-to-migrate-legacy-callback",level:2},{value:"Hooks which contain data",id:"hooks-which-contain-data",level:2},{value:"Hooks which can be stopped",id:"hooks-which-can-be-stopped",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components},{Since:o}=n;return o||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Since",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.A,{frontMatter:a,metadata:c}),"\n",(0,i.jsx)(o,{version:"4.3",issueNumber:"MDL-74954"}),"\n",(0,i.jsxs)(n.p,{children:["This page describes the Hooks API which is a replacement for some of the lib.php based one-to-many\n",(0,i.jsx)(n.a,{href:"https://docs.moodle.org/dev/Callbacks",children:"plugin callbacks"})," implementing on\n",(0,i.jsx)(n.a,{href:"https://www.php-fig.org/psr/psr-14/",children:"PSR-14"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The most common use case for hooks is to allow customisation of standard plugins or core functionality\nthrough hook callbacks in local plugins. For example adding a custom institution password\npolicy that applies to all enabled authentication plugins through a new local plugin."}),"\n",(0,i.jsx)(n.h2,{id:"general-concepts",children:"General concepts"}),"\n",(0,i.jsx)(n.h3,{id:"mapping-to-psr-14",children:"Mapping to PSR-14"}),"\n",(0,i.jsx)(n.p,{children:"Moodle does not allow camelCase for naming of classes and method and Moodle already has events,\nhowever the PSR-14 adherence has higher priority here."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"PSR-14"}),(0,i.jsx)(n.th,{children:"Hooks"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Event"}),(0,i.jsx)(n.td,{children:"Hook"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Listener"}),(0,i.jsx)(n.td,{children:"Hook callback"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Emitter"}),(0,i.jsx)(n.td,{children:"Hook emitter"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Dispatcher"}),(0,i.jsx)(n.td,{children:"Hook dispatcher (implemented in Hook manager)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Listener Provider"}),(0,i.jsx)(n.td,{children:"Hook callback provider (implemented in Hook manager)"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"hook-emitter",children:"Hook emitter"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.em,{children:"Hook emitter"})," is a place in code where core or a plugin needs to send or receive information\nto/from any other plugins. The exact type of information flow facilitated by hooks is not defined."]}),"\n",(0,i.jsx)(n.h3,{id:"hook-instance",children:"Hook instance"}),"\n",(0,i.jsxs)(n.p,{children:["Information passed between subsystem and plugins is encapsulated in arbitrary PHP class instances.\nThese can be in any namespace, but generally speaking they should be placed in the ",(0,i.jsx)(n.code,{children:"some_component\\hook\\*"}),"\nnamespace. Where possible, hooks are expected to implement the ",(0,i.jsx)(n.code,{children:"core\\hook\\described_hook"})," interface."]}),"\n",(0,i.jsxs)(n.p,{children:["The names of hook classes should follow the standard pattern of general to more specific, this groups\nhooks for the same item when sorting alphabetically. For example ",(0,i.jsx)(n.code,{children:"core\\hook\\course_delete_pre"})," instead\nof ",(0,i.jsx)(n.code,{children:"pre_course_delete"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"hook-callback",children:"Hook callback"}),"\n",(0,i.jsx)(n.p,{children:"The code executing a hook does not know in advance which plugin is going to react to a hook."}),"\n",(0,i.jsxs)(n.p,{children:["Moodle maintains an ordered list of callbacks for each class of hook. Any plugin is free to register\nits own hook callbacks by creating a ",(0,i.jsx)(n.code,{children:"db/hooks.php"})," file. The specified plugin callback method is called\nwhenever a relevant hook is dispatched."]}),"\n",(0,i.jsx)(n.h3,{id:"hooks-overview-page",children:"Hooks overview page"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Hooks overview page"})," lists all hooks that may be triggered in the system together with all\nregistered callbacks. It can be accessed by developers and administrators from the Site\nadministration menu."]}),"\n",(0,i.jsx)(n.p,{children:"This page is useful especially when adding custom local plugins with hook callbacks that modify\nstandard Moodle behaviour."}),"\n",(0,i.jsx)(n.p,{children:"In special cases administrators may override default hook callback priorities or disable some unwanted\ncallbacks completely:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/config.php"',children:"$CFG->hooks_callback_overrides = [\n    \\mod_activity\\hook\\installation_finished::class => [\n        'test_otherplugin\\\\callbacks::activity_installation_finished' => ['disabled' => true],\n    ],\n];\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The hooks overview page will automatically list any hook which is placed inside any ",(0,i.jsx)(n.code,{children:"*\\hook\\*"})," namespace within any Moodle component.\nIf you define a hook which is ",(0,i.jsx)(n.em,{children:"not"})," in this namespace then you ",(0,i.jsx)(n.strong,{children:"must"})," also define a new ",(0,i.jsx)(n.code,{children:"\\core\\hook\\discovery_agent"})," implementation in ",(0,i.jsx)(n.code,{children:"[component]\\hooks"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"adding-new-hooks",children:"Adding new hooks"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Developer first identifies a place where they need to ask or inform other plugins about something."}),"\n",(0,i.jsxs)(n.li,{children:["Depending on the location a new class implementing ",(0,i.jsx)(n.code,{children:"core\\hook\\described_hook"})," is added to ",(0,i.jsx)(n.code,{children:"core\\hook\\*"})," or\n",(0,i.jsx)(n.code,{children:"some_plugin\\hook\\*"})," namespace as appropriate."]}),"\n",(0,i.jsxs)(n.li,{children:["Optionally the developer may wish to allow the callback to stop any subsequent callbacks from receiving the object.\nIf so, then the object should implement the ",(0,i.jsx)(n.code,{children:"Psr\\EventDispatcher\\StoppableEventInterface"})," interface."]}),"\n",(0,i.jsx)(n.li,{children:"Optionally if any data needs to be sent to hook callbacks, the developer may add internal hook\nconstructor, some instance properties for data storage and public methods for data access from callbacks."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Hook classes may be any class you like. When designing a new Hook, you should think about how consumers may wish to change the data they are passed."}),"\n",(0,i.jsx)(n.p,{children:"All hook classes should be defined as final, if needed traits can help with code reuse in similar hooks."}),"\n",(0,i.jsxs)(n.admonition,{title:"Hooks not located in standard locations",type:"important",children:[(0,i.jsxs)(n.p,{children:["If you define a hook which is ",(0,i.jsx)(n.em,{children:"not"})," in the ",(0,i.jsx)(n.code,{children:"[component]\\hook\\*"})," namespace then you ",(0,i.jsx)(n.strong,{children:"must"})," also define a new ",(0,i.jsx)(n.code,{children:"\\core\\hook\\discovery_agent"})," implementation in ",(0,i.jsx)(n.code,{children:"[component]\\hooks"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/mod/example/classes/hooks.php"',children:"<?php\n\nnamespace mod_example;\n\nclass hooks implements \\core\\hook\\hook_discovery_agent {\n    public static function discover_hooks(): array {\n        return [\n            [\n                'class' => \\mod_example\\local\\entitychanges\\create_example::class,\n                'description' => 'A hook fired when an example was created',\n            ],\n        ];\n    }\n}\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"example-of-hook-creation",children:"Example of hook creation"}),"\n",(0,i.jsx)(n.p,{children:"Imagine mod_activity plugin wants to notify other plugins that it finished installation,\nthen mod_activity plugin developer adds a new hook and calls it at the end of plugin\ninstallation process."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/mod/activity/classes/hook/installation_finished.php"',children:"<?php\nnamespace mod_activity\\hook;\n\nclass installation_finished implements \\core\\hook\\described_hook {\n    public static function get_hook_description(): string {\n        return 'Hook dispatched at the very end of installation of mod_activity plugin.';\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/mod/activity/db/install.php"',children:"<?php\nfunction xmldb_activity_install() {\n   $hook = new \\mod_activity\\hook\\installation_finished();\n   \\core\\hook\\manager::get_instance()->dispatch($hook);\n}\n\n"})}),"\n",(0,i.jsx)(n.h2,{id:"registering-of-hook-callbacks",children:"Registering of hook callbacks"}),"\n",(0,i.jsxs)(n.p,{children:["Any plugin is free to register callbacks for all core and plugin hooks.\nThe registration is done by adding a ",(0,i.jsx)(n.code,{children:"db/hooks.php"})," file to plugin.\nCallbacks ",(0,i.jsx)(n.strong,{children:"must"}),' be provided as PHP callable strings in the form of "some\\class\\name::static_method".']}),"\n",(0,i.jsx)(n.p,{children:"Hook callbacks are executed in the order of their priority from highest to lowest.\nAny guidelines for callback priority should be described in hook descriptions if necessary."}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["Callbacks ",(0,i.jsx)(n.em,{children:"are executed during system installation and all upgrades"}),", the callback\nmethods must verify the plugin is in correct state. Often the easiest way is to\nuse function during_initial_install() or version string from the plugin configuration."]})}),"\n",(0,i.jsx)(n.h3,{id:"example-of-hook-callback-registration",children:"Example of hook callback registration"}),"\n",(0,i.jsx)(n.p,{children:"First developer needs to add a new static method to some class that accepts instance of\na hook as parameter."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/local/stuff/classes/local/hook_callbacks.php"',children:"<?php\nnamespace local_stuff\\local;\nuse \\mod_activity\\hook\\installation_finished;\n\nclass hook_callbacks {\n    public static function activity_installation_finished(installation_finished $hook): void {\n        if (during_initial_install()) {\n            return;\n        }\n        if (!get_config('local_stuff', 'version') {\n            return;\n        }\n        // Do something...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then developer has to register this new method as the hook callback by adding it to the db/hooks.php file."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/local/stuff/db/hooks.php"',children:"<?php\n$callbacks = [\n    [\n        'hook' => mod_activity\\hook\\installation_finished::class,\n        'callback' => local_stuff\\local\\hook_callbacks::class . '::activity_installation_finished',\n        'priority' => 500,\n    ],\n];\n"})}),"\n",(0,i.jsx)(n.p,{children:"Callback registrations are cached, so developers should to either increment the version number for the\ncomponent they place the hook into. During development it is also possible to purge caches."}),"\n",(0,i.jsxs)(n.p,{children:["In this particular example, the developer would probably also add some code to ",(0,i.jsx)(n.code,{children:"db/install.php"}),"\nto perform the necessary action in case the hook gets called before the ",(0,i.jsx)(n.code,{children:"local_stuff"})," plugin\nis installed."]}),"\n",(0,i.jsx)(n.h2,{id:"deprecation-of-legacy-libphp-callbacks",children:"Deprecation of legacy lib.php callbacks"}),"\n",(0,i.jsxs)(n.p,{children:["Hooks are a direct replacement for one-to-many lib.php callback functions that were implemented\nusing the ",(0,i.jsx)(n.code,{children:"get_plugins_with_function()"}),", ",(0,i.jsx)(n.code,{children:"plugin_callback()"}),", or ",(0,i.jsx)(n.code,{children:"component_callback()"})," functions."]}),"\n",(0,i.jsxs)(n.p,{children:["If a hook implements the ",(0,i.jsx)(n.code,{children:"core\\hook\\deprecated_callback_replacement"})," interface, and if deprecated ",(0,i.jsx)(n.code,{children:"lib.php"}),"\ncallbacks can be listed in ",(0,i.jsx)(n.code,{children:"get_deprecated_plugin_callbacks()"})," hook method\nthen developers needs to only add extra parameter to existing legacy callback functions\nand the hook manager will trigger appropriated deprecated debugging messages when\nit detects plugins that were not converted to new hooks yet."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Legacy fallback",type:"important",children:[(0,i.jsxs)(n.p,{children:["Please note ",(0,i.jsx)(n.strong,{children:"it is"})," possible for plugin to contain both legacy ",(0,i.jsx)(n.code,{children:"lib.php"})," callback and PSR-14 hook\ncallbacks."]}),(0,i.jsx)(n.p,{children:"This allows community contributed plugins to be made compatible with multiple Moodle branches."}),(0,i.jsxs)(n.p,{children:["The legacy ",(0,i.jsx)(n.code,{children:"lib.php"})," callbacks are automatically ignored if hook callback is present."]})]}),"\n",(0,i.jsx)(n.h2,{id:"example-how-to-migrate-legacy-callback",children:"Example how to migrate legacy callback"}),"\n",(0,i.jsxs)(n.p,{children:["This example describes migration of ",(0,i.jsx)(n.code,{children:"after_config"})," callback from the very end of ",(0,i.jsx)(n.code,{children:"lib/setup.php"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"First we need a new hook:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/lib/classes/hook/after_config.php"',children:"<?php\nnamespace core\\hook;\n\nfinal class after_config implements described_hook, deprecated_callback_replacement {\n    public static function get_hook_description(): string {\n        return 'Hook dispatched at the very end of lib/setup.php';\n    }\n    public static function get_deprecated_plugin_callbacks(): array {\n        return ['after_config'];\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The hook needs to be emitted immediately after the current callback execution code,\nand an extra parameter ",(0,i.jsx)(n.code,{children:"$migratedtohook"})," must be set to true in the call to ",(0,i.jsx)(n.code,{children:"get_plugins_with_function()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/lib/setup.php"',children:"\n// Allow plugins to callback as soon possible after setup.php is loaded.\n$pluginswithfunction = get_plugins_with_function('after_config', 'lib.php', true, true);\nforeach ($pluginswithfunction as $plugins) {\n    foreach ($plugins as $function) {\n        try {\n            $function();\n        } catch (Throwable $e) {\n            debugging(\"Exception calling '$function'\", DEBUG_DEVELOPER, $e->getTrace());\n        }\n    }\n}\n// Dispatch the new Hook implementation immediately after the legacy callback.\ncore\\hook\\manager::get_instance()->dispatch(new core\\hook\\after_config());\n"})}),"\n",(0,i.jsx)(n.h2,{id:"hooks-which-contain-data",children:"Hooks which contain data"}),"\n",(0,i.jsx)(n.p,{children:"It is often desirable to pass a data object when dispatching hooks."}),"\n",(0,i.jsx)(n.p,{children:"This can be useful where you are passing code that consumers may wish to change."}),"\n",(0,i.jsx)(n.p,{children:"Since the hook is an arbitrary PHP object, it is possible to create any range of public data and/or method you like and for the callbacks to use those methods and properties for later consumption."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/lib/classes/hook/block_delete_pre.php"',children:"<?php\n\nnamespace core\\hook;\n\nfinal class block_delete_pre implements described_hook, deprecated_callback_replacement {\n    public static function get_hook_description(): string {\n        return 'A hook dispatched just before a block instance is deleted';\n    }\n\n    public function __construct(\n        protected stdClass $blockinstance,\n    ) {}\n\n    public function get_instance(): stdClass {\n        return $this->blockinstance;\n    }\n\n    public static function get_deprecated_plugin_callbacks(): array {\n        return ['pre_block_delete'];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"When dispatching the hook, it behaves as any other normal PHP Object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/lib/blocklib.php"',children:"// Allow plugins to use this block before we completely delete it.\nif ($pluginsfunction = get_plugins_with_function('pre_block_delete', 'lib.php', true, true)) {\n    foreach ($pluginsfunction as $plugintype => $plugins) {\n            foreach ($plugins as $pluginfunction) {\n                $pluginfunction($instance);\n            }\n        }\n    }\n}\n$hook = new \\core\\hook\\block_delete_pre($instance);\ncore\\hook\\manager::get_instance()->dispatch($hook);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"hooks-which-can-be-stopped",children:"Hooks which can be stopped"}),"\n",(0,i.jsx)(n.p,{children:"In some situations it is desirable to allow a callback to stop execution of a hook. This can happen in situations where the hook contains that should only be set once."}),"\n",(0,i.jsx)(n.p,{children:"The Moodle hooks implementation has support for the full PSR-14 specification, including Stoppable Events."}),"\n",(0,i.jsxs)(n.p,{children:["To make use of Stoppable events, the hook simply needs to implement the ",(0,i.jsx)(n.code,{children:"Psr\\EventDispatcher\\StoppableEventInterface"})," interface."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/lib/classes/hook/block_delete_pre.php"',children:"<?php\n\nnamespace core\\hook;\n\nfinal class block_delete_pre implements\n    described_hook,\n    deprecated_callback_replacement.\n    Psr\\EventDispatcher\\StoppableEventInterface\n{\n    public static function get_hook_description(): string {\n        return 'A hook dispatched just before a block instance is deleted';\n    }\n\n    public function __construct(\n        protected stdClass $blockinstance,\n    ) {}\n\n    public function get_instance(): stdClass {\n        return $this->blockinstance;\n    }\n\n    public function isPropagationStopped(): bool {\n        return $this->stopped;\n    }\n\n    public function stop(): void {\n        $this->stopped = true;\n    }\n\n    public static function get_deprecated_plugin_callbacks(): array {\n        return ['pre_block_delete'];\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"A callback will only be called if the hook was not stopped before-hand. Depending on the hook implementation, it can stop he"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="/local/myplugin/classes/callbacks.php"',children:"<?php\n\nnamespace local_myplugin;\n\nclass callbacks {\n    public static function block_pre_delete(\\core\\hook\\block_delete_pre $hook): void {\n        // ...\n        $hook->stop();\n    }\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);