"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[70774],{16357:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>d});var t=o(74848),s=o(28453),a=o(78924);const l={title:"Transactions",tags:["core_dml","DML","core","API"]},i=void 0,r={id:"apis/core/dml/delegated-transactions",title:"Transactions",description:"Moodle allows data manipulation to take place within a database transaction, known as a Delegated transaction. This allows you to perform CRUD operations, and roll them back if a failure takes place.",source:"@site/versioned_docs/version-4.2/apis/core/dml/delegated-transactions.md",sourceDirName:"apis/core/dml",slug:"/apis/core/dml/delegated-transactions",permalink:"/moodledevdocs/docs/4.2/apis/core/dml/delegated-transactions",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/versioned_docs/version-4.2/apis/core/dml/delegated-transactions.md",tags:[{label:"core_dml",permalink:"/moodledevdocs/docs/4.2/tags/core-dml"},{label:"DML",permalink:"/moodledevdocs/docs/4.2/tags/dml"},{label:"core",permalink:"/moodledevdocs/docs/4.2/tags/core"},{label:"API",permalink:"/moodledevdocs/docs/4.2/tags/api"}],version:"4.2",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:168325581e4,frontMatter:{title:"Transactions",tags:["core_dml","DML","core","API"]},sidebar:"docs",previous:{title:"Data definition API",permalink:"/moodledevdocs/docs/4.2/apis/core/dml/ddl"},next:{title:"DML drivers",permalink:"/moodledevdocs/docs/4.2/apis/core/dml/drivers"}},c={},d=[{value:"General principles",id:"general-principles",level:2},{value:"The API",id:"the-api",level:2},{value:"The Flow",id:"the-flow",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",strong:"strong",sup:"sup",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.A,{frontMatter:l,metadata:r}),"\n",(0,t.jsxs)(n.p,{children:["Moodle allows data manipulation to take place within a database transaction, known as a ",(0,t.jsx)(n.em,{children:"Delegated transaction"}),". This allows you to perform CRUD",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})})," operations, and roll them back if a failure takes place."]}),"\n",(0,t.jsx)(n.h2,{id:"general-principles",children:"General principles"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["These ",(0,t.jsx)(n.strong,{children:"delegated transactions"})," work in a way that, when nested, the outer levels have control over the inner ones."]}),"\n",(0,t.jsxs)(n.li,{children:["Code should ",(0,t.jsx)(n.strong,{children:"not"})," rely on a rollback happening. It is only a measure to reduce (not to eliminate) DB",(0,t.jsx)(n.sup,{children:(0,t.jsx)(n.a,{href:"#user-content-fn-2",id:"user-content-fnref-2","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"2"})})," garbled information"]}),"\n",(0,t.jsxs)(n.li,{children:["Any code using transactions that result in unfinished, unbalanced, or finished twice transactions will generate a ",(0,t.jsx)(n.code,{children:"transaction_exception"})," and the DB will perform a rollback"]}),"\n",(0,t.jsxs)(n.li,{children:["If one transaction (at any level) has been marked for ",(0,t.jsx)(n.code,{children:"rollback()"})," there will not be any method to change it. Finally Moodle will perform the DB rollback"]}),"\n",(0,t.jsxs)(n.li,{children:["If one transaction (at any level) has been marked for ",(0,t.jsx)(n.code,{children:"allow_commit()"})," it will be possible to change that status to ",(0,t.jsx)(n.code,{children:"rollback()"})," in any outer level"]}),"\n",(0,t.jsxs)(n.li,{children:["It will be ",(0,t.jsx)(n.strong,{children:"optional"})," to catch exceptions when using transactions, but if they are caught, then it is mandatory to mark the transaction for ",(0,t.jsx)(n.code,{children:"rollback()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Any explicit ",(0,t.jsx)(n.code,{children:"rollback()"})," call will pass the exception originating from it, as in ",(0,t.jsx)(n.code,{children:"rollback($exception)"}),", to be re-thrown"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"the-api",children:"The API"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["All the handling must go, exclusively, to a ",(0,t.jsx)(n.code,{children:"moodle_database"})," object, leaving real drivers only implementing (protected) the old begin/commit/rollback_sql() functions"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["One array of objects of type ",(0,t.jsx)(n.code,{children:"moodle_transaction"})," will be stored / checked from ",(0,t.jsx)(n.code,{children:"$DB"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"$DB"})," will be the responsible to instantiate / accumulate / pair / compare ",(0,t.jsx)(n.code,{children:"moodle_transaction"}),"s"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Each ",(0,t.jsx)(n.code,{children:"moodle_transaction"})," will be able to set the global mark for rollback. Commit won't change anything"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Inner-most commit/rollback will printout one complete stack of ",(0,t.jsx)(n.code,{children:"moodle_transaction"}),"s information if we are under ",(0,t.jsx)(n.code,{children:"DEBUG_DEVELOPER"})," and the new setting ",(0,t.jsx)(n.code,{children:"delegatedtransactionsdebug"})," is enabled"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Normal usage of the moodle_transaction will be:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"$transaction = $DB->start_delegated_transaction();\n// Perform some $DB stuff\n$transaction->allow_commit();\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"If, for any reason, the developer needs to catch exceptions when using transactions, it will be mandatory to use it in this way:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"try {\n    $transaction = $DB->start_delegated_transaction();\n    // Perform some $DB stuff.\n    $transaction->allow_commit();\n} catch (Exception $e) {\n    // Extra cleanup steps.\n    // Re-throw exception after commiting.\n    $transaction->rollback($e);\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"In order to be able to keep some parts of code out from top transactions completely, if we know it can lead to problems, we can use:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// Check to confirm we aren't using transactions at this point.\n// This will throw an exception if a transaction is found.\n$DB->transactions_forbidden();\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"the-flow",children:"The Flow"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"The flow of transactions in diagram format",src:o(7768).A+"",width:"736",height:"641"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Any default exception handler will:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Catch uncaught transaction_exception exceptions"}),"\n",(0,t.jsx)(n.li,{children:"Properly perform the DB rollback"}),"\n",(0,t.jsx)(n.li,{children:"debug/error/log honouring related settings"}),"\n",(0,t.jsx)(n.li,{children:"inform with as many details as possible (token, place... whatever)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:['Any "footer" (meaning some place before ending ',(0,t.jsx)(n.code,{children:"<html>"})," output) will:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'Detect "in-transaction" status'}),"\n",(0,t.jsxs)(n.li,{children:["Let execution continue, transaction is automatically rolled back in ",(0,t.jsx)(n.code,{children:"$DB->dispose()"})]}),"\n",(0,t.jsx)(n.li,{children:"inform with as many details as possible (token, place... whatever)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$DB->dispose()"})," will:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:'Detect "in-transaction" status'}),"\n",(0,t.jsx)(n.li,{children:"log error (not possible to honour settings!)"}),"\n",(0,t.jsx)(n.li,{children:"Properly perform the full DB rollback"}),"\n"]}),"\n"]}),"\n"]}),"\n","\n",(0,t.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,t.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,t.jsxs)(n.p,{children:["Create Read Update Delete ",(0,t.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{id:"user-content-fn-2",children:["\n",(0,t.jsxs)(n.p,{children:["The Moodle database ",(0,t.jsx)(n.a,{href:"#user-content-fnref-2","data-footnote-backref":"","aria-label":"Back to reference 2",className:"data-footnote-backref",children:"\u21a9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},7768:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/TransactionsAndExceptionsFlow-8f8e565adf6b9664f444f701a8067bdf.png"}}]);