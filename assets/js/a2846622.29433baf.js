"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[12706],{15642:(e,o,s)=>{s.r(o),s.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var n=s(74848),i=s(28453),t=s(78924);const a={title:"Form Usage",tags:["core_form","form","core","API"],documentationDraft:!0},r=void 0,d={id:"apis/subsystems/form/usage/index",title:"Form Usage",description:"Moodle's Form API is an extension of the Pear HTMLQuickForm API, which is no longer supported. Some documentation for the upstream library is available in the PEAR package page, including a short tutorial. A longer tutorial is also available, courtesy of the Internet Archive.",source:"@site/docs/apis/subsystems/form/usage/index.md",sourceDirName:"apis/subsystems/form/usage",slug:"/apis/subsystems/form/usage/",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/usage/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/subsystems/form/usage/index.md",tags:[{label:"core_form",permalink:"/moodledevdocs/docs/4.4/tags/core-form"},{label:"form",permalink:"/moodledevdocs/docs/4.4/tags/form"},{label:"core",permalink:"/moodledevdocs/docs/4.4/tags/core"},{label:"API",permalink:"/moodledevdocs/docs/4.4/tags/api"}],version:"current",lastUpdatedBy:"Iv\xe1n Ignacio L\xf3pez Ambrocio",lastUpdatedAt:1675133783e3,frontMatter:{title:"Form Usage",tags:["core_form","form","core","API"],documentationDraft:!0},sidebar:"docs",previous:{title:"Choice Dropdown",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/fields/choicedropdown"},next:{title:"Files in Forms",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/form/usage/files"}},l={},c=[{value:"Basic Usage in A Normal Page",id:"basic-usage-in-a-normal-page",level:2},{value:"Defining Your Form Class",id:"defining-your-form-class",level:2},{value:"definition()",id:"definition",level:3},{value:"Use in Activity Modules Add / Update Forms",id:"use-in-activity-modules-add--update-forms",level:2},{value:"defaults_preprocessing",id:"defaults_preprocessing",level:3},{value:"Post Processing",id:"post-processing",level:3},{value:"Standard activity form elements",id:"standard-activity-form-elements",level:3}];function m(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.A,{frontMatter:a,metadata:d}),"\n",(0,n.jsxs)(o.p,{children:["Moodle's Form API is an extension of the Pear HTML_QuickForm API, which is no longer supported. Some documentation for the upstream library is ",(0,n.jsx)(o.a,{href:"http://pear.php.net/package/HTML_QuickForm",children:"available in the PEAR package page"}),", including a ",(0,n.jsx)(o.a,{href:"http://pear.php.net/manual/en/package.html.html-quickform.tutorial.php",children:"short tutorial"}),". A ",(0,n.jsx)(o.a,{href:"http://web.archive.org/web/20130630141100/http://www.midnighthax.com/quickform.php",children:"longer tutorial is also available"}),", courtesy of the Internet Archive."]}),"\n",(0,n.jsx)(o.p,{children:"Moodle will attempt to provide a more complete tutorial in this documentation where possible."}),"\n",(0,n.jsxs)(o.admonition,{type:"tip",children:[(0,n.jsx)(o.p,{children:"Some good examples of usage of the Forms API can be found at the following locations:"}),(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.a,{href:"https://github.com/moodle/moodle/blob/master/course/edit_form.php",children:"Course edit form - definition"})}),"\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.a,{href:"https://github.com/moodle/moodle/blob/master/course/edit.php",children:"Course edit form - usage"})}),"\n"]})]}),"\n",(0,n.jsxs)(o.p,{children:["Whilst much of the API originates in the PEAR package, all interaction with the library should be via the ",(0,n.jsx)(o.code,{children:"moodleform"})," class, which acts as a controlling wrapper to HTML_QuickForm."]}),"\n",(0,n.jsx)(o.h2,{id:"basic-usage-in-a-normal-page",children:"Basic Usage in A Normal Page"}),"\n",(0,n.jsx)(o.p,{children:"Generally the structure of a page with a form on it looks like this:"}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-php",children:"// You will process some page parameters at the top here and get the info about\n// what instance of your module and what course you're in etc. Make sure you\n// include hidden variable in your forms which have their defaults set in set_data\n// which pass these variables from page to page.\n\n// Setup $PAGE here.\n\n// Instantiate the form that you defined.\n$mform = new \\plugintype_pluginname\\form\\myform();\n// Default 'action' for form is strip_querystring(qualified_me()).\n\n// Set the initial values, for example the existing data loaded from the database.\n// This is typically an array of name/value pairs that match the\n// names of data elements in the form.\n// You can also use an object.\n$mform->set_data($toform);\n\nif ($mform->is_cancelled()) {\n    // You need this section if you have a cancel button on your form.\n    // You use this section to handle what to do if your user presses the cancel button.\n    // This is often a redirect back to an older page.\n    // NOTE: is_cancelled() should be called before get_data().\n    redirect($returnurl);\n\n} else if ($fromform = $mform->get_data()) {\n    // This branch is where you process validated data.\n\n    // Typically you finish up by redirecting to somewhere where the user\n    // can see what they did.\n    redirect($nexturl);\n}\n\n// If the form was not cancelled, and data was not submitted, then display the form.\necho $OUTPUT->header();\n$mform->display();\necho $OUTPUT->footer();\n"})}),"\n",(0,n.jsxs)(o.p,{children:["You are encouraged to look at ",(0,n.jsx)(o.code,{children:"lib/formslib.php"})," to see what additional functions and parameters are available. Available functions are well commented."]}),"\n",(0,n.jsx)(o.h2,{id:"defining-your-form-class",children:"Defining Your Form Class"}),"\n",(0,n.jsx)(o.p,{children:"The form class tells us about the structure of the form."}),"\n",(0,n.jsxs)(o.p,{children:["In most cases you can place this in an auto-loadable class, in which case it should be placed in a folder named ",(0,n.jsx)(o.code,{children:"form"}),", for example:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-php",metastring:'title="mod/forum/classes/form/myform.php',children:"<?php\n\nnamespace mod_forum\\form;\n\nclass myform extends \\moodleform {\n    // ...\n}\n"})}),"\n",(0,n.jsxs)(o.admonition,{type:"info",children:[(0,n.jsx)(o.p,{children:"Historically it was not possible to auto-load classes. As a result, there are many parts of the core codebase which will manually require a file and expect a non-namespaced class name."}),(0,n.jsxs)(o.p,{children:["One example of this is in the activity edit form, which must be named ",(0,n.jsx)(o.code,{children:"mod_[modname]_mod_form"})," and can either be located in ",(0,n.jsx)(o.code,{children:"mod/[modname]/classes/mod_form.php"})," or in ",(0,n.jsx)(o.code,{children:"mod/[modname]/mod_form.php"}),"."]})]}),"\n",(0,n.jsxs)(o.p,{children:["The name you give the class is used as the ",(0,n.jsx)(o.code,{children:"id"})," attribute of your form in html. Any trailing '_form' is removed. Your form class name should be unique in order for it to be selectable in CSS by theme designers who may want to adjust the css just for that form."]}),"\n",(0,n.jsx)(o.h3,{id:"definition",children:"definition()"}),"\n",(0,n.jsxs)(o.p,{children:["Form definition is defined in further detail in the ",(0,n.jsx)(o.a,{href:"https://docs.moodle.org/dev/lib/formslib.php_Form_Definition",children:"Form definition"})," documentation."]}),"\n",(0,n.jsx)(o.h2,{id:"use-in-activity-modules-add--update-forms",children:"Use in Activity Modules Add / Update Forms"}),"\n",(0,n.jsx)(o.p,{children:"The same form is used to create or edit an activity, but some legacy constraints still apply:"}),"\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:["The form ",(0,n.jsx)(o.em,{children:"must"})," be named ",(0,n.jsx)(o.code,{children:"mod_[modname]_mod_form"})]}),"\n",(0,n.jsxs)(o.li,{children:["The class ",(0,n.jsx)(o.em,{children:"must"})," be located in either:","\n",(0,n.jsxs)(o.ul,{children:["\n",(0,n.jsxs)(o.li,{children:[(0,n.jsx)(o.code,{children:"mod/[modname]/mod_form.php"}),"; or"]}),"\n",(0,n.jsx)(o.li,{children:(0,n.jsx)(o.code,{children:"mod/[modname]/classes/mod_form.php"})}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(o.li,{children:["The form ",(0,n.jsx)(o.em,{children:"must"})," extend the ",(0,n.jsx)(o.code,{children:"moodleform_mod"})," class."]}),"\n"]}),"\n",(0,n.jsx)(o.h3,{id:"defaults_preprocessing",children:"defaults_preprocessing"}),"\n",(0,n.jsx)(o.p,{children:"Since the data for the activity editing form is automatically filled from the database, you may need to pre-process this data to set values for some form fields. For example, in the Forum activity, in some situations a Unix Time Stamp is used to set a boolean checkbox."}),"\n",(0,n.jsxs)(o.p,{children:["This can be achieved using the ",(0,n.jsx)(o.code,{children:"defaults_preprocessing"})," method."]}),"\n",(0,n.jsx)(o.h3,{id:"post-processing",children:"Post Processing"}),"\n",(0,n.jsxs)(o.p,{children:["Whilst the pre-processing stage is performed in the ",(0,n.jsx)(o.code,{children:"defaults_preprocessing"})," function, all post-processing is perform in the ",(0,n.jsx)(o.code,{children:"[modname]_add_instance"})," and ",(0,n.jsx)(o.code,{children:"[modname]_update_instance"})," functions in the activities ",(0,n.jsx)(o.code,{children:"lib.php"}),"."]}),"\n",(0,n.jsxs)(o.p,{children:["These are called ",(0,n.jsx)(o.em,{children:"after"})," data bas been validated by the Forms API."]}),"\n",(0,n.jsx)(o.h3,{id:"standard-activity-form-elements",children:"Standard activity form elements"}),"\n",(0,n.jsx)(o.p,{children:"Moodle has a set of standard form elements used by all Activity modules. These allow for consistent control over activity visibility, group modes, and other common APIs."}),"\n",(0,n.jsxs)(o.p,{children:["The ",(0,n.jsx)(o.code,{children:"standard_coursemodule_elements()"})," function is used to add these common elements, and it should be called ",(0,n.jsx)(o.em,{children:"before"})," the standard action elements are added, for example:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-php",children:"class mod_example_mod_form extends \\moodleform_mod {\n    public function definition() {\n        // Add the various form elements.\n        $this->_form->addElement( ... );\n\n        // Add the standard elements.\n        $this->standard_coursemodule_elements();\n\n        // Add the form actions.\n        $this->add_action_buttons();\n    }\n}\n"})})]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(m,{...e})}):m(e)}}}]);