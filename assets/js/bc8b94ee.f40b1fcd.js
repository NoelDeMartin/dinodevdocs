"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[81321],{66895:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var i=n(74848),s=n(28453),r=n(78924);const o={title:"Unit Testing",tags:["Unit testing","Web Services","external","core_external","API"]},a=void 0,c={id:"apis/subsystems/external/testing",title:"Unit Testing",description:"Unit tests are the best way of checking the behaviour of your external services and can help you to:",source:"@site/docs/apis/subsystems/external/testing.md",sourceDirName:"apis/subsystems/external",slug:"/apis/subsystems/external/testing",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/external/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/subsystems/external/testing.md",tags:[{label:"Unit testing",permalink:"/moodledevdocs/docs/4.4/tags/unit-testing"},{label:"Web Services",permalink:"/moodledevdocs/docs/4.4/tags/web-services"},{label:"external",permalink:"/moodledevdocs/docs/4.4/tags/external"},{label:"core_external",permalink:"/moodledevdocs/docs/4.4/tags/core-external"},{label:"API",permalink:"/moodledevdocs/docs/4.4/tags/api"}],version:"current",lastUpdatedBy:"PhMemmel",lastUpdatedAt:1706541355e3,frontMatter:{title:"Unit Testing",tags:["Unit testing","Web Services","external","core_external","API"]},sidebar:"docs",previous:{title:"Service creation",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/external/advanced/custom-services"},next:{title:"Favourites API",permalink:"/moodledevdocs/docs/4.4/apis/subsystems/favourites/"}},l={},d=[{value:"How to write an external function PHPUnit test",id:"how-to-write-an-external-function-phpunit-test",level:2}];function u(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.A,{frontMatter:o,metadata:c}),"\n",(0,i.jsx)(t.p,{children:"Unit tests are the best way of checking the behaviour of your external services and can help you to:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"discover use cases you didn't think about"}),"\n",(0,i.jsx)(t.li,{children:"understand the feelings and the needs of the web service client developer"}),"\n",(0,i.jsx)(t.li,{children:"end up with a function usable by everybody, not only by your own client"}),"\n",(0,i.jsx)(t.li,{children:"reach integration way faster as you joined a proof of validity"}),"\n",(0,i.jsx)(t.li,{children:"make the QA process a breeze"}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["Writing unit tests for an external service function is no different to writing unit tests for any other part of Moodle, which is documented in under ",(0,i.jsx)(t.a,{href:"/general/development/tools/phpunit",children:"PHPUnit"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"how-to-write-an-external-function-phpunit-test",children:"How to write an external function PHPUnit test"}),"\n",(0,i.jsx)(t.p,{children:"You should create one unit test testcase for each external service file, and it should be named after the file that it tests."}),"\n",(0,i.jsxs)(t.p,{children:["For example, if you have written a service function in ",(0,i.jsx)(t.code,{children:"[componentfolder]/classes/external/get_fruit.php"}),", you should write a unit test in ",(0,i.jsx)(t.code,{children:"[componentfolder]/tests/external/get_fruit_test.php"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",metastring:'title="mod/kitchen/tests/external/get_fruit_test.php"',children:"<?php\n// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Unit tests for the get_fruit function of the kitchen.\n *\n * @package    mod_kitchen\n * @category   external\n * @copyright  20XX Your Name\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nnamespace mod_kitchen\\external;\n\ndefined('MOODLE_INTERNAL') || die();\n\nglobal $CFG;\nrequire_once($CFG->dirroot . '/webservice/tests/helpers.php');\n\nclass get_fruit_test extends externallib_advanced_testcase {\n\n    /**\n     * Test the execute function when capabilities are present.\n     *\n     * @covers \\mod_fruit\\external\\get_fruit::execute\n     */\n    public function test_capabilities(): void {\n        $this->resetAfterTest(true);\n\n        $course = $this->getDataGenerator()->create_course();\n        $cm = $this->getDataGenerator()->create_module('mod_kitchen', [\n            'course' => $course->id,\n        ]);\n\n        // Set the required capabilities by the external function\n        $contextid = context_module::instance($cm->cmid)->id;\n        $roleid = $this->assignUserCapability('moodle/CAPABILITYNAME', $contextid);\n\n        // Call the external service function.\n        $returnvalue = get_fruit::execute([\n            'course' => $course->id,\n            'cmid' => $cm->id,\n        ]);\n\n        // We need to execute the return values cleaning process to simulate\n        // the web service server.\n        $returnvalue = \\core_external\\external_api::clean_returnvalue(\n            get_fruit::execute_returns(),\n            $returnvalue\n        );\n\n        // Assert that there was a response.\n        // The actual response is tested in other tests.\n        $this->assertNotNull($returnvalue);\n    }\n\n    /**\n     * Test the execute function when capabilities are missing.\n     *\n     * @covers \\mod_fruit\\external\\get_fruit::execute\n     */\n    public function test_capabilities_missing(): void {\n        global $USER;\n\n        $this->resetAfterTest(true);\n\n        $course = $this->getDataGenerator()->create_course();\n        $cm = $this->getDataGenerator()->create_module('mod_kitchen', [\n            'course' => $course->id,\n        ]);\n\n        // Set the required capabilities by the external function\n        $contextid = context_module::instance($cm->cmid)->id;\n        $this->unassignUserCapability('moodle/CAPABILITYNAME', $contextid, $roleid);\n\n        $params = [PARAM1, PARAM2, ...];\n\n        // Call without required capability\n        $this->expectException(required_capability_exception::class);\n        get_fruit::execute([\n            'course' => $course->id,\n            'cmid' => $cm->id,\n        ]);\n    }\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);