"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[93013],{18022:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>d,toc:()=>l});var i=t(74848),s=t(28453),o=t(78924);const c={title:"Dependency Injection",tags:["DI","Container","PSR-11","PSR"],description:"The use of PSR-11 compatible Dependency Injection in Moodle"},a=void 0,d={id:"apis/core/di/index",title:"Dependency Injection",description:"The use of PSR-11 compatible Dependency Injection in Moodle",source:"@site/docs/apis/core/di/index.md",sourceDirName:"apis/core/di",slug:"/apis/core/di/",permalink:"/moodledevdocs/docs/4.4/apis/core/di/",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/core/di/index.md",tags:[{label:"DI",permalink:"/moodledevdocs/docs/4.4/tags/di"},{label:"Container",permalink:"/moodledevdocs/docs/4.4/tags/container"},{label:"PSR-11",permalink:"/moodledevdocs/docs/4.4/tags/psr-11"},{label:"PSR",permalink:"/moodledevdocs/docs/4.4/tags/psr"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Dependency Injection",tags:["DI","Container","PSR-11","PSR"],description:"The use of PSR-11 compatible Dependency Injection in Moodle"},sidebar:"docs",previous:{title:"Deprecation API",permalink:"/moodledevdocs/docs/4.4/apis/core/deprecation/"},next:{title:"Data manipulation API",permalink:"/moodledevdocs/docs/4.4/apis/core/dml/"}},r={},l=[{value:"Fetching dependencies",id:"fetching-dependencies",level:2},{value:"Configuring dependencies",id:"configuring-dependencies",level:2},{value:"Mocking dependencies in Unit Tests",id:"mocking-dependencies-in-unit-tests",level:2},{value:"Injecting dependencies",id:"injecting-dependencies",level:2},{value:"Advanced usage",id:"advanced-usage",level:2},{value:"Resetting the Container",id:"resetting-the-container",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Since:t,TabItem:a,Tabs:r}=n;return t||u("Since",!0),a||u("TabItem",!0),r||u("Tabs",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{frontMatter:c,metadata:d}),"\n",(0,i.jsx)(t,{version:"4.4",issueNumber:"MDL-80072"}),"\n",(0,i.jsxs)(n.p,{children:["Moodle supports the use of ",(0,i.jsx)(n.a,{href:"https://www.php-fig.org/psr/psr-11/",children:"PSR-11"})," compatible Dependency Injection, accessed using the ",(0,i.jsx)(n.code,{children:"\\core\\di"})," class, which internally makes use of ",(0,i.jsx)(n.a,{href:"https://php-di.org",children:"PHP-DI"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Most class instances can be fetched using their class name without any manual configuration. Support for configuration of constructor arguments is also possible, but is generally discouraged."}),"\n",(0,i.jsx)(n.p,{children:"Dependencies are stored using a string id attribute, which is typically the class or interface name of the dependency. Use of other arbitrary id values is strongly discouraged."}),"\n",(0,i.jsx)(n.h2,{id:"fetching-dependencies",children:"Fetching dependencies"}),"\n",(0,i.jsx)(n.p,{children:"When accessing dependencies within a class, it is advisable to inject them into the constructor, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Fetching a instance of the \\core\\http_client class from within a class"',children:"class my_thing {\n    public function __construct(\n        protected readonly \\core\\http_client $client,\n    ) {\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For legacy code, or for scripts accessing an injected class, Moodle provides a wrapper around the PSR-11 Container implementation which can be used to fetch dependencies:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Fetching dependencies using the DI container"',children:"// Fetching an instance of the \\core\\http_client class outside of a class.\n$client = \\core\\di::get(\\core\\http_client::class);\n\n// Fetching an instance of a class which is managed using DI.\n$thing = \\core\\di::get(my_thing::class);\n"})}),"\n",(0,i.jsxs)(n.admonition,{title:"Constructor Property Promotion and Readonly properties",type:"tip",children:[(0,i.jsxs)(n.p,{children:["When using constructor-based injection, you can simplify your dependency injection by making use of ",(0,i.jsx)(n.a,{href:"https://stitcher.io/blog/constructor-promotion-in-php-8",children:"Constructor Property Promotion"}),", and ",(0,i.jsx)(n.a,{href:"https://stitcher.io/blog/php-81-readonly-properties",children:"Readonly properties"}),"."]}),(0,i.jsx)(n.p,{children:"The use of readonly properties is also highly recommended as it ensures that dependencies cannot be inadvertently changed."}),(0,i.jsx)(n.p,{children:"These language features are available in all Moodle versions supporting Dependency Injection."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class example_without_promotion {\n    protected \\core\\http_client $client;\n\n    public function __construct(\n        \\core\\http_client $client,\n    ) {\n        $this->client = $client;\n    }\n}\n\nclass example_with_promotion {\n    public function __construct(\n        protected readonly \\core\\http_client $client,\n    ) {\n    }\n}\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"configuring-dependencies",children:"Configuring dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["In some rare cases you may need to supply additional configuration for a dependency to work properly. This is usually in the case of legacy code, and can be achieved with the ",(0,i.jsx)(n.code,{children:"\\core\\hook\\di_configuration"})," hook."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsxs)(a,{value:"config",label:"Hook configuration",children:[(0,i.jsxs)(n.p,{children:["The callback must be linked to the hook by specifying a callback in the plugin's ",(0,i.jsx)(n.code,{children:"hooks.php"})," file:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="mod/example/db/hooks.php"',children:"<?php\n$callbacks = [\n    [\n        'hook' => \\core\\hook\\di_configuration::class,\n        'callback' => \\mod_example\\hook_listener::class . '::inject_dependenices',\n    ],\n];\n"})})]}),(0,i.jsxs)(a,{value:"hook",label:"Hook listener",children:[(0,i.jsx)(n.p,{children:"The hook listener consists of a static method on a class."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="mod/example/classes/hook_listener.php"',children:"<?php\n\nnamespace mod_example;\n\nuse core\\hook\\di_configuration;\n\nclass hook_listener {\n    public static function inject_dependencies(di_configuration $hook): void {\n        $hook->add_definition(\n            id: complex_client::class,\n            definition: function (\n                \\moodle_database $db,\n            ): complex_client {\n                global $CFG;\n\n                return new complex_client(\n                    db: $db,\n                    name: $CFG->some_value,\n                );\n            }\n        )\n    }\n}\n"})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"mocking-dependencies-in-unit-tests",children:"Mocking dependencies in Unit Tests"}),"\n",(0,i.jsx)(n.p,{children:"One of the most convenient features of Dependency Injection is the ability to provide a mocked version of the dependency during unit testing."}),"\n",(0,i.jsx)(n.p,{children:"Moodle resets the Dependency Injection Container between each unit test, which means that little-to-no cleanup is required."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Injecting a Mocked dependency"',children:"<?php\nnamespace mod_example;\n\nuse GuzzleHttp\\Handler\\MockHandler;\nuse GuzzleHttp\\HandlerStack;\nuse GuzzleHttp\\Middleware;\nuse GuzzleHttp\\Psr7\\Response;\n\nclass example_test extends \\advanced_testcase {\n    public function test_the_thing(): void {\n        // Mock our responses to the http_client.\n        $handlerstack = HandlerStack::create(new MockHandler([\n            new Response(200, [], json_encode(['name' => 'Colin'])),\n        ]));\n\n        // Inject the mock.\n        \\core\\di::set(\n            \\core\\http_client::class,\n            new http_client(['handler' => $handlerstack]),\n        );\n\n        // Call a method on the example class.\n        // This method uses \\core\\di to fetch the client and use it to fetch data.\n        $example = \\core\\di::get(example::class);\n        $result = $example->do_the_thing();\n\n        // The result will be based on the mock response.\n        $this->assertEquals('Colin', $result->get_name());\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"injecting-dependencies",children:"Injecting dependencies"}),"\n",(0,i.jsx)(n.p,{children:"Dependencies can be usually be easily injected into classes which are themselves loaded using Dependency Injection."}),"\n",(0,i.jsx)(n.p,{children:"In most cases in Moodle, this should be via the class constructor, for example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Injecting via the constructor"',children:"class thing_manager {\n    public function __construct(\n        protected readonly \\moodle_database $db,\n    ) {\n    }\n\n    public function get_things(): array {\n        return $this->db->get_records('example_things');\n    }\n}\n\n// Fetching the injected class from legacy code:\n$manager = \\core\\di::get(thing_manager::class);\n$things = $manager->get_things();\n\n// Using it in a child class:\nclass other_thing {\n    public function __construct(\n        protected readonly thing_manager $manager,\n    ) {\n    }\n\n    public function manage_things(): void {\n        $this->manager->get_things();\n    }\n}\n"})}),"\n",(0,i.jsx)(n.admonition,{title:"A note on injecting the Container",type:"warning",children:(0,i.jsxs)(n.p,{children:["It is generally inadvisable to inject the Container itself. Please do not inject the ",(0,i.jsx)(n.code,{children:"\\Psr\\Container\\ContainerInterface"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-usage",children:"Advanced usage"}),"\n",(0,i.jsxs)(n.p,{children:["All usage of the Container ",(0,i.jsx)(n.em,{children:"should"})," be via ",(0,i.jsx)(n.code,{children:"\\core\\di"}),", which is a wrapper around the currently-active Container implementation. In normal circumstances it is not necessary to access the underlying Container implementation directly and such usage is generally discouraged."]}),"\n",(0,i.jsx)(n.h3,{id:"resetting-the-container",children:"Resetting the Container"}),"\n",(0,i.jsxs)(n.p,{children:["The Container is normally instantiated during the bootstrap phase of a script. In normal use it is not reset and there should be no need to reset it, however it is ",(0,i.jsx)(n.em,{children:"possible"})," to reset it if required. This usage is intended to be used for situations such as Unit Testing."]}),"\n",(0,i.jsx)(n.admonition,{title:"Unit testing",type:"tip",children:(0,i.jsx)(n.p,{children:"The container is already reset after each test when running unit tests. It is not necessary nor recommended to so manually."})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="Resetting the Container"',children:"\\core\\di::reset_container():\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsx)(n.p,{children:"Resetting an actively-used container can lead to unintended consequences."})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);