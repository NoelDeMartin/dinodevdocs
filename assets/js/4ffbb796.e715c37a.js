"use strict";(self.webpackChunkdevdocs=self.webpackChunkdevdocs||[]).push([[61161],{34114:(e,n,s)=>{s.d(n,{ul:()=>d});var i=s(96540),t=s(22957),o=s(28453),l=s(37019),a=s(74848);const r=e=>"boolean"!=typeof e&&e?"string"==typeof e||i.isValidElement(e)?(0,a.jsx)(o.x,{children:e}):(0,a.jsx)(o.x,{children:(0,a.jsx)(e,{})}):null,d=e=>{const n=(e=>({filetype:"php",examplePurpose:e.summary,...e}))({examplePurpose:e?.summary??null,...e});return n.description=((e,n)=>{let{description:s=null,extraDescription:i=null,children:t=null}=e;if(t){const e=r(t);return(0,a.jsx)(o.x,{children:e})}if(s){const e=r(s);return(0,a.jsx)(o.x,{children:e})}const l=r(n),d=r(i);return l?(0,a.jsxs)(o.x,{children:[l,d]}):null})(n,n?.defaultDescription??null),(n?.example||n?.defaultExample)&&(n.example=(0,l.rI)(n,n?.defaultExample??null)),(0,t.A)(n)}},817:(e,n,s)=>{s.d(n,{UL:()=>r,ok:()=>u,o$:()=>m,sk:()=>x,sy:()=>_,Rb:()=>w,Mm:()=>A,c0:()=>M,bQ:()=>R,vD:()=>D,ZF:()=>U,Le:()=>B,hO:()=>Y,Ze:()=>W,xi:()=>V,zS:()=>Z,f4:()=>se,JA:()=>oe,WM:()=>re,nm:()=>ue,H9:()=>me,bE:()=>xe,tC:()=>_e,Wi:()=>we,g4:()=>Ae,HK:()=>Me,DB:()=>Re,Hf:()=>Pe,bL:()=>Ce});s(96540);var i=s(34114),t=s(74848),o=s(28453);function l(e){const n={a:"a",admonition:"admonition",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"JavaScript in Moodle is written in the ESM format, and transpiled into AMD modules for deployment."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"../guides/javascript",children:"Moodle JavaScript Guide"})," has detailed information and examples on writing JavaScript in Moodle. Further information is also available in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/javascript/modules",children:"JavaScript Modules"})," documentation."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Although the AMD module format is supported, all new JavaScript is written in the EcmaScript Module (ESM) format."})})]})}function a(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}const r=e=>(0,t.jsx)(i.ul,{required:!0,defaultDescription:a,defaultExample:"\nimport {fetchThings} from './repository';\n\nexport const updateThings = (thingData) => {\n    return fetchThings(thingData);\n};\n",examplePurpose:"Example module",filepath:"/amd/src/example.js",filetype:"js",modulename:"example",summary:"AMD JavaScript Modules",...e});function d(e){const n={a:"a",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"If your plugin stores data then you may need to implement the Backup feature which allows the activity to backed up, restored, and duplicated."}),"\n",(0,t.jsx)(n.p,{children:"For more information on Backup and restore, see the following:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Backup_2.0_for_developers",children:"Backup 2.0 for developers"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Restore_2.0_for_developers",children:"Restore 2.0 for developers"})}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}const u=e=>(0,t.jsx)(i.ul,{filepath:"/backup/",summary:"Plugin Backup configuration",defaultDescription:c,...e});function h(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["For plugins which make use of ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/CLI_scripts",children:"CLI scripts"}),", the convention is that these are placed into the ",(0,t.jsx)(n.code,{children:"cli"})," folder to make their purpose clear, and easy to find."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["All CLI scripts ",(0,t.jsx)(n.strong,{children:"must"})," declare themselves as being a CLI script by defining the ",(0,t.jsx)(n.code,{children:"CLI_SCRIPT"})," constant to true before including ",(0,t.jsx)(n.code,{children:"config.php"}),"."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}const m=e=>(0,t.jsx)(i.ul,{filepath:"/cli/",summary:"CLI scripts",exampleFilepath:"/cli/example.php",examplePurpose:"Example CLI script",defaultDescription:p,defaultExample:"define('CLI_SCRIPT', true);\n\nrequire_once(__DIR__ . '/../../config.php');\nrequire_once(\"{$CFG->libdir}/clilib.php\");\n\n// Your CLI features go here.\n",...e});function g(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["If your plugin includes a changelog in its root directory, this will be used to automatically pre-fill the release notes field when uploading new versions of your plugin to the ",(0,t.jsx)(n.a,{href:"/general/community/plugincontribution/pluginsdirectory",children:"Plugins directory"}),". This file can be in any of the following locations:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.md"}),": as a markdown file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.txt"}),": as a text file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES.html"}),": as an HTML file; or"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"CHANGES"}),": as a text file."]}),"\n"]})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}const x=e=>(0,t.jsx)(i.ul,{filepath:"/CHANGES",filetype:"php",summary:"Plugin changelog",recommended:!0,defaultDescription:f,...e});function b(e){const n={a:"a",code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Moodle supports, and recommends, the use of autoloaded PHP classes."}),"\n",(0,t.jsxs)(n.p,{children:["By placing files within the ",(0,t.jsx)(n.code,{children:"classes"})," directory or appropriate sub-directories, and with the correct PHP Namespace, and class name, Moodle is able to autoload classes without the need to manually require, or include them."]}),"\n",(0,t.jsx)(n.p,{children:"Details on these rules and conventions are available in the following documentation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#namespaces",children:"Coding style - namespace conventions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Automatic_class_loading",children:"Automatic class loading"})}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(b,{...e})}):b(e)}const _=e=>(0,t.jsx)(i.ul,{filepath:"/classes/",summary:"Autoloaded classes",defaultDescription:j,...e});function y(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/access.php"})," file contains the ",(0,t.jsx)(n.strong,{children:"initial"})," configuration for a plugin's access control rules."]}),"\n",(0,t.jsxs)(n.p,{children:["Access control is handled in Moodle by the use of Roles, and Capabilities. You can read more about these in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/subsystems/access",children:"Access API"})," documentation."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Changing initial configuration",type:"caution",children:[(0,t.jsxs)(n.p,{children:["If you make changes to the initial configuration of ",(0,t.jsx)(n.em,{children:"existing"})," access control rules, these will only take effect for ",(0,t.jsx)(n.em,{children:"new installations of your plugin"}),". Any existing installation ",(0,t.jsx)(n.strong,{children:"will not"})," be updated with the latest configuration."]}),(0,t.jsx)(n.p,{children:"Updating existing capability configuration for an installed site is not recommended as it may have already been modified by an administrator."})]})]})}function v(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(y,{...e})}):y(e)}const w=e=>(0,t.jsx)(i.ul,{defaultDescription:v,defaultExample:"$capabilities = [\n    // Ability to use the plugin.\n    'plugintype/pluginname:useplugininstance' => [\n        'riskbitmask' => RISK_XSS,\n        'captype' => 'write',\n        'contextlevel' => CONTEXT_COURSE,\n        'archetypes' => [\n            'manager' => CAP_ALLOW,\n            'editingteacher' => CAP_ALLOW,\n        ],\n    ],\n];\n",filepath:"/db/access.php",summary:"Plugin capabilities",examplePurpose:"Plugin capabilities",...e});function $(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Moodle supports a feature known as _ ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Events_API#Event_observers",children:"Event observers"})," _ to allow components to make changes when certain events take place."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/events.php"})," file allows you define any event subscriptions that your plugin needs to listen for."]}),"\n",(0,t.jsx)(n.p,{children:"Event subscriptions are a convenient way to observe events generated elsewhere in Moodle."}),"\n",(0,t.jsxs)(n.admonition,{title:"Communication between components",type:"caution",children:[(0,t.jsxs)(n.p,{children:["You ",(0,t.jsx)(n.em,{children:"should not"})," use event subscriptions to subscribe to events belonging to other plugins, without defining a dependency upon that plugin."]}),(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/general/development/policies/component-communication#event-observers",children:"Component communication principles"})," documentation for a description of some of the risks of doing so."]})]})]})}function I(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)($,{...e})}):$(e)}const A=e=>(0,t.jsx)(i.ul,{refreshedDuringUpgrade:!0,defaultDescription:I,defaultExample:"$observers = [\n    [\n        'eventname' => '\\core\\event\\course_module_created',\n        'callback'  => '\\plugintype_pluginname\\event\\observer\\course_module_created::store',\n        'priority'  => 1000,\n    ],\n];\n",filepath:"/db/events.php",summary:"Event observer definitions",examplePurpose:"Event observer definitions",...e});function S(e){const n={admonition:"admonition",code:"code",em:"em",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/install.php"})," file allows you define a post-installation hook, which is called immediately after the initial creation of your database schema."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["This file is not used at all after the ",(0,t.jsx)(n.em,{children:"initial"})," installation of your plugin."]}),(0,t.jsxs)(n.p,{children:["It is ",(0,t.jsx)(n.em,{children:"not called"})," during any upgrade."]})]})]})}function E(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(S,{...e})}):S(e)}const M=e=>(0,t.jsx)(i.ul,{defaultDescription:E,filepath:"/db/install.php",filetype:"php",summary:"Post-installation hook",...e});function T(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"install.xml"})," file is used to define any database tables, fields, indexes, and keys, which should be created for a plugin during its initial installation."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["When creating or updating the ",(0,t.jsx)(n.code,{children:"install.xml"})," you ",(0,t.jsx)(n.strong,{children:"must"})," use the built-in ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/XMLDB_Documentation",children:"XMLDB editor"})," within Moodle."]})})]})}function L(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(T,{...e})}):T(e)}const R=e=>(0,t.jsx)(i.ul,{filepath:"/db/install.xml",summary:"Database schema",examplePurpose:"Database schema",defaultDescription:L,...e});function N(e){const n={a:"a",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/messages.php"})," file allows you to declare the messages that your plugin sends."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/core/message/",children:"Message API"})," documentation for further information."]})]})}function k(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(N,{...e})}):N(e)}const D=e=>(0,t.jsx)(i.ul,{refreshedDuringUpgrade:!0,defaultExample:"\n$messageproviders = [\n    'things' => [\n        'defaults' => [\n            'airnotifier' => MESSAGE_PERMITTED + MESSAGE_DEFAULT_ENABLED,\n        ],\n    ],\n];\n",defaultDescription:k,filepath:"/db/messages.php",summary:"Message provider configuration",examplePurpose:"Message provider configuration",...e});function P(e){const n={a:"a",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The Moodle Mobile remote add-on is the mobile app version of the plugin that will be loaded when a user accesses the plugin on the app."}),"\n",(0,t.jsx)(n.p,{children:"A plugin can include several Mobile add-ons. Each add-on must indicate a unique name."}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/general/app/development/plugins-development-guide",children:"Moodle App Plugins development guide"})," for more information on configuring your plugin for the Moodle App."]})]})}function F(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(P,{...e})}):P(e)}const U=e=>(0,t.jsx)(i.ul,{refreshedDuringUpgrade:!0,defaultDescription:F,filepath:"/db/mobile.php",summary:"MoodleMobile version of the plugin",...e});function C(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Details of classes that have been renamed to fit in with autoloading. See ",(0,t.jsx)(n.a,{href:"https://moodle.org/mod/forum/discuss.php?d=262403",children:"forum discussion"})," for details."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["Adding renamed or moved classes to ",(0,t.jsx)(n.code,{children:"renamedclasses.php"})," is only necessary when the class is part of the component's API where it can be reused by other components, especially by third-party plugins. This is to maintain backwards-compatibility in addition to autoloading purposes."]}),(0,t.jsxs)(n.p,{children:["If the renamed or moved class is private/internal to the component and is not subject for external use, there is no need to add it to ",(0,t.jsx)(n.code,{children:"renamedclasses.php"}),"."]})]})]})}function O(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(C,{...e})}):C(e)}const B=e=>(0,t.jsx)(i.ul,{refreshedDuringPurge:!0,defaultExample:"\ndefined('MOODLE_INTERNAL') || die;\n\n$renamedclasses = [\n    'old_class_name' => 'fully_qualified\\\\new\\\\name',\n\n    // Examples:\n    'assign_header' => 'mod_assign\\\\output\\\\header',\n    '\\assign_header' => 'mod_assign\\\\output\\\\header',\n    '\\assign' => 'mod_assign\\\\assignment',\n\n    // Incorrect:\n    // The new class name should _not_ have a leading \\.\n    'assign_header' => '\\\\mod_assign\\\\output\\\\header',\n];\n",defaultDescription:O,filepath:"/db/renamedclasses.php",summary:"Renamed classes",examplePurpose:"Renamed classes",...e});function G(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/services.php"})," file is used to describe the external functions available for use in web services. This includes"]}),"\n",(0,t.jsxs)(n.p,{children:["web service functions defined for JavaScript, and for the ",(0,t.jsx)(n.a,{href:"/general/app",children:"Moodle Mobile App"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Web services should be named following the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Web_service_API_functions#Naming_convention",children:"naming convention for web services"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"For further information on external functions and web services, see:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/subsystems/external/writing-a-service",children:"Adding a web service to a plugin"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/subsystems/external/writing-a-service",children:"Web services API"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/subsystems/external/functions",children:"External functions API"})}),"\n"]})]})}function q(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(G,{...e})}):G(e)}const Y=e=>(0,t.jsx)(i.ul,{refreshedDuringUpgrade:!0,recommended:!0,filepath:"/db/services.php",summary:"Web service function declarations",examplePurpose:"Web service function declarations",defaultExample:"\n$functions = [\n    'plugintype_pluginname_create_things' => [\n        'classname' => 'plugintype_pluginname\\external\\create_things',\n        'description' => 'Create a new thing',\n        'type' => 'write',\n        'ajax' => true,\n        'services' => [\n            MOODLE_OFFICIAL_MOBILE_SERVICE,\n        ],\n    ],\n];\n",defaultDescription:q,...e});function z(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/tasks.php"})," file contains the initial schedule configuration for each of your plugins ",(0,t.jsx)(n.em,{children:"scheduled"})," tasks. Adhoc tasks are not run on a regular schedule and therefore are not described in this file."]}),"\n",(0,t.jsx)(n.admonition,{title:"Editing the schedule for an existing task",type:"caution",children:(0,t.jsx)(n.p,{children:"If an existing task is edited, it will only be updated in the database if the administrator has not customised the schedule of that task in any way."})}),"\n",(0,t.jsxs)(n.p,{children:["The following fields also accept a value of ",(0,t.jsx)(n.code,{children:"R"}),", which indicates that Moodle should choose a random value for that field:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"minute"}),"\n",(0,t.jsx)(n.li,{children:"hour"}),"\n",(0,t.jsx)(n.li,{children:"dayofweek"}),"\n",(0,t.jsx)(n.li,{children:"day"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["See ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/commonfiles/db-tasks.php/",children:"db/tasks.php"})," for full details of the file format."]})]})}function H(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(z,{...e})}):z(e)}const W=e=>(0,t.jsx)(i.ul,{defaultDescription:H,defaultExample:"$tasks = [\n    [\n        'classname' => 'mod_example\\task\\do_something',\n        'blocking' => 0,\n        'minute' => '30',\n        'hour' => '17',\n        'day' => '*',\n        'month' => '1,7',\n        'dayofweek' => '0',\n    ],\n];\n",filepath:"/db/tasks.php",summary:"Task schedule configuration",examplePurpose:"Task schedule configuration",refreshedDuringUpgrade:!0,...e});function X(e){const n={code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/uninstall.php"})," file allows you define a pre-uninstallation hook, which is called immediately before all table and data from your plugin are removed."]})}function J(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(X,{...e})}):X(e)}const V=e=>(0,t.jsx)(i.ul,{defaultDescription:J,filepath:"/db/uninstall.php",filetype:"php",summary:"Pre-uninstallation hook",...e});function Q(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"db/upgrade.php"})," file contains upgrade steps, including database schema changes, changes to settings, and other steps which must be performed during upgrade."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/upgrade/",children:"Upgrade API"})," documentation for further information."]}),"\n",(0,t.jsxs)(n.admonition,{title:"Generating Database Schema changes",type:"danger",children:[(0,t.jsxs)(n.p,{children:["When making changes to the database schema you ",(0,t.jsx)(n.strong,{children:"must"})," use the build-in ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/XMLDB_Documentation",children:"XMLDB editor"})," within\nMoodle. This can be used to generate php upgrade steps."]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/commonfiles/#dbinstallxml",children:"install.xml"})," schema must match the schema generated by the upgrade at all times."]})]}),"\n",(0,t.jsx)(n.p,{children:"To create an upgrade step you must:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Use the ",(0,t.jsx)(n.a,{href:"/general/development/tools/xmldb",children:"XMLDB editor"})," to create the definition of the new fields"]}),"\n",(0,t.jsxs)(n.li,{children:["Update the ",(0,t.jsx)(n.code,{children:"install.xml"})," from the XMLDB editor"]}),"\n",(0,t.jsx)(n.li,{children:"Generate the PHP upgrade steps from within the XMLDB Editor"}),"\n",(0,t.jsxs)(n.li,{children:["Update the version number in your ",(0,t.jsx)(n.code,{children:"version.php"})]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"In many cases you will be able to combine multiple upgrade steps into a single version change."})}),"\n",(0,t.jsxs)(n.p,{children:["When a version number increment is detected during an upgrade, the ",(0,t.jsx)(n.code,{children:"xmldb_[pluginname]_upgrade"})," function is called with the old version number as the first argument."]}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/upgrade/",children:"Upgrade API"})," documentation for more information on the upgrade process."]})]})}function K(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Q,{...e})}):Q(e)}const Z=e=>(0,t.jsx)(i.ul,{recommended:!0,defaultDescription:K,defaultExample:"\nfunction xmldb_certificate_upgrade($oldversion = 0) {\n    if ($oldversion < 2012091800) {\n        // Add new fields to certificate table.\n        $table = new xmldb_table('certificate');\n        $field = new xmldb_field('showcode');\n        $field->set_attributes(XMLDB_TYPE_INTEGER, '1', XMLDB_UNSIGNED, XMLDB_NOTNULL, null, '0', 'savecert');\n        if (!$dbman->field_exists($table, $field)) {\n            $dbman->add_field($table, $field);\n        }\n        // Add new fields to certificate_issues table.\n        $table = new xmldb_table('certificate_issues');\n        $field = new xmldb_field('code');\n        $field->set_attributes(XMLDB_TYPE_CHAR, '50', null, null, null, null, 'certificateid');\n        if (!$dbman->field_exists($table, $field)) {\n            $dbman->add_field($table, $field);\n        }\n\n        // Certificate savepoint reached.\n        upgrade_mod_savepoint(true, 2012091800, 'certificate');\n    }\n\n    // Everything has succeeded to here. Return true.\n    return true;\n}",filepath:"/db/upgrade.php",summary:"Upgrade steps",examplePurpose:"Upgrade steps",...e});function ee(e){const n={a:"a",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A plugin can declare its own environment requirements, in addition to those declared by Moodle core. These may includes features such as PHP extension requirements, version requirements, and similar items."}),"\n",(0,t.jsxs)(n.p,{children:["Further information on this file and its format can be found in the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Environment_checking",children:"Environment checking"})," documentation."]})]})}function ne(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ee,{...e})}):ee(e)}const se=e=>(0,t.jsx)(i.ul,{showFileHeader:!1,showLicense:!1,refreshedDuringUpgrade:!0,filepath:"/environment.xml",filetype:"xml",summary:"Plugin-specific environment requirements",defaultDescription:ne,defaultExample:'\n<?xml version="1.0" encoding="UTF-8" ?>\n<COMPATIBILITY_MATRIX>\n  <PLUGIN name="plugintype_pluginname">\n    <PHP_EXTENSIONS>\n      <PHP_EXTENSION name="soap" level="required">\n      </PHP_EXTENSION>\n    </PHP_EXTENSIONS>\n  </PLUGIN>\n</COMPATIBILITY_MATRIX>',...e});function ie(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Each plugin must define a set of language strings with, at a minimum, an English translation. These are specified in the plugin's ",(0,t.jsx)(n.code,{children:"lang/en"})," directory in a file named after the plugin. For example the LDAP authentication plugin:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"// Plugin type: `auth`\n// Plugin name: `ldap`\n// Frankenstyle plugin name: `auth_ldap`\n// Plugin location: `auth/ldap`\n// Language string location: `auth/ldap/lang/en/auth_ldap.php`\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["Every plugin ",(0,t.jsx)(n.em,{children:"must"})," define the name of the plugin, or its ",(0,t.jsx)(n.code,{children:"pluginname"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"get_string"})," API can be used to translate a string identifier back into a translated string."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"get_string('pluginname', '[plugintype]_[pluginname]');\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/String_API#Adding_language_file_to_plugin",children:"String API"})," documentation for more information on language files."]}),"\n"]})]})}function te(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ie,{...e})}):ie(e)}const oe=e=>(0,t.jsx)(i.ul,{filepath:"/lang/en/plugintype_pluginname.php",refreshedDuringPurge:!0,required:!0,summary:"Language files",examplePurpose:"Languages configuration",defaultDescription:te,defaultExample:"$string['pluginname'] = 'The name of my plugin will go here';",...e});function le(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"lib.php"})," file is a legacy file which acts as a bridge between Moodle core, and the plugin. In recent plugins it is should only used to define callbacks and related functionality which currently is not supported as an auto-loadable class."]}),"\n",(0,t.jsxs)(n.p,{children:["All functions defined in this file ",(0,t.jsx)(n.strong,{children:"must"})," meet the requirements set out in the relevant section of the ",(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#functions-and-methods",children:"Coding style"}),"."]}),"\n",(0,t.jsx)(n.admonition,{title:"Performance impact",type:"note",children:(0,t.jsxs)(n.p,{children:["Moodle core often loads all the ",(0,t.jsx)("tt",{children:"lib.php"})," files of a given plugin types. For performance reasons, it is strongly recommended to keep this file as small as possible and have just required code implemented in it. All the plugin's internal logic should be implemented in the auto-loaded classes."]})})]})}function ae(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(le,{...e})}):le(e)}const re=e=>(0,t.jsx)(i.ul,{legacy:!0,required:!1,filepath:"/lib.php",summary:"Global plugin functions",examplePurpose:"Plugin functions",defaultDescription:ae,...e});function de(e){const n={a:"a",admonition:"admonition",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"Legacy feature",type:"caution",children:(0,t.jsx)(n.p,{children:"The use of this file is no longer recommended, and new uses of it will not be permitted in core code."})}),"\n",(0,t.jsxs)(n.p,{children:["Rather than creating global functions in a global namespace in a ",(0,t.jsx)("tt",{children:"locallib.php"})," file, you should use autoloaded classes which are located in the ",(0,t.jsx)("tt",{children:"classes/"})," directory."]}),"\n",(0,t.jsxs)(n.p,{children:["Where this file is in use, all functions ",(0,t.jsx)(n.strong,{children:"must"})," meet the requirements set out in the relevant section of the ",(0,t.jsx)(n.a,{href:"/general/development/policies/codingstyle#functions-and-methods",children:"Coding style"})]}),"\n",(0,t.jsxs)(n.p,{children:["Existing functions which have been incorrectly named ",(0,t.jsx)(n.strong,{children:"will not"})," be accepted as an example of an existing convention. Existing functions which are incorrectly named ",(0,t.jsx)(n.strong,{children:"should"})," be converted to use a namespaced class."]})]})}function ce(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(de,{...e})}):de(e)}const ue=e=>(0,t.jsx)(i.ul,{defaultDescription:ce,filepath:"/locallib.php",legacy:!0,required:!1,summary:"Global support functions",...e});function he(e){const n={a:"a",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Plugins can provide icons in several formats, and most plugin types require that a default icon be provided."}),"\n",(0,t.jsxs)(n.p,{children:["Where a browser supports it, the ",(0,t.jsx)(n.code,{children:"svg"})," format is used, falling back to ",(0,t.jsx)(n.code,{children:"png"})," formats when an SVG is unavailable."]}),"\n",(0,t.jsxs)(n.p,{children:["Full details of the correct naming, sizing, and design guidelines for icons in Moodle can be found in the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Moodle_icons",children:"Moodle icons"})," documentation."]})]})}function pe(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(he,{...e})}):he(e)}const me=e=>(0,t.jsx)(i.ul,{defaultDescription:pe,refreshedDuringPurge:!0,filepath:"/pix/",summary:"Plugins icons",...e});function ge(e){const n={a:"a",code:"code",p:"p",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["We recommend that you include any additional information for your plugin in a project readme file. Ideally this should act as an offline version of all information in your plugin's page in the ",(0,t.jsx)(n.a,{href:"/general/community/plugincontribution/pluginsdirectory",children:"Plugins directory"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["We recommend creating your readme file in either a ",(0,t.jsx)(n.code,{children:"README.md"}),", or ",(0,t.jsx)(n.code,{children:"README.txt"})," format."]})]})}function fe(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ge,{...e})}):ge(e)}const xe=e=>(0,t.jsx)(i.ul,{filepath:"/README",recommended:!0,defaultDescription:fe,summary:"Plugin Information for Administrators",...e});function be(e){const n={code:"code",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["When importing a third-party library into your plugin, it is advisable to create a ",(0,t.jsx)(n.code,{children:"readme_moodle.txt"})," file detailing relevant information, including:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Download URLs"}),"\n",(0,t.jsx)(n.li,{children:"Build instructions"}),"\n"]})]})}function je(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(be,{...e})}):be(e)}const _e=e=>(0,t.jsx)(i.ul,{recommended:!0,filepath:"/*/readme_moodle.txt",defaultDescription:je,summary:"Third-party library import instructions",...e});function ye(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["You can define settings for your plugin that the administrator can configure by creating a ",(0,t.jsx)(n.code,{children:"settings.php"})," file in the root of your plugins' directory."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsx)(n.p,{children:"Settings must named in the following format:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"plugintype_pluginname/settingname\n"})}),(0,t.jsxs)(n.p,{children:["By following the correct naming, all settings will automatically be stored in the ",(0,t.jsx)(n.code,{children:"config_plugins"})," database table."]})]}),"\n",(0,t.jsxs)(n.p,{children:["Full details on how to create settings are available in the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/subsystems/admin/",children:"Admin settings"})," documentation."]})]})}function ve(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(ye,{...e})}):ye(e)}const we=e=>(0,t.jsx)(i.ul,{defaultDescription:ve,filepath:"/settings.php",summary:"Plugin settings",examplePurpose:"Plugin settings",...e});function $e(e){const n={a:"a",admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Plugins may define a '/styles.css' to provide plugin-specific styling. See the following for further documentation:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/general/community/plugincontribution/checklist#css-styles",children:"Plugin contribution checklist#CSS styles"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/CSS_Coding_Style",children:"CSS Coding Style"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Avoid custom styles where possible",type:"tip",children:(0,t.jsx)(n.p,{children:"Rather than writing custom CSS for your plugin, where possible apply Bootstrap classes to the DOM elements in your output. These will be easier to maintain and will adopt most colour, branding, and other customisations applied to a theme."})})]})}function Ie(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)($e,{...e})}):$e(e)}const Ae=e=>(0,t.jsx)(i.ul,{refreshedDuringPurge:!0,defaultDescription:Ie,filepath:"/styles.css",summary:"CSS style sheet for your plugin",...e});function Se(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Details of all third-party libraries should be declared in the ",(0,t.jsx)(n.code,{children:"thirdpartylibs.xml"})," file."]}),"\n",(0,t.jsx)(n.p,{children:"This information is used to generate ignore file configuration for linting tools. For Moodle core it is also used to generate library information as part of release notes and credits."}),"\n",(0,t.jsxs)(n.p,{children:["Within the XML the ",(0,t.jsx)(n.code,{children:"location"})," is a file, or directory, relative to your plugin's root."]}),"\n",(0,t.jsx)(n.admonition,{title:"Licensing",type:"caution",children:(0,t.jsxs)(n.p,{children:["The license of any third-party code included in your plugin, and within the ",(0,t.jsx)(n.code,{children:"thirdpartylibs.xml"})," file ",(0,t.jsx)(n.strong,{children:"must"})," be ",(0,t.jsx)(n.a,{href:"http://www.gnu.org/licenses/license-list.html#GPLCompatibleLicenses",children:"compatible with the GNU GPLv3"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["See the ",(0,t.jsx)(n.a,{href:"https://docs.moodle.org/dev/Third_Party_Libraries",children:"Third Party Libraries"})," documentation for further information."]})]})}function Ee(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Se,{...e})}):Se(e)}const Me=e=>(0,t.jsx)(i.ul,{defaultDescription:Ee,defaultExample:'<?xml version="1.0"?>\n<libraries>\n    <library>\n        <location>javascript/html5shiv.js</location>\n        <name>Html5Shiv</name>\n        <version>3.6.2</version>\n        <license>Apache</license>\n        <licenseversion>2.0</licenseversion>\n    </library>\n    <library>\n        <location>vendor/guzzle/guzzle/</location>\n        <name>guzzle</name>\n        <version>v3.9.3</version>\n        <license>MIT</license>\n        <licenseversion></licenseversion>\n    </library>\n</libraries>',filepath:"/thirdpartylibs.xml",filetype:"xml",summary:"Details of third-party libraries included in the plugin",showLicense:!1,showFileHeader:!1,...e});function Te(e){const n={code:"code",em:"em",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Each component and subsystem may make use of an ",(0,t.jsx)(n.code,{children:"upgrade.txt"})," file in the top level folder. A section title is used to identify the Moodle version where the change was introduced, and significant changes for that version relating to that component or subsystem are noted."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, given an API change is applied for the upcoming Moodle version 4.1 which is still in the ",(0,t.jsx)(n.strong,{children:"master"})," branch (4.1dev), the version number on the ",(0,t.jsx)(n.code,{children:"upgrade.txt"}),"'s section title will be set to ",(0,t.jsx)(n.strong,{children:"4.1"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 1: Change applied to the master branch"',children:"== 4.1 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"changes-applied-to-multiple-branches",children:"Changes applied to multiple branches"}),"\n",(0,t.jsxs)(n.p,{children:["When changes are integrated to multiple branches, for example a stable version and the master branch, then the relevant versions used to describe the change in the ",(0,t.jsx)(n.code,{children:"upgrade.txt"})," file should be the next version to be released ",(0,t.jsx)(n.em,{children:"for each branch"}),". The ",(0,t.jsx)(n.strong,{children:"master"})," branch should always use the next major version."]}),"\n",(0,t.jsxs)(n.p,{children:["For example, if a change is applied to the ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," during the development of Moodle 4.0.2, and the ",(0,t.jsx)(n.strong,{children:"master"})," branch during the development of Moodle 4.1, then the relevant versions will be ",(0,t.jsx)(n.strong,{children:"4.0.2"})," and ",(0,t.jsx)(n.strong,{children:"4.1"}),", respectively. The section title for the ",(0,t.jsx)(n.strong,{children:"master"})," branch will be the same as the one in Example 1. The section title for the ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," branch will indicate the next upcoming minor version (4.0.2 in this case):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 2: Patch applied to master and MOODLE_400_STABLE"',children:"== 4.0.2 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"mentioning-other-moodle-versions-the-change-applies-to",children:"Mentioning other Moodle versions the change applies to"}),"\n",(0,t.jsxs)(n.p,{children:["Multiple versions within the section title are ",(0,t.jsx)(n.strong,{children:"not"})," allowed. However, developers may note the Moodle versions that the change applies to within the upgrade note text itself."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3a: master (4.1dev)"',children:"== 4.1 ==\nAn API change to empower educators! (This was fixed in 4.1 and 4.0.2)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3b: MOODLE_400_STABLE"',children:"== 4.0.2 ==\nAn API change to empower educators! (This was fixed in 4.1 and 4.0.2)\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 3c: (INCORRECT) Multiple versions on the section title"',children:"== 4.1, 4.0.2 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.h4,{id:"exception-during-parallel-development",children:"Exception during parallel development"}),"\n",(0,t.jsx)(n.p,{children:"When Moodle is developing two major versions in parallel, for example Moodle 3.11.0, and Moodle 4.0.0, then the\nversion in the earliest of the major version development branches will be used for both branches."}),"\n",(0,t.jsxs)(n.p,{children:["For example, given we are in a parallel development situation with ",(0,t.jsx)(n.strong,{children:"MOODLE_311_STABLE"})," (3.11dev) and ",(0,t.jsx)(n.strong,{children:"master"})," (4.0dev), with Moodle 3.11 as the next upcoming major Moodle version. If an API change is applied to ",(0,t.jsx)(n.strong,{children:"MOODLE_311_STABLE"}),", the version number on the section title will be ",(0,t.jsx)(n.strong,{children:"3.11"})," for both ",(0,t.jsx)(n.strong,{children:"master"})," and ",(0,t.jsx)(n.strong,{children:"MOODLE_400_STABLE"})," branches."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 4a: master (4.0dev)"',children:"== 3.11 ==\nAn API change to empower educators!\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-txt",metastring:'title="Example 4b: MOODLE_311_STABLE (3.11dev)"',children:"== 3.11 ==\nAn API change to empower educators!\n"})})]})}function Le(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Te,{...e})}):Te(e)}const Re=e=>(0,t.jsx)(i.ul,{recommended:!0,filepath:"/*/upgrade.txt",defaultDescription:Le,summary:"Significant changes for each version of your plugin",...e});function Ne(e){const n={li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"The version.php contains metadata about the plugin."}),"\n",(0,t.jsx)(n.p,{children:"It is used during the installation and upgrade of the plugin."}),"\n",(0,t.jsx)(n.p,{children:"This file contains metadata used to describe the plugin, and includes information such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"the version number"}),"\n",(0,t.jsx)(n.li,{children:"a list of dependencies"}),"\n",(0,t.jsx)(n.li,{children:"the minimum Moodle version required"}),"\n",(0,t.jsx)(n.li,{children:"maturity of the plugin"}),"\n"]})]})}function ke(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Ne,{...e})}):Ne(e)}const De="defined('MOODLE_INTERNAL') || die();\n\n$plugin->version = TODO;\n$plugin->requires = TODO;\n$plugin->supported = TODO;   // Available as of Moodle 3.9.0 or later.\n$plugin->incompatible = TODO;   // Available as of Moodle 3.9.0 or later.\n$plugin->component = 'TODO_FRANKENSTYLE';\n$plugin->maturity = MATURITY_STABLE;\n$plugin->release = 'TODO';\n\n$plugin->dependencies = [\n    'mod_forum' => 2022042100,\n    'mod_data' => 2022042100\n];\n";function Pe(e){return(0,t.jsx)(i.ul,{required:!0,filepath:"/version.php",filetype:"php",summary:"Version metadata",examplePurpose:"Version metadata",defaultDescription:ke,defaultExample:De,...e})}function Fe(e){const n={a:"a",admonition:"admonition",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In older versions of Moodle, JavaScript was written in the YUI format. This is being phased out in favour of ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/javascript/modules",children:"JavaScript Modules"}),", although some older uses still remain in Moodle core."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/javascript/yui/modules",children:"YUI/Modules"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/guides/javascript/yui/",children:"YUI"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["New YUI code will not be accepted into Moodle core, except for new plugins for the ",(0,t.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/plugintypes/atto/",children:"Atto editor"}),"."]})})]})}function Ue(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(Fe,{...e})}):Fe(e)}const Ce=e=>(0,t.jsx)(i.ul,{legacy:!0,refreshedDuringPurge:!0,defaultDescription:Ue,filepath:"/yui/",examplePurpose:"YUI JavaScript Modules",summary:"YUI JavaScript Modules",...e})},22957:(e,n,s)=>{s.d(n,{A:()=>u});s(96540);var i=s(44744),t=s(65285),o=s(1489),l=s(8193),a=s(28453),r=s(74848);const d=function(e,n,s){return void 0===s&&(s="info"),(0,r.jsx)(o.Ay,{item:!0,children:(0,r.jsx)(t.A,{title:n,children:(0,r.jsx)(i.A,{label:e,color:s})})},e)};function c(e){const{example:n,open:s=!1}=e;return n?(0,r.jsx)(o.Ay,{item:!0,xs:12,children:(0,r.jsx)(l.A,{summary:(0,r.jsx)("summary",{children:"View example"}),open:s,children:n})}):null}function u(e){const{filepath:n,summary:s}=e,i=function(e){let{required:n=!1,legacy:s=!1,deprecated:i=!1,refreshedDuringUpgrade:t=!1,refreshedDuringPurge:o=!1}=e;const l=[];return t&&l.push(d("Upgradable","Changes to this file or directory will be re-applied during a Moodle upgrade. If you make any changes to it, you can simply increment the version number and perform a Moodle upgrade.","info")),o&&l.push(d("Refreshed on cache purge","The contents of this file or directory are cached. To see your changes you can simply purge Moodle's caches and refresh the page.","info")),n&&l.push(d("Required","This file must be present","success")),s&&l.push(d("Legacy","Use of this file is being phased out. It is still supported for older installations but will be removed..","warning")),i&&l.push(d("Deprecated","Use of this file is deprecated and not recommended.It may still be provided for older versions of Moodle but is no longer used.","error")),l}(e),t=e.description?(0,r.jsx)(o.Ay,{item:!0,xs:12,children:e.description}):null;return(0,r.jsx)(a.x,{children:(0,r.jsxs)(o.Ay,{container:!0,spacing:2,children:[(0,r.jsx)(o.Ay,{item:!0,xs:6,children:(0,r.jsx)("h4",{children:s})}),(0,r.jsx)(o.Ay,{item:!0,xs:6,children:(0,r.jsx)(o.Ay,{container:!0,spacing:2,justifyContent:"flex-end",children:i})}),(0,r.jsx)(o.Ay,{item:!0,xs:12,children:(0,r.jsxs)("h5",{children:["File path:"," ",n]})}),t,c(e)]})})}},37019:(e,n,s)=>{s.d(n,{rI:()=>u});s(96540);var i=s(47945);const t=JSON.parse('{"plugintypes":{"antivirus":"lib/antivirus","availability":"availability/condition","qtype":"question/type","mod":"mod","auth":"auth","calendartype":"calendar/type","communication":"communication/provider","customfield":"customfield/field","enrol":"enrol","message":"message/output","block":"blocks","media":"media/player","filter":"filter","editor":"lib/editor","format":"course/format","dataformat":"dataformat","profilefield":"user/profile/field","report":"report","coursereport":"course/report","gradeexport":"grade/export","gradeimport":"grade/import","gradereport":"grade/report","gradingform":"grade/grading/form","mlbackend":"lib/mlbackend","mnetservice":"mnet/service","webservice":"webservice","repository":"repository","portfolio":"portfolio","search":"search/engine","qbank":"question/bank","qbehaviour":"question/behaviour","qformat":"question/format","plagiarism":"plagiarism","tool":"admin/tool","cachestore":"cache/stores","cachelock":"cache/locks","fileconverter":"files/converter","contenttype":"contentbank/contenttype","theme":"theme","local":"local","h5plib":"h5p/h5plib","paygw":"payment/gateway"},"subsystems":{"access":null,"admin":"admin","adminpresets":"admin/presets","analytics":"analytics","antivirus":"lib/antivirus","auth":"auth","availability":"availability","backup":"backup/util/ui","badges":"badges","block":"blocks","blog":"blog","bulkusers":null,"cache":"cache","calendar":"calendar","cohort":"cohort","comment":"comment","communication":"communication","competency":"competency","completion":"completion","contentbank":"contentbank","countries":null,"course":"course","courseformat":"course/format","currencies":null,"customfield":"customfield","dbtransfer":null,"debug":null,"editor":"lib/editor","edufields":null,"enrol":"enrol","error":null,"external":"lib/external","favourites":"favourites","filepicker":null,"fileconverter":"files/converter","files":"files","filters":"filter","form":"lib/form","grades":"grade","grading":"grade/grading","group":"group","help":null,"hub":null,"h5p":"h5p","imscc":null,"install":null,"iso6392":null,"langconfig":null,"license":null,"mathslib":null,"media":"media","message":"message","mimetypes":null,"mnet":"mnet","my":"my","notes":"notes","pagetype":null,"payment":"payment","pix":null,"plagiarism":"plagiarism","plugin":null,"portfolio":"portfolio","privacy":"privacy","question":"question","rating":"rating","reportbuilder":"reportbuilder","repository":"repository","rss":"rss","role":"admin/roles","search":"search","table":"lib/table","tag":"tag","timezones":null,"user":"user","userkey":"lib/userkey","webservice":"webservice","xapi":"lib/xapi"}}');var o=s(74848);const l=e=>n=>{let{plugintype:s="plugintype",pluginname:i="pluginname",filepath:t=null}=n,o=(e=>n=>e.plugintypes[n]?e.plugintypes[n]:`[path/to/${n}]`)(e)(s);return o+=i?`/${i}`:"/[pluginname]",`${o}${t}`},a=l(t),r=(a(t),e=>{if(!e.showFileHeader)return"";switch(e?.filetype){case"xml":return"";case"js":case"javascript":return(e=>{let{plugintype:n="plugintype",pluginname:s="pluginname",examplePurpose:i,modulename:t}=e;if(!i)throw Error("Purpose must be specified");if(!t)throw Error("AMD Module name must be specified");return["/**",` * ${i} for the ${n}_${s} plugin.`," *",` * @module   ${n}_${s}/${t}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */",""].join("\n")})(e);case"yui":return(e=>{let{plugintype:n="plugintype",pluginname:s="pluginname",examplePurpose:i,modulename:t}=e;if(!i)throw Error("Purpose must be specified");if(!t)throw Error("YUI Module name must be specified");return["/*",` * @package   ${n}_${s}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */","","/**",` * @module moodle-${n}_${s}-${t}`," */",""].join("\n")})(e);default:return(e=>{let{plugintype:n="plugintype",pluginname:s="pluginname",examplePurpose:i}=e;if(!i)throw Error("Purpose must be specified");return["/**",` * ${i} for the ${n}_${s} plugin.`," *",` * @package   ${n}_${s}`," * @copyright Year, You Name <your@email.address>"," * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later"," */",""].join("\n")})(e)}}),d=e=>e.showLicense?(e.filetype,"// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n"):"",c=e=>{let{filetype:n="php"}=e;switch(n){case"js":case"javascript":return"javascript";case"xml":return"xml";case"php":case null:return"php";default:return n}},u=(h=t,(e,n)=>{const s={plugintype:"plugintype",showLicense:!0,showFileHeader:!0,filepath:e.exampleFilepath??e.filepath,...e},t=l(h),a=function(e,n){void 0===n&&(n=null);const s=[d(e),r(e),e.example?e.example:n||null].filter((e=>e)).map((e=>e.trim())).join("\n\n");return[(e=>{let{filetype:n="php"}=e;switch(n){case"js":case"javascript":case"xml":return null;default:return"<?php"}})(e),s].filter((e=>e)).join("\n")}(s,n);return(0,o.jsx)(i.A,{title:t(s),language:c(s),children:a})});var h},14298:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>f,frontMatter:()=>r,metadata:()=>c,plugintype:()=>h,settingsExtra:()=>p,toc:()=>m});var i=s(74848),t=s(28453),o=s(78924),l=s(817);const a="// Note: This is on by default.\n$settings->add(\n    new admin_setting_configcheckbox('assignsubmission_file/default',\n        new lang_string('default', 'assignsubmission_file'),\n        new lang_string('default_help', 'assignsubmission_file'),\n        1\n    )\n);\n\nif (isset($CFG->maxbytes)) {\n    $name = new lang_string('maximumsubmissionsize', 'assignsubmission_file');\n    $description = new lang_string('configmaxbytes', 'assignsubmission_file');\n\n    $element = new admin_setting_configselect(\n        'assignsubmission_file/maxbytes',\n        $name,\n        $description,\n        1048576,\n        get_max_upload_sizes($CFG->maxbytes)\n    );\n    $settings->add($element);\n}\n",r={title:"Assign submission plugins",tags:["Assign","Assignment","Submission","Subplugin"],toc_max_heading_level:4,description:"Assign submission plugins allow you to define different ways for a student to submit their work"},d=void 0,c={id:"apis/plugintypes/assign/submission",title:"Assign submission plugins",description:"Assign submission plugins allow you to define different ways for a student to submit their work",source:"@site/docs/apis/plugintypes/assign/submission.md",sourceDirName:"apis/plugintypes/assign",slug:"/apis/plugintypes/assign/submission",permalink:"/moodledevdocs/docs/4.4/apis/plugintypes/assign/submission",draft:!1,unlisted:!1,editUrl:"https://github.com/moodle/devdocs/edit/main/docs/apis/plugintypes/assign/submission.md",tags:[{label:"Assign",permalink:"/moodledevdocs/docs/4.4/tags/assign"},{label:"Assignment",permalink:"/moodledevdocs/docs/4.4/tags/assignment"},{label:"Submission",permalink:"/moodledevdocs/docs/4.4/tags/submission"},{label:"Subplugin",permalink:"/moodledevdocs/docs/4.4/tags/subplugin"}],version:"current",lastUpdatedBy:"Andrew Nicols",lastUpdatedAt:1713332374e3,frontMatter:{title:"Assign submission plugins",tags:["Assign","Assignment","Submission","Subplugin"],toc_max_heading_level:4,description:"Assign submission plugins allow you to define different ways for a student to submit their work"},sidebar:"docs",previous:{title:"Assign feedback plugins",permalink:"/moodledevdocs/docs/4.4/apis/plugintypes/assign/feedback"},next:{title:"Atto",permalink:"/moodledevdocs/docs/4.4/apis/plugintypes/atto/"}},u={},h="assignsubmission",p="\nAll submission plugins should include one setting named 'default' to indicate if the plugin should be enabled by default when creating a new assignment.\n",m=[{value:"File structure",id:"file-structure",level:2},{value:"settings.php",id:"settingsphp",level:3},{value:"locallib.php",id:"locallibphp",level:3},{value:"get_name()",id:"get_name",level:4},{value:"get_settings()",id:"get_settings",level:4},{value:"save_settings()",id:"save_settings",level:4},{value:"get_form_elements()",id:"get_form_elements",level:4},{value:"save()",id:"save",level:4},{value:"get_files()",id:"get_files",level:4},{value:"view_summary()",id:"view_summary",level:4},{value:"view()",id:"view",level:4},{value:"can_upgrade()",id:"can_upgrade",level:4},{value:"upgrade_settings()",id:"upgrade_settings",level:4},{value:"upgrade()",id:"upgrade",level:4},{value:"get_editor_fields()",id:"get_editor_fields",level:4},{value:"get_editor_text()",id:"get_editor_text",level:4},{value:"get_editor_format()",id:"get_editor_format",level:4},{value:"is_empty()",id:"is_empty",level:4},{value:"submission_is_empty()",id:"submission_is_empty",level:4},{value:"get_file_areas()",id:"get_file_areas",level:4},{value:"copy_submission()",id:"copy_submission",level:4},{value:"format_for_log()",id:"format_for_log",level:4},{value:"delete_instance()",id:"delete_instance",level:4},{value:"Useful classes",id:"useful-classes",level:2},{value:"assign_plugin",id:"assign_plugin",level:3},{value:"assign_submission_plugin",id:"assign_submission_plugin",level:3},{value:"assign",id:"assign",level:3},{value:"Other features",id:"other-features",level:2},{value:"Add calendar events",id:"add-calendar-events",level:3}];function g(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Details:s,Since:d}=n;return s||x("Details",!0),d||x("Since",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{frontMatter:r,metadata:c}),"\n","\n",(0,i.jsx)(n.p,{children:"An assignment submission plugin is used to display custom form fields to a student when they are editing their assignment submission. It also has full control over the display the submitted assignment to graders and students."}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["For a good reference implementation, see the ",(0,i.jsx)(n.a,{href:"https://github.com/moodle/moodle/tree/master/mod/assign/submission/onlinetext",children:"onlinetext"})," submission plugin included with core because it uses most of the features of submission plugins."]})}),"\n",(0,i.jsx)(n.h2,{id:"file-structure",children:"File structure"}),"\n",(0,i.jsxs)(n.p,{children:["Assignment Feedback plugins are located in the ",(0,i.jsx)(n.code,{children:"/mod/assign/submission"})," directory. A plugin should not include any custom files outside of it's own plugin folder."]}),"\n",(0,i.jsxs)(n.admonition,{title:"Plugin naming",type:"important",children:[(0,i.jsxs)(n.p,{children:["The plugin name should be no longer than 36 (11 before Moodle 4.3) characters - this is because the database tables for a submission plugin must be prefixed with ",(0,i.jsx)(n.code,{children:"assignsubmission_[pluginname]"})," (17 chars + X) and the table names can be no longer than 53 (28 before Moodle 4.3) chars due to a limitation with PostgreSQL."]}),(0,i.jsx)(n.p,{children:"If a plugin requires multiple database tables, the plugin name will need to be shorter to allow different table names to fit under the 53 character limit (28 before Moodle 4.3)."}),(0,i.jsx)(n.p,{children:"Note: If your plugin is intended to work with versions of Moodle older than 4.3, then the plugin name must be 11 characters or shorter, and table names must be 28 characters or shorter."}),(0,i.jsxs)(n.p,{children:["Each plugin is in a separate subdirectory and consists of a number of ",(0,i.jsx)(n.em,{children:"mandatory files"})," and any other files the developer is going to use."]}),(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["Some of the important files are described below. See the ",(0,i.jsx)(n.a,{href:"/moodledevdocs/docs/4.4/apis/commonfiles/",children:"common plugin files"})," documentation for details of other files which may be useful in your plugin."]})})]}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsxs)("summary",{children:["View an example directory layout for the ",(0,i.jsx)(n.code,{children:"assignfeedback_file"})," plugin."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-console",children:"mod/assign/submission/file\n\u251c\u2500\u2500 backup\n\u2502\xa0\xa0 \u2514\u2500\u2500 moodle2\n\u2502\xa0\xa0     \u251c\u2500\u2500 backup_assignsubmission_file_subplugin.class.php\n\u2502\xa0\xa0     \u2514\u2500\u2500 restore_assignsubmission_file_subplugin.class.php\n\u251c\u2500\u2500 classes\n\u2502\xa0\xa0 \u251c\u2500\u2500 event\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 assessable_uploaded.php\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 submission_created.php\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 submission_updated.php\n\u2502\xa0\xa0 \u2514\u2500\u2500 privacy\n\u2502\xa0\xa0     \u2514\u2500\u2500 provider.php\n\u251c\u2500\u2500 db\n\u2502\xa0\xa0 \u251c\u2500\u2500 access.php\n\u2502\xa0\xa0 \u2514\u2500\u2500 install.xml\n\u251c\u2500\u2500 lang\n\u2502\xa0\xa0 \u2514\u2500\u2500 en\n\u2502\xa0\xa0     \u2514\u2500\u2500 assignsubmission_file.php\n\u251c\u2500\u2500 lib.php\n\u251c\u2500\u2500 locallib.php\n\u251c\u2500\u2500 settings.php\n\u2514\u2500\u2500 version.php\n"})})]}),"\n",(0,i.jsx)(n.h3,{id:"settingsphp",children:"settings.php"}),"\n","\n","\n",(0,i.jsx)(l.Wi,{plugintype:h,pluginname:"file",example:a,extraDescription:p}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"This example from the submission_file plugin also checks to see if there is a maxbytes setting for this moodle installation and, if found,  adds a new admin setting to the settings page."})}),"\n",(0,i.jsx)(n.h3,{id:"locallibphp",children:"locallib.php"}),"\n",(0,i.jsx)(l.nm,{required:!0,legacy:!1,defaultDescription:!1}),"\n",(0,i.jsx)(n.p,{children:"This is where all the functionality for this plugin is defined. We will step through this file and describe each part as we go."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class assign_submission_file extends assign_submission_plugin {\n"})}),"\n",(0,i.jsx)(n.p,{children:"All submission plugins MUST define a class with the component name of the plugin that extends assign_submission_plugin."}),"\n",(0,i.jsx)(n.h4,{id:"get_name",children:"get_name()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_name() {\n    return get_string('file', 'assignsubmission_file');\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get name is abstract in submission_plugin and must be defined in your new plugin. Use the language strings to make your plugin translatable."}),"\n",(0,i.jsx)(n.h4,{id:"get_settings",children:"get_settings()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_settings(MoodleQuickForm $mform) {\n    global $CFG, $COURSE;\n\n    $defaultmaxfilesubmissions = $this->get_config('maxfilesubmissions');\n    $defaultmaxsubmissionsizebytes = $this->get_config('maxsubmissionsizebytes');\n\n    $settings = [];\n    $options = [];\n    for ($i = 1; $i <= ASSIGNSUBMISSION_FILE_MAXFILES; $i++) {\n        $options[$i] = $i;\n    }\n\n    $name = get_string('maxfilessubmission', 'assignsubmission_file');\n    $mform->addElement('select', 'assignsubmission_file_maxfiles', $name, $options);\n    $mform->addHelpButton(\n        'assignsubmission_file_maxfiles',\n        'maxfilessubmission',\n        'assignsubmission_file'\n    );\n    $mform->setDefault('assignsubmission_file_maxfiles', $defaultmaxfilesubmissions);\n    $mform->disabledIf('assignsubmission_file_maxfiles', 'assignsubmission_file_enabled', 'notchecked');\n\n    $choices = get_max_upload_sizes(\n        $CFG->maxbytes,\n        $COURSE->maxbytes,\n        get_config('assignsubmission_file', 'maxbytes')\n    );\n\n    $settings[] = [\n        'type' => 'select',\n        'name' => 'maxsubmissionsizebytes',\n        'description' => get_string('maximumsubmissionsize', 'assignsubmission_file'),\n        'options'=> $choices,\n        'default'=> $defaultmaxsubmissionsizebytes,\n    ];\n\n    $name = get_string('maximumsubmissionsize', 'assignsubmission_file');\n    $mform->addElement('select', 'assignsubmission_file_maxsizebytes', $name, $choices);\n    $mform->addHelpButton(\n        'assignsubmission_file_maxsizebytes',\n        'maximumsubmissionsize',\n        'assignsubmission_file'\n    );\n    $mform->setDefault('assignsubmission_file_maxsizebytes', $defaultmaxsubmissionsizebytes);\n    $mform->disabledIf(\n        'assignsubmission_file_maxsizebytes',\n        'assignsubmission_file_enabled',\n        'notchecked'\n    );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'The "get_settings" function is called when building the settings page for the assignment. It allows this plugin to add a list of settings to the form. Notice that the settings are prefixed by the plugin name which is good practice to avoid conflicts with other plugins.'}),"\n",(0,i.jsx)(n.h4,{id:"save_settings",children:"save_settings()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function save_settings(stdClass $data) {\n    $this->set_config('maxfilesubmissions', $data->assignsubmission_file_maxfiles);\n    $this->set_config('maxsubmissionsizebytes', $data->assignsubmission_file_maxsizebytes);\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'The "save_settings" function is called when the assignment settings page is submitted, either for a new assignment or when editing an existing one. For settings specific to a single instance of the assignment you can use the assign_plugin::set_config function shown here to save key/value pairs against this assignment instance for this plugin.'}),"\n",(0,i.jsx)(n.h4,{id:"get_form_elements",children:"get_form_elements()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_form_elements($submission, MoodleQuickForm $mform, stdClass $data) {\n    if ($this->get_config('maxfilesubmissions') <= 0) {\n        return false;\n    }\n\n    $fileoptions = $this->get_file_options();\n    $submissionid = $submission ? $submission->id : 0;\n\n    $data = file_prepare_standard_filemanager(\n        $data,\n        'files',\n        $fileoptions,\n        $this->assignment->get_context(),\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $submissionid\n    );\n\n    $mform->addElement(\n        'filemanager',\n        'files_filemanager',\n        html_writer::tag('span', $this->get_name(), ['class' => 'accesshide']),\n        null,\n        $fileoption\n    );\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The get_form_elements function is called when building the submission form. It functions identically to the get_settings function except that the submission object is available (if there is a submission) to associate the settings with a single submission. This example also shows how to use a filemanager within a submission plugin. The function must return true if it has modified the form otherwise the assignment will not include a header for this plugin."}),"\n",(0,i.jsx)(n.h4,{id:"save",children:"save()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function save(stdClass $submission, stdClass $data) {\n    global $USER, $DB;\n\n    $fileoptions = $this->get_file_options();\n\n    $data = file_postupdate_standard_filemanager(\n        $data,\n        'files',\n        $fileoptions,\n        $this->assignment->get_context(),\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $submission->id\n    );\n\n    $filesubmission = $this->get_file_submission($submission->id);\n\n    // Plagiarism code event trigger when files are uploaded.\n\n    $fs = get_file_storage();\n    $files = $fs->get_area_files(\n        $this->assignment->get_context()->id,\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $submission->id,\n        'id',\n        false\n    );\n\n    $count = $this->count_files($submission->id, ASSIGNSUBMISSION_FILE_FILEAREA);\n\n    // Send files to event system.\n    // This lets Moodle know that an assessable file was uploaded (eg for plagiarism detection).\n    $eventdata = new stdClass();\n    $eventdata->modulename = 'assign';\n    $eventdata->cmid = $this->assignment->get_course_module()->id;\n    $eventdata->itemid = $submission->id;\n    $eventdata->courseid = $this->assignment->get_course()->id;\n    $eventdata->userid = $USER->id;\n    if ($count > 1) {\n        $eventdata->files = $files;\n    }\n    $eventdata->file = $files;\n    $eventdata->pathnamehashes = array_keys($files);\n    events_trigger('assessable_file_uploaded', $eventdata);\n\n    if ($filesubmission) {\n        $filesubmission->numfiles = $this->count_files($submission->id,\n                                                        ASSIGNSUBMISSION_FILE_FILEAREA);\n        return $DB->update_record('assignsubmission_file', $filesubmission);\n    } else {\n        $filesubmission = new stdClass();\n        $filesubmission->numfiles = $this->count_files($submission->id,\n                                                        ASSIGNSUBMISSION_FILE_FILEAREA);\n        $filesubmission->submission = $submission->id;\n        $filesubmission->assignment = $this->assignment->get_instance()->id;\n        return $DB->insert_record('assignsubmission_file', $filesubmission) > 0;\n    }\n"})}),"\n",(0,i.jsxs)(n.p,{children:['The "save" function is called to save a user submission. The parameters are the submission object and the data from the submission form. This example calls ',(0,i.jsx)(n.code,{children:"file_postupdate_standard_filemanager"}),' to copy the files from the draft file area to the filearea for this submission, it then uses the event api to trigger an assessable_file_uploaded event for the plagiarism api. It then records the number of files in the plugin specific "assignsubmission_file" table.']}),"\n",(0,i.jsx)(n.h4,{id:"get_files",children:"get_files()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_files($submission) {\n    $result = [];\n    $fs = get_file_storage();\n\n    $files = $fs->get_area_files(\n        $this->assignment->get_context()->id,\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $submission->id,\n        'timemodified',\n        false\n    );\n\n    foreach ($files as $file) {\n        $result[$file->get_filename()] = $file;\n    }\n    return $result;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'If this submission plugin produces one or more files, it should implement "get_files" so that the portfolio API can export a list of all the files from all of the plugins for this assignment submission. This is also used by the offline grading feature in the assignment.'}),"\n",(0,i.jsx)(n.h4,{id:"view_summary",children:"view_summary()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function view_summary(stdClass $submission, & $showviewlink) {\n    $count = $this->count_files($submission->id, ASSIGNSUBMISSION_FILE_FILEAREA);\n\n    // Show we show a link to view all files for this plugin.\n    $showviewlink = $count > ASSIGNSUBMISSION_FILE_MAXSUMMARYFILES;\n    if ($count <= ASSIGNSUBMISSION_FILE_MAXSUMMARYFILES) {\n        return $this->assignment->render_area_files(\n            'assignsubmission_file',\n            ASSIGNSUBMISSION_FILE_FILEAREA,\n            $submission->id\n        );\n    }\n\n    return get_string('countfiles', 'assignsubmission_file', $count);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The view_summary function is called to display a summary of the submission to both markers and students. It counts the number of files submitted and if it is more that a set number, it only displays a count of how many files are in the submission - otherwise it uses a helper function to write the entire list of files. This is because we want to keep the summaries really short so they can be displayed in a table. There will be a link to view the full submission on the submission status page."}),"\n",(0,i.jsx)(n.h4,{id:"view",children:"view()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function view($submission) {\n    return $this->assignment->render_area_files(\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $submission->id\n    );\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The view function is called to display the entire submission to both markers and students. In this case it uses the helper function in the assignment class to write the list of files."}),"\n",(0,i.jsx)(n.h4,{id:"can_upgrade",children:"can_upgrade()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function can_upgrade($type, $version) {\n    $uploadsingle_type ='uploadsingle';\n    $upload_type ='upload';\n\n    if (($type == $uploadsingle_type || $type == $upload_type) && $version >= 2011112900) {\n        return true;\n    }\n    return false;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'The can_upgrade function is used to identify old "Assignment 2.2" subtypes that can be upgraded by this plugin. This plugin supports upgrades from the old "upload" and "uploadsingle" assignment subtypes.'}),"\n",(0,i.jsx)(n.h4,{id:"upgrade_settings",children:"upgrade_settings()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function upgrade_settings(context $oldcontext, stdClass $oldassignment, &$log) {\n    global $DB;\n\n    if ($oldassignment->assignmenttype == 'uploadsingle') {\n        $this->set_config('maxfilesubmissions', 1);\n        $this->set_config('maxsubmissionsizebytes', $oldassignment->maxbytes);\n        return true;\n    }\n\n    if ($oldassignment->assignmenttype == 'upload') {\n        $this->set_config('maxfilesubmissions', $oldassignment->var1);\n        $this->set_config('maxsubmissionsizebytes', $oldassignment->maxbytes);\n\n        // Advanced file upload uses a different setting to do the same thing.\n        $DB->set_field(\n            'assign',\n            'submissiondrafts',\n            $oldassignment->var4,\n            ['id' => $this->assignment->get_instance()->id]\n        );\n\n        // Convert advanced file upload \"hide description before due date\" setting.\n        $alwaysshow = 0;\n        if (!$oldassignment->var3) {\n            $alwaysshow = 1;\n        }\n        $DB->set_field(\n            'assign',\n            'alwaysshowdescription',\n            $alwaysshow,\n            ['id' => $this->assignment->get_instance()->id]\n        );\n        return true;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This function is called once per assignment instance to upgrade the settings from the old assignment to the new mod_assign. In this case it sets the ",(0,i.jsx)(n.code,{children:"maxbytes"}),", ",(0,i.jsx)(n.code,{children:"maxfiles"})," and ",(0,i.jsx)(n.code,{children:"alwaysshowdescription"})," configuration settings."]}),"\n",(0,i.jsx)(n.h4,{id:"upgrade",children:"upgrade()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function upgrade($oldcontext, $oldassignment, $oldsubmission, $submission, &$log) {\n    global $DB;\n\n    $filesubmission = (object) [\n        'numfiles' => $oldsubmission->numfiles,\n        'submission' => $submission->id,\n        'assignment' => $this->assignment->get_instance()->id,\n    ];\n\n    if (!$DB->insert_record('assign_submission_file', $filesubmission) > 0) {\n        $log .= get_string('couldnotconvertsubmission', 'mod_assign', $submission->userid);\n        return false;\n    }\n\n    // now copy the area files\n    $this->assignment->copy_area_files_for_upgrade(\n        $oldcontext->id,\n        'mod_assignment',\n        'submission',\n        $oldsubmission->id,\n        // New file area\n        $this->assignment->get_context()->id,\n        'mod_assign',\n        ASSIGN_FILEAREA_SUBMISSION_FILES,\n        $submission->id\n    );\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'The "upgrade" function upgrades a single submission from the old assignment type to the new one. In this case it involves copying all the files from the old filearea to the new one. There is a helper function available in the assignment class for this (Note: the copy will be fast as it is just adding rows to the files table). If this function returns false, the upgrade will be aborted and rolled back.'}),"\n",(0,i.jsx)(n.h4,{id:"get_editor_fields",children:"get_editor_fields()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function () {\n    return [\n        'onlinetext' => get_string('pluginname', 'assignsubmission_comments'),\n    ];\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'This example is from assignsubmission_onlinetext. If the plugin uses a text-editor it is ideal if the plugin implements "get_editor_fields". This allows the portfolio to retrieve the text from the plugin when exporting the list of files for a submission. This is required because the text is stored in the plugin specific table that is only known to the plugin itself. If a plugin supports multiple text areas it can return the name of each of them here.'}),"\n",(0,i.jsx)(n.h4,{id:"get_editor_text",children:"get_editor_text()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_editor_text($name, $submissionid) {\n    if ($name == 'onlinetext') {\n        $onlinetextsubmission = $this->get_onlinetext_submission($submissionid);\n        if ($onlinetextsubmission) {\n            return $onlinetextsubmission->onlinetext;\n        }\n    }\n\n    return '';\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'This example is from assignsubmission_onlinetext. If the plugin uses a text-editor it is ideal if the plugin implements "get_editor_text". This allows the portfolio to retrieve the text from the plugin when exporting the list of files for a submission. This is required because the text is stored in the plugin specific table that is only known to the plugin itself. The name is used to distinguish between multiple text areas in the one plugin.'}),"\n",(0,i.jsx)(n.h4,{id:"get_editor_format",children:"get_editor_format()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_editor_format($name, $submissionid) {\n    if ($name == 'onlinetext') {\n        $onlinetextsubmission = $this->get_onlinetext_submission($submissionid);\n        if ($onlinetextsubmission) {\n            return $onlinetextsubmission->onlineformat;\n        }\n    }\n\n    return 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:'This example is from assignsubmission_onlinetext. For the same reason as the previous function, if the plugin uses a text editor, it is ideal if the plugin implements "get_editor_format". This allows the portfolio to retrieve the text from the plugin when exporting the list of files for a submission. This is required because the text is stored in the plugin specific table that is only known to the plugin itself. The name is used to distinguish between multiple text areas in the one plugin.'}),"\n",(0,i.jsx)(n.h4,{id:"is_empty",children:"is_empty()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function is_empty(stdClass $submission) {\n    return $this->count_files($submission->id, ASSIGNSUBMISSION_FILE_FILEAREA) == 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"If a plugin has no submission data to show - it can return true from the is_empty function. This prevents a table row being added to the submission summary for this plugin. It is also used to check if a student has tried to save an assignment with no data."}),"\n",(0,i.jsx)(n.h4,{id:"submission_is_empty",children:"submission_is_empty()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function submission_is_empty() {\n    global $USER;\n    $fs = get_file_storage();\n\n    // Get a count of all the draft files, excluding any directories.\n    $files = $fs->get_area_files(\n        context_user::instance($USER->id)->id,\n        'user',\n        'draft',\n        $data->files_filemanager,\n        'id',\n        false\n    );\n\n    return count($files) == 0;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Determine if a submission is empty. This is distinct from is_empty() in that it is intended to be used to determine if a submission made before saving is empty."}),"\n",(0,i.jsx)(n.h4,{id:"get_file_areas",children:"get_file_areas()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function get_file_areas() {\n    return [ASSIGNSUBMISSION_FILE_FILEAREA=>$this->get_name()];\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"A plugin should implement get_file_areas if it supports saving of any files to moodle - this allows the file areas to be browsed by the moodle file manager."}),"\n",(0,i.jsx)(n.h4,{id:"copy_submission",children:"copy_submission()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function copy_submission(stdClass $sourcesubmission, stdClass $destsubmission) {\n    global $DB;\n\n    // Copy the files across.\n    $contextid = $this->assignment->get_context()->id;\n    $fs = get_file_storage();\n    $files = $fs->get_area_files(\n        $contextid,\n        'assignsubmission_file',\n        ASSIGNSUBMISSION_FILE_FILEAREA,\n        $sourcesubmission->id,\n        'id',\n        false\n    );\n    foreach ($files as $file) {\n        $fieldupdates = ['itemid' => $destsubmission->id];\n        $fs->create_file_from_storedfile($fieldupdates, $file);\n    }\n\n    // Copy the assignsubmission_file record.\n    if ($filesubmission = $this->get_file_submission($sourcesubmission->id)) {\n        unset($filesubmission->id);\n        $filesubmission->submission = $destsubmission->id;\n        $DB->insert_record('assignsubmission_file', $filesubmission);\n    }\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Since Moodle 2.5 - a students submission can be copied to create a new submission attempt. Plugins should implement this function if they store data associated with the submission (most plugins)."}),"\n",(0,i.jsx)(n.h4,{id:"format_for_log",children:"format_for_log()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function format_for_log(stdClass $submission) {\n    // Format the information for each submission plugin add_to_log\n    $filecount = $this->count_files($submission->id, ASSIGNSUBMISSION_FILE_FILEAREA);\n    return ' the number of file(s) : ' . $filecount . \" file(s).<br>\";\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The format_for_log function lets a plugin produce a really short summary of a submission suitable for adding to a log message."}),"\n",(0,i.jsx)(n.h4,{id:"delete_instance",children:"delete_instance()"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"public function delete_instance() {\n    global $DB;\n    // Will throw exception on failure\n    $DB->delete_records('assignsubmission_file', [\n        'assignment'=>$this->assignment->get_instance()->id,\n    ]);\n\n    return true;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The delete_instance function is called when a plugin is deleted. Note only database records need to be cleaned up - files belonging to fileareas for this assignment will be automatically cleaned up."}),"\n",(0,i.jsx)(n.h2,{id:"useful-classes",children:"Useful classes"}),"\n",(0,i.jsx)(n.p,{children:"A submission plugin has access to a number of useful classes in the assignment module. See the phpdocs (or the code) for more information on these classes."}),"\n",(0,i.jsx)(n.h3,{id:"assign_plugin",children:"assign_plugin"}),"\n",(0,i.jsx)(n.p,{children:"This abstract class is the base class for all assignment plugins (feedback or submission plugins)."}),"\n",(0,i.jsx)(n.p,{children:'It provides access to the assign class which represents the current assignment instance through "$this->assignment".'}),"\n",(0,i.jsx)(n.h3,{id:"assign_submission_plugin",children:"assign_submission_plugin"}),"\n",(0,i.jsx)(n.p,{children:"This is the base class all assignment submission plugins must extend. It contains a small number of additional function that only apply to submission plugins."}),"\n",(0,i.jsx)(n.h3,{id:"assign",children:"assign"}),"\n",(0,i.jsx)(n.p,{children:"This is the main class for interacting with the assignment module."}),"\n",(0,i.jsx)(n.p,{children:"It contains public functions that are useful for listing users, loading and updating submissions, loading and updating grades, displaying users etc."}),"\n",(0,i.jsx)(n.h2,{id:"other-features",children:"Other features"}),"\n",(0,i.jsx)(n.h3,{id:"add-calendar-events",children:"Add calendar events"}),"\n",(0,i.jsx)(d,{version:"3.1"}),"\n",(0,i.jsx)(n.p,{children:"Submission plugins can add events to the Moodle calendar without side effects. These will be hidden and deleted in line with the assignment module. For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"// Add release date to calendar.\n$calendarevent = new stdClass();\n$calendarevent->name         = get_string('calendareventname', 'assignsubmission_something');\n$calendarevent->description  = get_string('calendareventdesc', 'assignsubmission_something');\n$calendarevent->courseid     = $courseid;\n$calendarevent->groupid      = 0;\n$calendarevent->userid       = $userid;\n$calendarevent->modulename   = 'assign';\n$calendarevent->instance     = $instanceid;\n$calendarevent->eventtype    = 'something_release'; // For activity module's events, this can be used to set the alternative text of the event icon. Set it to 'pluginname' unless you have a better string.\n$calendarevent->timestart    = $releasedate;\n$calendarevent->visible      = true;\n$calendarevent->timeduration = 0;\n\ncalendar_event::create($calendarevent);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This code should be placed in the ",(0,i.jsx)(n.code,{children:"save_settings()"})," method of your assign_submission_plugin class."]})]})}function f(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}function x(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);